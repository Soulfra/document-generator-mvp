#!/usr/bin/env node
// ANCIENT-OS-EVOLUTION-MAPPER.js - Map ancient symbols to first operating systems

const http = require('http');
const WebSocket = require('ws');

class AncientOSEvolutionMapper {
    constructor() {
        this.port = 3141; // Pi port for foundational systems
        this.wsPort = 3142;
        
        // ANCIENT SYMBOLS ‚Üí EARLY COMPUTING ‚Üí OPERATING SYSTEMS
        this.evolutionPath = {
            // STAGE 1: ANCIENT CONCEPTS (3200 BCE - 0 CE)
            'ancient_concepts': {
                'memory': {
                    egyptian: 'ìéõ', // bread/sustenance
                    sumerian: 'íÜ≥', // storehouse
                    concept: 'Storage of value for later use',
                    rs_rune: 'earth_rune',
                    unix_concept: '/dev/mem',
                    linux_implementation: 'kmalloc/kfree'
                },
                'process': {
                    egyptian: 'ìÉÄ', // leg/movement
                    greek: 'Œõ', // lambda/function
                    concept: 'Going somewhere and returning',
                    rs_rune: 'air_rune',
                    unix_concept: 'fork()',
                    linux_implementation: 'task_struct'
                },
                'communication': {
                    egyptian: 'ìÖì', // bird/message
                    phoenician: '◊í', // camel/carry
                    concept: 'Carrying messages between places',
                    rs_rune: 'cosmic_rune',
                    unix_concept: 'pipes',
                    linux_implementation: 'sockets'
                },
                'protection': {
                    egyptian: 'ìäñ', // house/boundary
                    runic: '·ö¶', // thorn/defense
                    concept: 'Boundaries and protection',
                    rs_rune: 'law_rune',
                    unix_concept: 'chmod',
                    linux_implementation: 'capabilities'
                },
                'time': {
                    egyptian: 'ìá≥', // sun disk/cycle
                    maya: 'ùã†', // calendar glyph
                    concept: 'Cycles and scheduling',
                    rs_rune: 'cosmic_rune',
                    unix_concept: 'cron',
                    linux_implementation: 'jiffies/HZ'
                }
            },
            
            // STAGE 2: EARLY COMPUTERS (1940s-1960s)
            'early_systems': {
                'ENIAC_1945': {
                    type: 'First general-purpose computer',
                    memory: 'Mercury delay lines (ìéõ)',
                    process: 'Plugboard programming (ìÉÄ)',
                    io: 'Card reader/punch (ìÖì)',
                    concepts: ['stored_program', 'sequential_execution']
                },
                'Manchester_Baby_1948': {
                    type: 'First stored-program computer',
                    memory: 'Williams-Kilburn tube (ìéõ)',
                    process: 'Binary instructions (01)',
                    innovation: 'Programs in memory with data',
                    influence: 'von Neumann architecture'
                },
                'UNIVAC_1951': {
                    type: 'First commercial computer',
                    memory: 'Mercury delay lines',
                    process: 'Short code (first high-level lang)',
                    io: 'Magnetic tape (ìàñ flow)',
                    concepts: ['batch_processing', 'job_queue']
                }
            },
            
            // STAGE 3: FIRST OPERATING SYSTEMS (1950s-1970s)
            'first_operating_systems': {
                'GM-NAA_IO_1956': {
                    name: 'GM-NAA I/O',
                    type: 'First operating system',
                    company: 'General Motors + North American Aviation',
                    features: ['batch_processing', 'io_control'],
                    ancient_parallel: 'First organized rituals (ìäñ house rules)'
                },
                'CTSS_1961': {
                    name: 'Compatible Time-Sharing System',
                    type: 'First time-sharing OS',
                    company: 'MIT',
                    features: ['time_sharing', 'multiple_users', 'interactive'],
                    ancient_parallel: 'Multiple priests in temple (ìÇÄ many eyes)',
                    rs_parallel: 'Multiple players in world'
                },
                'Multics_1969': {
                    name: 'Multiplexed Information and Computing Service',
                    type: 'Ambitious time-sharing system',
                    features: ['hierarchical_file_system', 'dynamic_linking', 'security_rings'],
                    ancient_parallel: 'Pyramid hierarchy (ìäñ nested houses)',
                    failure: 'Too complex, led to Unix philosophy'
                },
                'Unix_1969': {
                    name: 'Uniplexed Information and Computing Service',
                    creators: 'Ken Thompson, Dennis Ritchie',
                    philosophy: 'Everything is a file',
                    features: ['pipes', 'fork', 'simple_tools'],
                    ancient_parallel: 'All is one (ìá≥ sun encompasses all)',
                    rs_parallel: 'All skills to 99'
                }
            },
            
            // STAGE 4: UNIX PHILOSOPHY ‚Üí LINUX
            'unix_to_linux': {
                'unix_philosophy': {
                    principles: [
                        'Write programs that do one thing well (ìÉÄ single purpose)',
                        'Write programs to work together (ìÖì messages between)',
                        'Write programs that handle text streams (ìàñ water flow)',
                        'Small is beautiful (·ö† rune efficiency)'
                    ],
                    core_utilities: {
                        'ls': 'List (ìÇÄ see)',
                        'cp': 'Copy (íä© duplicate)',
                        'rm': 'Remove (death_rune)',
                        'cat': 'Concatenate (ìàñ flow together)',
                        'grep': 'Search (ìÇÄ find patterns)',
                        'sed': 'Stream edit (ìàñ transform flow)',
                        'awk': 'Pattern-action (ìÜé snake patterns)'
                    }
                },
                'BSD_1977': {
                    name: 'Berkeley Software Distribution',
                    contribution: 'Sockets (ìÖì bird networks)',
                    license: 'Permissive (law_rune flexible)'
                },
                'GNU_1983': {
                    name: 'GNU\'s Not Unix',
                    creator: 'Richard Stallman',
                    philosophy: 'Free as in freedom',
                    tools: ['gcc', 'emacs', 'bash'],
                    ancient_parallel: 'Knowledge should be free (ìÇÄ all can see)'
                },
                'Linux_1991': {
                    name: 'Linux',
                    creator: 'Linus Torvalds',
                    type: 'Unix-like kernel',
                    philosophy: 'Pragmatic open source',
                    ancient_parallel: 'Community building (ìäñ many houses)',
                    rs_parallel: 'Clans working together'
                }
            },
            
            // STAGE 5: OTHER EARLY SYSTEMS
            'other_systems': {
                'CP_M_1974': {
                    name: 'Control Program/Monitor',
                    creator: 'Digital Research',
                    influence: 'Inspired MS-DOS',
                    concept: 'Personal computer OS'
                },
                'Apple_DOS_1978': {
                    name: 'Apple DOS',
                    platform: 'Apple II',
                    innovation: 'User-friendly',
                    philosophy: 'Computers for everyone'
                },
                'MS_DOS_1981': {
                    name: 'Microsoft Disk Operating System',
                    based_on: 'CP/M concepts',
                    significance: 'IBM PC standard',
                    ancient_parallel: 'Trade dominance (phoenician)'
                },
                'AmigaOS_1985': {
                    name: 'AmigaOS',
                    innovation: 'True multitasking on PC',
                    features: ['custom_chips', 'multimedia'],
                    ancient_parallel: 'Arts and computing merge'
                },
                'BeOS_1995': {
                    name: 'BeOS',
                    innovation: 'Media-focused OS',
                    features: ['pervasive_multithreading', '64bit_filesystem'],
                    fate: 'Too advanced for its time'
                }
            },
            
            // STAGE 6: WEB BROWSERS AS OS
            'browser_evolution': {
                'Mosaic_1993': {
                    name: 'NCSA Mosaic',
                    significance: 'First graphical web browser',
                    ancient_parallel: 'Hieroglyphs return (ìÇÄ visual)'
                },
                'Netscape_1994': {
                    name: 'Netscape Navigator',
                    innovation: 'JavaScript (dynamic pages)',
                    ancient_parallel: 'Living documents (ìÜé snake movement)'
                },
                'Opera_1995': {
                    name: 'Opera',
                    innovation: 'Tabs, speed dial, gestures',
                    philosophy: 'Browser as OS',
                    ancient_parallel: 'Multiple scrolls (ìéõ many breads)'
                },
                'Mozilla_Firefox_2004': {
                    name: 'Firefox',
                    philosophy: 'Open web',
                    extensions: 'User empowerment',
                    ancient_parallel: 'Democratic knowledge (greek)'
                },
                'Chrome_2008': {
                    name: 'Google Chrome',
                    innovation: 'Each tab = process',
                    v8_engine: 'JavaScript speed',
                    ancient_parallel: 'Divide and conquer (roman)'
                },
                'ChromeOS_2011': {
                    name: 'Chrome OS',
                    concept: 'Browser IS the OS',
                    philosophy: 'Everything in the cloud',
                    ancient_parallel: 'Return to terminals (ìäñ central house)'
                }
            }
        };
        
        // RUNESCAPE PARALLELS TO OS CONCEPTS
        this.runescapeOSMapping = {
            'tutorial_island': 'Boot process - learn basic controls',
            'lumbridge': 'User space - safe starting area',
            'wilderness': 'Kernel space - dangerous but powerful',
            'grand_exchange': 'IPC - Inter-process communication',
            'bank': 'Memory management - storage allocation',
            'combat': 'Process scheduling - CPU time slices',
            'skills': 'System calls - different OS services',
            'quests': 'Programs/Applications - complete tasks',
            'clans': 'Process groups - collaborative work',
            'pvp_worlds': 'Preemptive multitasking - resources contested',
            'ironman_mode': 'Sandboxing - isolated execution',
            'deadman_mode': 'Real-time OS - high stakes scheduling'
        };
        
        // THE GREAT PATTERN
        this.greatPattern = {
            'cycle': 'Everything returns to its origin',
            'evolution': [
                'Stone tablets (ìäñ) ‚Üí Clay tablets ‚Üí Papyrus ‚Üí Paper ‚Üí Magnetic tape ‚Üí SSD',
                'Hieroglyphs (ìÇÄ) ‚Üí Alphabets ‚Üí Machine code ‚Üí Assembly ‚Üí High-level ‚Üí Natural language',
                'Single user ‚Üí Time sharing ‚Üí Personal ‚Üí Network ‚Üí Cloud ‚Üí Edge ‚Üí Quantum',
                'RuneScape teaches these patterns through gameplay'
            ],
            'future': 'Quantum OS will use superposition like chaos/law runes'
        };
        
        console.log('üåå ANCIENT OS EVOLUTION MAPPER');
        console.log('==============================');
        console.log('üìú Tracing OS concepts to ancient origins');
        console.log('üîÆ Through RuneScape to modern systems');
    }
    
    start() {
        this.createServer();
        this.startWebSocket();
        this.beginEvolutionAnimation();
        
        console.log(`\nüåå Ancient OS Evolution: http://localhost:${this.port}`);
        console.log(`üì° WebSocket: ws://localhost:${this.wsPort}`);
    }
    
    beginEvolutionAnimation() {
        // Animate the evolution path
        setInterval(() => {
            this.broadcastEvolutionStep();
        }, 5000);
    }
    
    broadcastEvolutionStep() {
        const stages = Object.keys(this.evolutionPath);
        const stage = stages[Math.floor(Math.random() * stages.length)];
        const concepts = Object.keys(this.evolutionPath[stage]);
        const concept = concepts[Math.floor(Math.random() * concepts.length)];
        
        this.broadcast({
            type: 'evolution_step',
            stage: stage,
            concept: concept,
            data: this.evolutionPath[stage][concept]
        });
    }
    
    createServer() {
        const server = http.createServer((req, res) => {
            res.setHeader('Access-Control-Allow-Origin', '*');
            
            if (req.url === '/') {
                this.serveEvolutionInterface(res);
            } else if (req.url === '/api/evolution') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(this.evolutionPath));
            } else {
                res.writeHead(404);
                res.end('Not found');
            }
        });
        
        server.listen(this.port);
    }
    
    startWebSocket() {
        this.wss = new WebSocket.Server({ port: this.wsPort });
        this.wsClients = new Set();
        
        this.wss.on('connection', (ws) => {
            console.log('üåå Client connected to evolution mapper');
            this.wsClients.add(ws);
            
            ws.on('close', () => {
                this.wsClients.delete(ws);
            });
        });
    }
    
    broadcast(data) {
        const message = JSON.stringify(data);
        this.wsClients.forEach(ws => {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(message);
            }
        });
    }
    
    serveEvolutionInterface(res) {
        const html = `<!DOCTYPE html>
<html>
<head>
    <title>üåå Ancient OS Evolution Mapper</title>
    <style>
        body {
            margin: 0;
            background: #000;
            color: #0f0;
            font-family: 'Courier New', monospace;
            overflow-x: hidden;
        }
        
        .terminal {
            padding: 20px;
            background: rgba(0, 20, 0, 0.9);
            min-height: 100vh;
        }
        
        .header {
            text-align: center;
            font-size: 2em;
            color: #0f0;
            text-shadow: 0 0 10px #0f0;
            margin-bottom: 30px;
            white-space: pre;
        }
        
        .evolution-timeline {
            position: relative;
            padding: 20px 0;
            margin: 40px 0;
        }
        
        .timeline-line {
            position: absolute;
            left: 50%;
            top: 0;
            bottom: 0;
            width: 2px;
            background: linear-gradient(to bottom, #0f0, #00f, #f00);
        }
        
        .era-section {
            margin: 40px 0;
            position: relative;
        }
        
        .era-title {
            text-align: center;
            font-size: 1.5em;
            color: #0ff;
            margin: 20px 0;
            text-shadow: 0 0 10px #0ff;
        }
        
        .concept-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .concept-card {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid #0f0;
            border-radius: 10px;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }
        
        .concept-card::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #0f0, #0ff, #00f, #f0f);
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s;
            border-radius: 10px;
        }
        
        .concept-card:hover::before {
            opacity: 1;
            animation: rotate 3s linear infinite;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .symbol-evolution {
            display: flex;
            align-items: center;
            justify-content: space-around;
            margin: 15px 0;
            padding: 10px;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 5px;
        }
        
        .symbol {
            text-align: center;
        }
        
        .ancient-symbol {
            font-size: 2em;
            color: #ff0;
        }
        
        .arrow {
            color: #0ff;
            font-size: 1.5em;
        }
        
        .modern-concept {
            color: #0f0;
            font-family: monospace;
        }
        
        .os-timeline {
            margin: 40px 0;
        }
        
        .os-entry {
            display: flex;
            align-items: center;
            margin: 20px 0;
            position: relative;
        }
        
        .os-year {
            width: 100px;
            text-align: right;
            color: #ff0;
            font-weight: bold;
            margin-right: 20px;
        }
        
        .os-dot {
            width: 20px;
            height: 20px;
            background: #0f0;
            border-radius: 50%;
            margin-right: 20px;
            position: relative;
            z-index: 1;
        }
        
        .os-info {
            flex: 1;
            background: rgba(0, 255, 0, 0.05);
            border: 1px solid #0f0;
            border-radius: 5px;
            padding: 15px;
        }
        
        .os-name {
            font-size: 1.2em;
            color: #0ff;
            margin-bottom: 5px;
        }
        
        .rs-parallel {
            background: rgba(255, 102, 0, 0.2);
            border: 1px solid #ff6600;
            border-radius: 5px;
            padding: 10px;
            margin: 10px 0;
        }
        
        .rs-title {
            color: #ff6600;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .matrix-rain {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            opacity: 0.1;
            z-index: -1;
        }
        
        .philosophy-box {
            background: rgba(0, 100, 255, 0.1);
            border: 2px solid #00f;
            border-radius: 10px;
            padding: 20px;
            margin: 30px 0;
            text-align: center;
        }
        
        .philosophy-text {
            font-size: 1.2em;
            color: #0ff;
            font-style: italic;
        }
        
        .connection-line {
            stroke: #0f0;
            stroke-width: 2;
            fill: none;
            stroke-dasharray: 5,5;
            animation: dash 1s linear infinite;
        }
        
        @keyframes dash {
            to { stroke-dashoffset: -10; }
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
    </style>
</head>
<body>
    <canvas class="matrix-rain" id="matrix"></canvas>
    
    <div class="terminal">
        <pre class="header">
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          üåå ANCIENT OS EVOLUTION MAPPER üåå                ‚ïë
‚ïë  From Egyptian Hieroglyphs to Linux Through RuneScape     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        </pre>
        
        <div class="philosophy-box">
            <div class="philosophy-text">
                "Everything in computing has already been discovered by ancient civilizations.<br>
                We're just rediscovering it through different symbols."
            </div>
        </div>
        
        <div class="evolution-timeline">
            <div class="timeline-line"></div>
            
            <div class="era-section">
                <div class="era-title">‚ïê‚ïê‚ïê ANCIENT CONCEPTS (3200 BCE) ‚ïê‚ïê‚ïê</div>
                <div class="concept-grid">
                    ${Object.entries(this.evolutionPath.ancient_concepts).map(([key, concept]) => `
                        <div class="concept-card">
                            <h3>${key.toUpperCase()}</h3>
                            <div class="symbol-evolution">
                                <div class="symbol">
                                    <div class="ancient-symbol">${concept.egyptian || concept.greek || concept.runic || '?'}</div>
                                    <div>Ancient</div>
                                </div>
                                <div class="arrow">‚Üí</div>
                                <div class="symbol">
                                    <div class="ancient-symbol">üéÆ</div>
                                    <div>${concept.rs_rune}</div>
                                </div>
                                <div class="arrow">‚Üí</div>
                                <div class="symbol">
                                    <div class="modern-concept">${concept.unix_concept}</div>
                                    <div>Unix</div>
                                </div>
                                <div class="arrow">‚Üí</div>
                                <div class="symbol">
                                    <div class="modern-concept">${concept.linux_implementation}</div>
                                    <div>Linux</div>
                                </div>
                            </div>
                            <p style="color: #999; font-size: 0.9em;">${concept.concept}</p>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div class="era-section">
                <div class="era-title">‚ïê‚ïê‚ïê FIRST OPERATING SYSTEMS ‚ïê‚ïê‚ïê</div>
                <div class="os-timeline">
                    ${Object.entries(this.evolutionPath.first_operating_systems).map(([key, os]) => `
                        <div class="os-entry">
                            <div class="os-year">${key.split('_')[1]}</div>
                            <div class="os-dot pulse"></div>
                            <div class="os-info">
                                <div class="os-name">${os.name}</div>
                                <div>${os.type}</div>
                                <div style="color: #999; margin: 5px 0;">Features: ${os.features.join(', ')}</div>
                                ${os.ancient_parallel ? `
                                    <div style="color: #ff0; margin-top: 5px;">
                                        Ancient parallel: ${os.ancient_parallel}
                                    </div>
                                ` : ''}
                                ${os.rs_parallel ? `
                                    <div class="rs-parallel">
                                        <div class="rs-title">RuneScape Parallel:</div>
                                        ${os.rs_parallel}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div class="era-section">
                <div class="era-title">‚ïê‚ïê‚ïê UNIX ‚Üí LINUX EVOLUTION ‚ïê‚ïê‚ïê</div>
                <div class="concept-grid">
                    <div class="concept-card">
                        <h3>UNIX PHILOSOPHY</h3>
                        ${this.evolutionPath.unix_to_linux.unix_philosophy.principles.map(p => `
                            <div style="margin: 10px 0; padding: 10px; background: rgba(0,0,0,0.5); border-radius: 5px;">
                                ${p}
                            </div>
                        `).join('')}
                    </div>
                    <div class="concept-card">
                        <h3>CORE UTILITIES ‚Üí ANCIENT CONCEPTS</h3>
                        ${Object.entries(this.evolutionPath.unix_to_linux.unix_philosophy.core_utilities).map(([cmd, desc]) => `
                            <div style="display: flex; justify-content: space-between; margin: 5px 0;">
                                <code style="color: #0f0;">${cmd}</code>
                                <span style="color: #999;">${desc}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            
            <div class="era-section">
                <div class="era-title">‚ïê‚ïê‚ïê RUNESCAPE OS PARALLELS ‚ïê‚ïê‚ïê</div>
                <div class="concept-grid">
                    ${Object.entries(this.runescapeOSMapping).map(([rs, os]) => `
                        <div class="rs-parallel" style="margin: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <div class="rs-title">${rs.replace(/_/g, ' ').toUpperCase()}</div>
                                    <div style="color: #ccc;">${os}</div>
                                </div>
                                <div style="font-size: 2em;">üéÆ</div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div class="philosophy-box">
                <h3>üåå THE GREAT PATTERN</h3>
                <div style="margin: 20px 0;">
                    ${this.greatPattern.evolution.map(evo => `
                        <div style="margin: 10px 0; color: #0ff;">
                            ${evo}
                        </div>
                    `).join('')}
                </div>
                <div style="margin-top: 20px; font-size: 1.3em; color: #ff0;">
                    "${this.greatPattern.cycle}"
                </div>
                <div style="margin-top: 10px; color: #f0f;">
                    Future: ${this.greatPattern.future}
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Matrix rain effect
        const canvas = document.getElementById('matrix');
        const ctx = canvas.getContext('2d');
        
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const matrix = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|']}ìÇÄìäñìÜéìÖì·ö†·ö¢·ö¶·ö®ŒõŒ£Œ©";
        const matrixArray = matrix.split("");
        
        const fontSize = 10;
        const columns = canvas.width / fontSize;
        
        const drops = [];
        for(let x = 0; x < columns; x++) {
            drops[x] = 1;
        }
        
        function draw() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.04)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = '#0f0';
            ctx.font = fontSize + 'px monospace';
            
            for(let i = 0; i < drops.length; i++) {
                const text = matrixArray[Math.floor(Math.random() * matrixArray.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                
                if(drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    drops[i] = 0;
                }
                drops[i]++;
            }
        }
        
        setInterval(draw, 35);
        
        // WebSocket connection for live updates
        const ws = new WebSocket('ws://localhost:${this.wsPort}');
        
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'evolution_step') {
                // Flash the relevant concept
                const cards = document.querySelectorAll('.concept-card');
                const randomCard = cards[Math.floor(Math.random() * cards.length)];
                randomCard.style.animation = 'pulse 1s';
                setTimeout(() => {
                    randomCard.style.animation = '';
                }, 1000);
            }
        };
        
        // Typing effect for philosophy
        const philosophyTexts = [
            "Unix: Everything is a file",
            "RuneScape: Everything is a skill",
            "Reality: Everything is information",
            "Ancient wisdom: As above, so below"
        ];
        
        let textIndex = 0;
        setInterval(() => {
            const philBox = document.querySelector('.philosophy-text');
            philBox.style.opacity = '0';
            setTimeout(() => {
                philBox.innerHTML = philosophyTexts[textIndex % philosophyTexts.length];
                philBox.style.opacity = '1';
                textIndex++;
            }, 500);
        }, 5000);
    </script>
</body>
</html>`;
        
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(html);
    }
}

// START THE MAPPER
if (require.main === module) {
    console.log('üåå STARTING ANCIENT OS EVOLUTION MAPPER');
    console.log('======================================');
    console.log('üìú Tracing OS concepts back to hieroglyphs');
    console.log('üéÆ Through RuneScape to modern systems');
    console.log('üîÆ Revealing the eternal patterns');
    console.log('');
    
    const mapper = new AncientOSEvolutionMapper();
    mapper.start();
}

module.exports = AncientOSEvolutionMapper;