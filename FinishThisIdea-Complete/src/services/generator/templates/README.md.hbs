# {{displayName}}

{{description}}

## Overview

This service is part of the FinishThisIdea platform, providing {{#if (eq type 'api')}}API endpoints{{else if (eq type 'worker')}}background processing{{else if (eq type 'analyzer')}}code analysis{{else}}service generation{{/if}} capabilities.

- **Service ID**: `{{serviceId}}`
- **Type**: {{type}}
- **Pricing Tier**: {{pricing.tier}} ({{pricing.currency}}{{pricing.price}})
- **Port**: {{port}}

## Features

{{#each features}}
- {{this}}
{{/each}}

## Quick Start

### Prerequisites

- Node.js 18+
- Docker (optional)
- Redis (for worker services)

### Installation

```bash
# Clone the repository
git clone [repository-url]
cd {{name}}

# Install dependencies
npm install

# Copy environment variables
cp .env.example .env

# Configure your environment
# Edit .env with your settings
```

### Development

```bash
# Run in development mode
npm run dev

# Run tests
npm test

# Run linting
npm run lint

# Type checking
npm run typecheck
```

### Production

```bash
# Build the service
npm run build

# Start production server
npm start
```

### Docker

```bash
# Build Docker image
npm run docker:build

# Run with Docker
npm run docker:run

# Or use docker-compose
docker-compose up
```

## API Documentation

{{#if routes}}
### Endpoints

{{#each routes}}
#### {{this.method}} {{this.path}}

{{#if this.description}}{{this.description}}{{/if}}

{{#if this.rateLimit}}Rate limit: {{this.rateLimit}} requests/hour{{/if}}

{{/each}}
{{/if}}

### Authentication

All API endpoints require authentication using an API key:

```bash
curl -X POST http://localhost:{{port}}/api/process \
  -H "Authorization: Bearer YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"data": "your-data"}'
```

## Configuration

### Environment Variables

{{#if envVars}}
{{#each envVars}}
- `{{@key}}`: {{this}}
{{/each}}
{{else}}
- `PORT`: Service port (default: {{port}})
- `NODE_ENV`: Environment (development/production)
- `LOG_LEVEL`: Logging level (info/debug/error)
- `REDIS_URL`: Redis connection URL (for workers)
- `API_KEY`: Service API key
{{/if}}

{{#if workers}}
## Background Workers

This service includes the following background workers:

{{#each workers}}
### {{this.name}}

{{#if this.schedule}}
- **Schedule**: {{this.schedule}} (cron expression)
{{/if}}
{{#if this.concurrency}}
- **Concurrency**: {{this.concurrency}} concurrent jobs
{{/if}}

{{/each}}
{{/if}}

## Testing

```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Generate coverage report
npm run test:coverage
```

## Deployment

### Health Check

The service exposes a health check endpoint at `/health`:

```bash
curl http://localhost:{{port}}/health
```

### Monitoring

- Health checks are performed every 30 seconds
- Metrics are exposed for Prometheus scraping
- Logs are structured in JSON format

## Architecture

```
{{name}}/
├── src/
│   ├── controllers/    # Request handlers
│   ├── services/       # Business logic
│   ├── routes/         # API routes
│   ├── workers/        # Background jobs
│   ├── middleware/     # Express middleware
│   ├── utils/          # Utility functions
│   └── types/          # TypeScript types
├── tests/              # Test files
├── config/             # Configuration files
├── Dockerfile          # Docker configuration
└── docker-compose.yml  # Docker Compose setup
```

## Contributing

1. Create a feature branch
2. Make your changes
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## License

Copyright {{year}} FinishThisIdea. All rights reserved.

---

Generated on {{timestamp}}