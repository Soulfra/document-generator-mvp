#!/usr/bin/env node

/**
 * VOICE-AGENT INTEGRATION TEST SUITE
 * 
 * Comprehensive test for the voice-agent orchestration system
 * Tests voice processing, agent selection, command routing, and real-time feedback
 */

const WebSocket = require('ws');
const crypto = require('crypto');
const fetch = require('node-fetch');

class VoiceAgentIntegrationTester {
    constructor() {
        this.voiceWsUrl = 'ws://localhost:3336';
        this.agentBridgeUrl = 'http://localhost:9999';
        this.testResults = [];
        this.connections = new Map();
        this.sessionId = crypto.randomUUID();
        
        console.log('üé§ Voice-Agent Integration Test Suite');
        console.log('====================================');
        console.log(`Session ID: ${this.sessionId}`);
        console.log('');
    }
    
    async runAllTests() {
        try {
            await this.testVoiceConnection();
            await this.testCommandProcessing();
            await this.testAgentSelection();
            await this.testNaturalLanguageProcessing();
            await this.testContextManagement();
            await this.testErrorHandling();
            await this.testPerformanceMetrics();
            
            this.displayResults();
            
        } catch (error) {
            console.error('‚ùå Test suite failed:', error);
        } finally {
            this.cleanup();
        }
    }
    
    async testVoiceConnection() {\n        console.log('üîó Test 1: Voice Connection & Welcome');\n        console.log('------------------------------------');\n        \n        try {\n            // Create voice connection\n            const voiceWs = await this.createVoiceConnection('desktop', 'voice-test-1');\n            \n            // Wait for welcome message\n            const welcome = await this.waitForMessage(voiceWs, 'welcome', 5000);\n            \n            if (welcome && welcome.availableAgents && welcome.supportedCommands) {\n                this.recordTest('Voice Connection', true, \n                    `Connected with ${welcome.availableAgents.length} agents and ${welcome.supportedCommands.length} command types`);\n                console.log('‚úÖ Voice connection established');\n                console.log(`   Available agents: ${welcome.availableAgents.join(', ')}`);\n                console.log(`   Supported commands: ${welcome.supportedCommands.join(', ')}`);\n            } else {\n                throw new Error('Welcome message missing required data');\n            }\n            \n        } catch (error) {\n            this.recordTest('Voice Connection', false, error.message);\n            console.log('‚ùå Voice connection failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testCommandProcessing() {\n        console.log('üéØ Test 2: Command Processing');\n        console.log('-----------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            if (!voiceWs) {\n                throw new Error('Voice connection not available');\n            }\n            \n            // Test document processing command\n            const documentCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'process the document and extract text',\n                confidence: 0.95,\n                metadata: {\n                    deviceType: 'desktop',\n                    timestamp: new Date()\n                }\n            };\n            \n            voiceWs.send(JSON.stringify(documentCommand));\n            \n            // Wait for command started response\n            const commandStarted = await this.waitForMessage(voiceWs, 'command-started', 10000);\n            \n            if (commandStarted && commandStarted.agent) {\n                this.recordTest('Document Command Processing', true, \n                    `Command routed to ${commandStarted.agent.name} (${commandStarted.agent.id})`);\n                console.log('‚úÖ Document processing command routed successfully');\n                console.log(`   Agent: ${commandStarted.agent.name}`);\n                console.log(`   Capabilities: ${commandStarted.agent.capabilities?.join(', ')}`);\n            } else {\n                throw new Error('Command start confirmation not received');\n            }\n            \n            // Test git operations command\n            const gitCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'commit changes to git with message update files',\n                confidence: 0.88,\n                metadata: {\n                    deviceType: 'mobile',\n                    timestamp: new Date()\n                }\n            };\n            \n            voiceWs.send(JSON.stringify(gitCommand));\n            \n            const gitCommandStarted = await this.waitForMessage(voiceWs, 'command-started', 5000);\n            \n            if (gitCommandStarted) {\n                this.recordTest('Git Command Processing', true, \n                    `Git command routed to ${gitCommandStarted.agent.name}`);\n                console.log('‚úÖ Git operations command routed successfully');\n            }\n            \n        } catch (error) {\n            this.recordTest('Command Processing', false, error.message);\n            console.log('‚ùå Command processing failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testAgentSelection() {\n        console.log('ü§ñ Test 3: Agent Selection Logic');\n        console.log('--------------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            // Test commands that should route to different agents\n            const testCommands = [\n                {\n                    command: 'show me the system status and agent health',\n                    expectedCapabilities: ['system-monitoring', 'health-check']\n                },\n                {\n                    command: 'generate code for a web application',\n                    expectedCapabilities: ['code-generation', 'software-development']\n                },\n                {\n                    command: 'create a design on the canvas',\n                    expectedCapabilities: ['canvas-manipulation', 'visual-design']\n                }\n            ];\n            \n            let successCount = 0;\n            \n            for (const testCase of testCommands) {\n                const command = {\n                    type: 'voice-command',\n                    sessionId: this.sessionId,\n                    command: testCase.command,\n                    confidence: 0.9\n                };\n                \n                voiceWs.send(JSON.stringify(command));\n                \n                try {\n                    const response = await this.waitForMessage(voiceWs, 'command-started', 5000);\n                    \n                    if (response && response.agent && response.agent.capabilities) {\n                        const hasExpectedCapabilities = testCase.expectedCapabilities.some(cap => \n                            response.agent.capabilities.includes(cap)\n                        );\n                        \n                        if (hasExpectedCapabilities) {\n                            successCount++;\n                            console.log(`   ‚úÖ \"${testCase.command}\" ‚Üí ${response.agent.name}`);\n                        } else {\n                            console.log(`   ‚ùå \"${testCase.command}\" ‚Üí Wrong agent selected`);\n                        }\n                    }\n                } catch (error) {\n                    console.log(`   ‚ùå \"${testCase.command}\" ‚Üí No response`);\n                }\n                \n                // Wait between commands\n                await new Promise(resolve => setTimeout(resolve, 1000));\n            }\n            \n            const success = successCount >= testCommands.length * 0.7; // 70% success rate\n            this.recordTest('Agent Selection Logic', success, \n                `${successCount}/${testCommands.length} commands routed correctly`);\n            \n            if (success) {\n                console.log('‚úÖ Agent selection logic working correctly');\n            } else {\n                console.log('‚ö†Ô∏è  Agent selection needs improvement');\n            }\n            \n        } catch (error) {\n            this.recordTest('Agent Selection Logic', false, error.message);\n            console.log('‚ùå Agent selection test failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testNaturalLanguageProcessing() {\n        console.log('üß† Test 4: Natural Language Processing');\n        console.log('--------------------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            // Test varied natural language commands\n            const nlpTestCommands = [\n                'Could you please process this PDF document for me?',\n                'I need help creating a new React component',\n                'What\\'s the current status of my agents?',\n                'Can you commit my latest changes to the repository?',\n                'Help me design something on the shared canvas'\n            ];\n            \n            let processedCount = 0;\n            \n            for (const command of nlpTestCommands) {\n                const voiceCommand = {\n                    type: 'voice-command',\n                    sessionId: this.sessionId,\n                    command,\n                    confidence: 0.85\n                };\n                \n                voiceWs.send(JSON.stringify(voiceCommand));\n                \n                try {\n                    const response = await this.waitForMessage(voiceWs, \n                        ['command-started', 'clarification-needed', 'unknown-command'], 3000);\n                    \n                    if (response.type === 'command-started') {\n                        processedCount++;\n                        console.log(`   ‚úÖ \"${command}\" ‚Üí Processed`);\n                    } else if (response.type === 'clarification-needed') {\n                        console.log(`   ‚ö†Ô∏è  \"${command}\" ‚Üí Needs clarification`);\n                    } else {\n                        console.log(`   ‚ùå \"${command}\" ‚Üí Not understood`);\n                    }\n                } catch (error) {\n                    console.log(`   ‚ùå \"${command}\" ‚Üí No response`);\n                }\n                \n                await new Promise(resolve => setTimeout(resolve, 500));\n            }\n            \n            const nlpSuccess = processedCount >= nlpTestCommands.length * 0.6; // 60% success rate\n            this.recordTest('Natural Language Processing', nlpSuccess, \n                `${processedCount}/${nlpTestCommands.length} natural language commands understood`);\n            \n            if (nlpSuccess) {\n                console.log('‚úÖ Natural language processing working well');\n            } else {\n                console.log('‚ö†Ô∏è  NLP needs improvement');\n            }\n            \n        } catch (error) {\n            this.recordTest('Natural Language Processing', false, error.message);\n            console.log('‚ùå NLP test failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testContextManagement() {\n        console.log('üß© Test 5: Context Management');\n        console.log('-----------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            // First command to establish context\n            const firstCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'create a new React application',\n                confidence: 0.9\n            };\n            \n            voiceWs.send(JSON.stringify(firstCommand));\n            await this.waitForMessage(voiceWs, 'command-started', 5000);\n            \n            // Wait for context to be established\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            \n            // Follow-up command that should use context\n            const followUpCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'add routing to it',\n                confidence: 0.85\n            };\n            \n            voiceWs.send(JSON.stringify(followUpCommand));\n            \n            const contextResponse = await this.waitForMessage(voiceWs, 'command-started', 5000);\n            \n            if (contextResponse && contextResponse.agent) {\n                this.recordTest('Context Management', true, \n                    'Follow-up command processed with context awareness');\n                console.log('‚úÖ Context management working');\n                console.log(`   Follow-up routed to: ${contextResponse.agent.name}`);\n            } else {\n                throw new Error('Context-aware follow-up failed');\n            }\n            \n        } catch (error) {\n            this.recordTest('Context Management', false, error.message);\n            console.log('‚ùå Context management failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testErrorHandling() {\n        console.log('üö® Test 6: Error Handling');\n        console.log('-------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            // Test low confidence command\n            const lowConfidenceCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'mumbled unclear command',\n                confidence: 0.3 // Below threshold\n            };\n            \n            voiceWs.send(JSON.stringify(lowConfidenceCommand));\n            \n            const clarificationResponse = await this.waitForMessage(voiceWs, 'clarification-needed', 3000);\n            \n            if (clarificationResponse) {\n                console.log('   ‚úÖ Low confidence handled correctly');\n            }\n            \n            // Test unknown command\n            const unknownCommand = {\n                type: 'voice-command',\n                sessionId: this.sessionId,\n                command: 'activate quantum flux capacitor',\n                confidence: 0.95\n            };\n            \n            voiceWs.send(JSON.stringify(unknownCommand));\n            \n            const unknownResponse = await this.waitForMessage(voiceWs, 'unknown-command', 3000);\n            \n            if (unknownResponse && unknownResponse.availableCommands) {\n                console.log('   ‚úÖ Unknown command handled with suggestions');\n            }\n            \n            this.recordTest('Error Handling', true, 'Low confidence and unknown commands handled properly');\n            console.log('‚úÖ Error handling working correctly');\n            \n        } catch (error) {\n            this.recordTest('Error Handling', false, error.message);\n            console.log('‚ùå Error handling test failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async testPerformanceMetrics() {\n        console.log('‚ö° Test 7: Performance Metrics');\n        console.log('-----------------------------');\n        \n        try {\n            const voiceWs = this.connections.get('voice-test-1');\n            \n            // Send rapid commands to test performance\n            const startTime = Date.now();\n            const commandCount = 10;\n            let responseCount = 0;\n            let totalLatency = 0;\n            \n            const responseHandler = (message) => {\n                const data = JSON.parse(message);\n                if (data.type === 'command-started' && data.timestamp) {\n                    responseCount++;\n                    const latency = Date.now() - new Date(data.timestamp).getTime();\n                    totalLatency += Math.abs(latency); // Use absolute value for safety\n                }\n            };\n            \n            voiceWs.on('message', responseHandler);\n            \n            // Send commands rapidly\n            for (let i = 0; i < commandCount; i++) {\n                const command = {\n                    type: 'voice-command',\n                    sessionId: this.sessionId,\n                    command: `show system status iteration ${i}`,\n                    confidence: 0.9,\n                    timestamp: new Date()\n                };\n                \n                voiceWs.send(JSON.stringify(command));\n                await new Promise(resolve => setTimeout(resolve, 100)); // 100ms between commands\n            }\n            \n            // Wait for all responses\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            const duration = Date.now() - startTime;\n            const commandsPerSecond = (commandCount / duration) * 1000;\n            const averageLatency = responseCount > 0 ? totalLatency / responseCount : 0;\n            \n            console.log(`   üìä Commands/second: ${commandsPerSecond.toFixed(2)}`);\n            console.log(`   üìä Response rate: ${responseCount}/${commandCount}`);\n            console.log(`   üìä Average latency: ${averageLatency.toFixed(2)}ms`);\n            \n            const performanceGood = responseCount >= commandCount * 0.8 && averageLatency < 500;\n            \n            this.recordTest('Performance Metrics', performanceGood, \n                `${responseCount}/${commandCount} responses, ${averageLatency.toFixed(2)}ms avg latency`);\n            \n            if (performanceGood) {\n                console.log('‚úÖ Performance meets expectations');\n            } else {\n                console.log('‚ö†Ô∏è  Performance below expectations');\n            }\n            \n            voiceWs.removeListener('message', responseHandler);\n            \n        } catch (error) {\n            this.recordTest('Performance Metrics', false, error.message);\n            console.log('‚ùå Performance test failed:', error.message);\n        }\n        \n        console.log('');\n    }\n    \n    async createVoiceConnection(deviceType, deviceId) {\n        return new Promise((resolve, reject) => {\n            const ws = new WebSocket(this.voiceWsUrl, {\n                headers: {\n                    'x-device-type': deviceType,\n                    'x-device-id': deviceId,\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            ws.on('open', () => {\n                this.connections.set(deviceId, ws);\n                ws.messages = [];\n                \n                ws.on('message', (data) => {\n                    const message = JSON.parse(data.toString());\n                    ws.messages.push(message);\n                });\n                \n                resolve(ws);\n            });\n            \n            ws.on('error', (error) => {\n                reject(error);\n            });\n            \n            setTimeout(() => {\n                reject(new Error('Voice connection timeout'));\n            }, 10000);\n        });\n    }\n    \n    async waitForMessage(ws, messageTypes, timeout = 5000) {\n        const typesArray = Array.isArray(messageTypes) ? messageTypes : [messageTypes];\n        \n        return new Promise((resolve, reject) => {\n            const checkForMessage = () => {\n                const message = ws.messages.find(msg => typesArray.includes(msg.type));\n                if (message) {\n                    resolve(message);\n                    return true;\n                }\n                return false;\n            };\n            \n            // Check immediately\n            if (checkForMessage()) return;\n            \n            // Set up listener for new messages\n            const messageHandler = (data) => {\n                const message = JSON.parse(data.toString());\n                if (typesArray.includes(message.type)) {\n                    ws.removeListener('message', messageHandler);\n                    resolve(message);\n                }\n            };\n            \n            ws.on('message', messageHandler);\n            \n            // Timeout\n            setTimeout(() => {\n                ws.removeListener('message', messageHandler);\n                reject(new Error(`Timeout waiting for message types: ${typesArray.join(', ')}`));\n            }, timeout);\n        });\n    }\n    \n    recordTest(testName, success, details) {\n        this.testResults.push({\n            name: testName,\n            success,\n            details,\n            timestamp: new Date()\n        });\n    }\n    \n    displayResults() {\n        console.log('üìä VOICE-AGENT INTEGRATION TEST RESULTS');\n        console.log('=======================================');\n        console.log('');\n        \n        const passed = this.testResults.filter(test => test.success).length;\n        const total = this.testResults.length;\n        \n        this.testResults.forEach(test => {\n            const status = test.success ? '‚úÖ' : '‚ùå';\n            console.log(`${status} ${test.name}`);\n            console.log(`   ${test.details}`);\n            console.log('');\n        });\n        \n        console.log(`üìà Summary: ${passed}/${total} tests passed (${((passed/total)*100).toFixed(1)}%)`);\n        \n        if (passed === total) {\n            console.log('üéâ All tests passed! Voice-agent integration is working perfectly.');\n            console.log('');\n            console.log('üé§ The system can now:');\n            console.log('   ‚Ä¢ Process natural language voice commands');\n            console.log('   ‚Ä¢ Intelligently route commands to appropriate agents');\n            console.log('   ‚Ä¢ Maintain context across conversations');\n            console.log('   ‚Ä¢ Handle errors gracefully with user feedback');\n            console.log('   ‚Ä¢ Provide real-time status and results');\n        } else {\n            console.log('‚ö†Ô∏è  Some tests failed. Voice-agent integration needs attention.');\n        }\n    }\n    \n    cleanup() {\n        console.log('\\nüßπ Cleaning up test connections...');\n        \n        this.connections.forEach((ws, deviceId) => {\n            if (ws.readyState === WebSocket.OPEN) {\n                ws.close();\n            }\n        });\n        \n        this.connections.clear();\n        console.log('‚úÖ Cleanup complete');\n    }\n}\n\n// Demo for voice-agent integration\nclass VoiceAgentDemo {\n    constructor() {\n        this.voiceWsUrl = 'ws://localhost:3336';\n        this.sessionId = crypto.randomUUID();\n    }\n    \n    async runDemo() {\n        console.log('üé§ Voice-Agent Integration Demo');\n        console.log('==============================');\n        console.log(`Session: ${this.sessionId}`);\n        console.log('');\n        \n        try {\n            console.log('üîó Connecting to voice orchestrator...');\n            const voiceWs = await this.createConnection('desktop', 'demo-voice');\n            console.log('‚úÖ Connected to voice orchestrator');\n            \n            // Wait for welcome\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            \n            console.log('');\n            console.log('üéØ Demonstrating voice commands...');\n            \n            const demoCommands = [\n                'process the uploaded document',\n                'show me the current system status',\n                'commit changes to git',\n                'create a new React component',\n                'help me with canvas design'\n            ];\n            \n            for (const command of demoCommands) {\n                console.log(`\\nüó£Ô∏è  Saying: \"${command}\"`);\n                \n                voiceWs.send(JSON.stringify({\n                    type: 'voice-command',\n                    sessionId: this.sessionId,\n                    command,\n                    confidence: 0.9\n                }));\n                \n                // Wait and show response\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            }\n            \n            console.log('\\nüéâ Demo complete! Voice commands successfully processed.');\n            \n        } catch (error) {\n            console.error('‚ùå Demo failed:', error);\n        }\n    }\n    \n    async createConnection(deviceType, deviceId) {\n        return new Promise((resolve, reject) => {\n            const ws = new WebSocket(this.voiceWsUrl, {\n                headers: {\n                    'x-device-type': deviceType,\n                    'x-device-id': deviceId,\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            ws.on('open', () => {\n                ws.on('message', (data) => {\n                    const message = JSON.parse(data.toString());\n                    console.log(`   üì® Response: ${message.type}`);\n                    if (message.message) {\n                        console.log(`   üí¨ ${message.message}`);\n                    }\n                    if (message.agent) {\n                        console.log(`   ü§ñ Agent: ${message.agent.name || message.agent}`);\n                    }\n                });\n                \n                resolve(ws);\n            });\n            \n            ws.on('error', reject);\n            \n            setTimeout(() => {\n                reject(new Error('Demo connection timeout'));\n            }, 5000);\n        });\n    }\n}\n\n// Command line interface\nif (require.main === module) {\n    const command = process.argv[2] || 'test';\n    \n    if (command === 'test') {\n        const tester = new VoiceAgentIntegrationTester();\n        tester.runAllTests();\n    } else if (command === 'demo') {\n        const demo = new VoiceAgentDemo();\n        demo.runDemo();\n    } else {\n        console.log('Usage:');\n        console.log('  node test-voice-agent-integration.js test  # Run test suite');\n        console.log('  node test-voice-agent-integration.js demo  # Run interactive demo');\n    }\n}\n\nmodule.exports = { VoiceAgentIntegrationTester, VoiceAgentDemo };