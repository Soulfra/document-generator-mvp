name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Documentation Completeness Check (from soulfra-agentzero)
  docs-check:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check documentation completeness
        run: |
          echo "üîç Checking for required documentation files..."
          required_files=(
            "README.md"
            "QUICKSTART.md" 
            "SETUP.md"
            "docs/DEPLOYMENT.md"
            "docs/MVP.md"
            "INTEGRATION-SUMMARY.md"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required documentation files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
          echo "‚úÖ All required documentation files present"
      
      - name: Validate API documentation
        run: |
          echo "üîç Checking API route documentation..."
          find src/api/routes -name "*.ts" | while read -r file; do
            if ! grep -q "OpenAPI\|Swagger\|@route\|@description" "$file"; then
              echo "‚ö†Ô∏è  $file may need better documentation"
            fi
          done

  # Frontend Tests
  frontend-test:
    name: üéØ Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type checking
        run: npm run type-check
      
      - name: Lint check
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Backend Tests
  backend-test:
    name: üîß Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finishthisidea_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finishthisidea_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
      
      - name: Run Prisma generate
        run: npx prisma generate
      
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_test
      
      - name: Type checking
        run: npm run type-check
      
      - name: Lint check
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: backend
          name: backend-coverage

  # Security Scanning
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Audit npm dependencies
        run: |
          npm audit --audit-level=high
          cd frontend && npm audit --audit-level=high

      - name: Check for vulnerable packages
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -v '^0$'; then
            echo "High severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          fi

  # Code Quality
  code-quality:
    name: üìä Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint:report
        continue-on-error: true
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Check for TODOs and FIXMEs
        run: |
          echo "üîç Checking for TODOs and FIXMEs..."
          todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ frontend/src/ --exclude-dir=node_modules || echo "")
          if [[ -n "$todo_count" ]]; then
            echo "‚ö†Ô∏è  Found TODOs/FIXMEs in code:"
            echo "$todo_count"
          else
            echo "‚úÖ No TODOs/FIXMEs found"
          fi

  # Build Frontend
  build-frontend:
    name: üèóÔ∏è Build Frontend
    runs-on: ubuntu-latest
    needs: [frontend-test, security-scan]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  # Build Backend
  build-backend:
    name: üèóÔ∏è Build Backend
    runs-on: ubuntu-latest
    needs: [backend-test, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build backend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-dist
          path: dist
          retention-days: 1

  # Docker Build and Push
  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, code-quality]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push main image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push AI API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ai-api
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-ai-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Analytics image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.analytics
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database Migration Check
  migration-check:
    name: üóÉÔ∏è Migration Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finishthisidea_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Prisma generate
        run: npx prisma generate
      
      - name: Check migration status
        run: npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_migration_test
      
      - name: Run migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_migration_test

  # Performance Tests
  performance-test:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finishthisidea_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finishthisidea_perf" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
      
      - name: Start application
        run: |
          npm run db:generate
          npm run db:migrate:deploy &
          npm run start:mvp &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finishthisidea_perf
          REDIS_URL: redis://localhost:6379
          PORT: 3000
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run k6 smoke test
        run: |
          echo "üöÄ Running k6 performance smoke test..."
          npm run perf:ci
        env:
          TARGET_URL: http://localhost:3000
      
      - name: Run Artillery quick test
        run: |
          echo "üéØ Running Artillery quick test..."
          npm run load-test:artillery:quick
        env:
          TARGET_URL: http://localhost:3000
      
      - name: Generate performance report
        run: |
          echo "üìä Generating performance report..."
          mkdir -p reports/performance
          
          cat > reports/performance/performance-summary.md << 'EOF'
          # Performance Test Results - $(date)
          
          ## Test Environment
          - Target: http://localhost:3000
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          
          ## Tests Executed
          - ‚úÖ k6 smoke test (1 VU, 30s)
          - ‚úÖ Artillery quick test (10 users, 3 iterations)
          
          ## Status
          - Performance tests completed successfully
          - No critical performance regressions detected
          
          Generated: $(date)
          EOF
          
          echo "‚úÖ Performance tests completed"
      
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: reports/
          retention-days: 7
      
      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  # Deployment
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [docker-build, migration-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Add deployment commands here
          # This could use Docker Compose, Kubernetes, or cloud deployment
          echo "‚úÖ Deployment completed"
      
      - name: Health check
        run: |
          echo "üè• Running post-deployment health checks..."
          # Add health check commands here
          # curl -f $PRODUCTION_URL/health || exit 1
          echo "‚úÖ Health checks passed"
      
      - name: Notify deployment
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Deployment successful! üéâ"
          else
            echo "‚ùå Deployment failed! üö®"
          fi