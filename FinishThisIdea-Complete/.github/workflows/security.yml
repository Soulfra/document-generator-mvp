name: 🔒 Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Dependency Vulnerability Scan
  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Audit npm dependencies (Backend)
        run: |
          echo "🔍 Scanning backend dependencies..."
          npm audit --audit-level=moderate --json > audit-backend.json || true
          
          # Check if there are any vulnerabilities
          if [[ $(jq '.metadata.vulnerabilities.total' audit-backend.json) -gt 0 ]]; then
            echo "⚠️ Found vulnerabilities in backend dependencies:"
            jq '.advisories' audit-backend.json
          else
            echo "✅ No vulnerabilities found in backend dependencies"
          fi
      
      - name: Audit npm dependencies (Frontend)
        working-directory: ./frontend
        run: |
          echo "🔍 Scanning frontend dependencies..."
          npm ci
          npm audit --audit-level=moderate --json > audit-frontend.json || true
          
          # Check if there are any vulnerabilities
          if [[ $(jq '.metadata.vulnerabilities.total' audit-frontend.json) -gt 0 ]]; then
            echo "⚠️ Found vulnerabilities in frontend dependencies:"
            jq '.advisories' audit-frontend.json
          else
            echo "✅ No vulnerabilities found in frontend dependencies"
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: audit-results
          path: |
            audit-backend.json
            frontend/audit-frontend.json

  # CodeQL Analysis
  codeql-analysis:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
      
      - name: Build project
        run: |
          npm run build
          cd frontend && npm run build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Secret Scanning
  secret-scan:
    name: 🔐 Secret Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Docker Image Security Scan
  docker-security-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t finishthisidea:security-scan .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'finishthisidea:security-scan'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-docker-results.sarif'
      
      - name: Run Snyk to check Docker image
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: finishthisidea:security-scan
          args: --severity-threshold=high
        continue-on-error: true

  # License Compliance Check
  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install license-checker
        run: npm install -g license-checker
      
      - name: Check backend licenses
        run: |
          echo "🔍 Checking backend licenses..."
          npm ci
          license-checker --json --out backend-licenses.json
          
          # Check for problematic licenses
          if license-checker --excludePackages 'package@version' --restrictLicenses 'GPL;LGPL;AGPL' --summary; then
            echo "✅ No problematic licenses found in backend"
          else
            echo "⚠️ Found problematic licenses in backend dependencies"
            exit 1
          fi
      
      - name: Check frontend licenses
        working-directory: ./frontend
        run: |
          echo "🔍 Checking frontend licenses..."
          npm ci
          license-checker --json --out frontend-licenses.json
          
          # Check for problematic licenses
          if license-checker --excludePackages 'package@version' --restrictLicenses 'GPL;LGPL;AGPL' --summary; then
            echo "✅ No problematic licenses found in frontend"
          else
            echo "⚠️ Found problematic licenses in frontend dependencies"
            exit 1
          fi
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            backend-licenses.json
            frontend/frontend-licenses.json

  # Environment Security Check
  environment-security:
    name: 🌐 Environment Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for sensitive files
        run: |
          echo "🔍 Checking for sensitive files..."
          
          # Check for common sensitive file patterns
          sensitive_files=(
            "*.pem"
            "*.key"
            "*.p12"
            "*.pfx"
            "*.jks"
            "id_rsa*"
            "id_dsa*"
            "id_ecdsa*"
            "id_ed25519*"
            ".env"
            ".env.local"
            ".env.production"
            "config.json"
            "secrets.json"
          )
          
          found_sensitive=false
          for pattern in "${sensitive_files[@]}"; do
            if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./frontend/node_modules/*" | grep -q .; then
              echo "⚠️ Found potentially sensitive file: $pattern"
              find . -name "$pattern" -not -path "./node_modules/*" -not -path "./frontend/node_modules/*"
              found_sensitive=true
            fi
          done
          
          if [[ "$found_sensitive" == "false" ]]; then
            echo "✅ No sensitive files found"
          else
            echo "❌ Sensitive files detected!"
            exit 1
          fi
      
      - name: Check environment variable usage
        run: |
          echo "🔍 Checking environment variable usage..."
          
          # Check for hardcoded secrets in code
          if grep -r "password.*=.*['\"][^'\"]*['\"]" src/ frontend/src/ --exclude-dir=node_modules 2>/dev/null; then
            echo "⚠️ Found potential hardcoded passwords"
          fi
          
          if grep -r "secret.*=.*['\"][^'\"]*['\"]" src/ frontend/src/ --exclude-dir=node_modules 2>/dev/null; then
            echo "⚠️ Found potential hardcoded secrets"
          fi
          
          if grep -r "key.*=.*['\"][^'\"]*['\"]" src/ frontend/src/ --exclude-dir=node_modules 2>/dev/null; then
            echo "⚠️ Found potential hardcoded keys"
          fi
          
          echo "✅ Environment variable check completed"

  # Security Summary
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, docker-security-scan, license-check, environment-security]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Security | ${{ needs.environment-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.codeql-analysis.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" && 
                "${{ needs.docker-security-scan.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.environment-security.result }}" == "success" ]]; then
            echo "### ✅ All security checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some security checks failed. Please review the results." >> $GITHUB_STEP_SUMMARY
          fi