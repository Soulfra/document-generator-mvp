{
  "timestamp": "2025-07-24T15:15:06.534Z",
  "services": [
    [
      "version '3.8'",
      {
        "name": "version '3.8'",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "services",
      {
        "name": "services",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "postgres",
      {
        "name": "postgres",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image postgres:16-alpine",
      {
        "name": "image postgres:16-alpine",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-postgres",
      {
        "name": "container_name document-generator-postgres",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "environment",
      {
        "name": "environment",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER postgres",
      {
        "name": "POSTGRES_USER postgres",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD postgres",
      {
        "name": "POSTGRES_PASSWORD postgres",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB document_generator",
      {
        "name": "POSTGRES_DB document_generator",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ports",
      {
        "name": "ports",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "volumes",
      {
        "name": "volumes",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "healthcheck",
      {
        "name": "healthcheck",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"pg_isready -U postgres\"]",
      {
        "name": "test [\"CMD-SHELL\", \"pg_isready -U postgres\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "interval 10s",
      {
        "name": "interval 10s",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "timeout 5s",
      {
        "name": "timeout 5s",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "retries 5",
      {
        "name": "retries 5",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "networks",
      {
        "name": "networks",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "redis",
      {
        "name": "redis",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "running",
        "connected": true
      }
    ],
    [
      "image redis:7-alpine",
      {
        "name": "image redis:7-alpine",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-redis",
      {
        "name": "container_name document-generator-redis",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command redis-server --appendonly yes",
      {
        "name": "command redis-server --appendonly yes",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"redis-cli\", \"ping\"]",
      {
        "name": "test [\"CMD\", \"redis-cli\", \"ping\"]",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "minio",
      {
        "name": "minio",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image minio/minio:latest",
      {
        "name": "image minio/minio:latest",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-minio",
      {
        "name": "container_name document-generator-minio",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command server /data --console-address \":9001\"",
      {
        "name": "command server /data --console-address \":9001\"",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MINIO_ROOT_USER minioadmin",
      {
        "name": "MINIO_ROOT_USER minioadmin",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MINIO_ROOT_PASSWORD minioadmin123",
      {
        "name": "MINIO_ROOT_PASSWORD minioadmin123",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "interval 30s",
      {
        "name": "interval 30s",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "timeout 20s",
      {
        "name": "timeout 20s",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "retries 3",
      {
        "name": "retries 3",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ollama",
      {
        "name": "ollama",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image ollama/ollama:latest",
      {
        "name": "image ollama/ollama:latest",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-ollama",
      {
        "name": "container_name document-generator-ollama",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OLLAMA_HOST 0.0.0.0",
      {
        "name": "OLLAMA_HOST 0.0.0.0",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:11434/api/tags\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:11434/api/tags\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "timeout 10s",
      {
        "name": "timeout 10s",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "deploy",
      {
        "name": "deploy",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "resources",
      {
        "name": "resources",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "limits",
      {
        "name": "limits",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 8G",
      {
        "name": "memory 8G",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "reservations",
      {
        "name": "reservations",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 4G",
      {
        "name": "memory 4G",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "build",
      {
        "name": "build",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./mcp",
      {
        "name": "context ./mcp",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile",
      {
        "name": "dockerfile Dockerfile",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-template-processor",
      {
        "name": "container_name document-generator-template-processor",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "NODE_ENV production",
      {
        "name": "NODE_ENV production",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "PORT 3000",
      {
        "name": "PORT 3000",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "WS_PORT 8081",
      {
        "name": "WS_PORT 8081",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_URL postgresql://postgres:postgres@postgres:5432/document_generator",
      {
        "name": "DATABASE_URL postgresql://postgres:postgres@postgres:5432/document_generator",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_URL redis://redis:6379",
      {
        "name": "REDIS_URL redis://redis:6379",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OLLAMA_BASE_URL http://ollama:11434",
      {
        "name": "OLLAMA_BASE_URL http://ollama:11434",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OPENAI_API_KEY ${OPENAI_API_KEY:-}",
      {
        "name": "OPENAI_API_KEY ${OPENAI_API_KEY:-}",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY:-}",
      {
        "name": "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY:-}",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DEMO_MODE ${DEMO_MODE:-true}",
      {
        "name": "DEMO_MODE ${DEMO_MODE:-true}",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "depends_on",
      {
        "name": "depends_on",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "condition service_healthy",
      {
        "name": "condition service_healthy",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./FinishThisIdea",
      {
        "name": "context ./FinishThisIdea",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-ai-api",
      {
        "name": "container_name document-generator-ai-api",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "PORT 3001",
      {
        "name": "PORT 3001",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "S3_ENDPOINT http://minio:9000",
      {
        "name": "S3_ENDPOINT http://minio:9000",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_ACCESS_KEY_ID minioadmin",
      {
        "name": "AWS_ACCESS_KEY_ID minioadmin",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_SECRET_ACCESS_KEY minioadmin123",
      {
        "name": "AWS_SECRET_ACCESS_KEY minioadmin123",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "S3_BUCKET document-generator-uploads",
      {
        "name": "S3_BUCKET document-generator-uploads",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY:-}",
      {
        "name": "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY:-}",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET:-}",
      {
        "name": "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET:-}",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3001/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3001/health\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./FinishThisIdea-Complete",
      {
        "name": "context ./FinishThisIdea-Complete",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-platform-hub",
      {
        "name": "container_name document-generator-platform-hub",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "PORT 8080",
      {
        "name": "PORT 8080",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "API_GATEWAY_URL http://template-processor:3000",
      {
        "name": "API_GATEWAY_URL http://template-processor:3000",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AI_API_URL http://ai-api:3001",
      {
        "name": "AI_API_URL http://ai-api:3001",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "WS_URL ws://template-processor:8081",
      {
        "name": "WS_URL ws://template-processor:8081",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./services/sovereign-agents",
      {
        "name": "context ./services/sovereign-agents",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-sovereign-agents",
      {
        "name": "container_name document-generator-sovereign-agents",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "PORT 8085",
      {
        "name": "PORT 8085",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_PATH /app/data/sovereign-agents.db",
      {
        "name": "DATABASE_PATH /app/data/sovereign-agents.db",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATA_DIR /app/data",
      {
        "name": "DATA_DIR /app/data",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "LOG_LEVEL info",
      {
        "name": "LOG_LEVEL info",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"node\", \"health-check.js\"]",
      {
        "name": "test [\"CMD\", \"node\", \"health-check.js\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "analytics",
      {
        "name": "analytics",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.analytics",
      {
        "name": "dockerfile Dockerfile.analytics",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-analytics",
      {
        "name": "container_name document-generator-analytics",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "PORT 3002",
      {
        "name": "PORT 3002",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SOVEREIGN_AGENTS_URL http://sovereign-agents:8085",
      {
        "name": "SOVEREIGN_AGENTS_URL http://sovereign-agents:8085",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "prometheus",
      {
        "name": "prometheus",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image prom/prometheus:latest",
      {
        "name": "image prom/prometheus:latest",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-prometheus",
      {
        "name": "container_name document-generator-prometheus",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command",
      {
        "name": "command",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "grafana",
      {
        "name": "grafana",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image grafana/grafana:latest",
      {
        "name": "image grafana/grafana:latest",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-grafana",
      {
        "name": "container_name document-generator-grafana",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "GF_SECURITY_ADMIN_USER admin",
      {
        "name": "GF_SECURITY_ADMIN_USER admin",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "GF_SECURITY_ADMIN_PASSWORD admin",
      {
        "name": "GF_SECURITY_ADMIN_PASSWORD admin",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "GF_USERS_ALLOW_SIGN_UP false",
      {
        "name": "GF_USERS_ALLOW_SIGN_UP false",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "nginx",
      {
        "name": "nginx",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image nginx:alpine",
      {
        "name": "image nginx:alpine",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-nginx",
      {
        "name": "container_name document-generator-nginx",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "profiles",
      {
        "name": "profiles",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "driver bridge",
      {
        "name": "driver bridge",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "postgres_data",
      {
        "name": "postgres_data",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "redis_data",
      {
        "name": "redis_data",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "minio_data",
      {
        "name": "minio_data",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ollama_data",
      {
        "name": "ollama_data",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "prometheus_data",
      {
        "name": "prometheus_data",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "grafana_data",
      {
        "name": "grafana_data",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "sovereign_data",
      {
        "name": "sovereign_data",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "sovereign_logs",
      {
        "name": "sovereign_logs",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image postgres:15-alpine",
      {
        "name": "image postgres:15-alpine",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER hwvb_user",
      {
        "name": "POSTGRES_USER hwvb_user",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD hwvb_pass",
      {
        "name": "POSTGRES_PASSWORD hwvb_pass",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB howwasthevibe",
      {
        "name": "POSTGRES_DB howwasthevibe",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "backend",
      {
        "name": "backend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./backend",
      {
        "name": "context ./backend",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "NODE_ENV development",
      {
        "name": "NODE_ENV development",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_URL postgresql://hwvb_user:hwvb_pass@postgres:5432/howwasthevibe",
      {
        "name": "DATABASE_URL postgresql://hwvb_user:hwvb_pass@postgres:5432/howwasthevibe",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "JWT_SECRET your-jwt-secret-here",
      {
        "name": "JWT_SECRET your-jwt-secret-here",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "frontend",
      {
        "name": "frontend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./frontend",
      {
        "name": "context ./frontend",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "NEXT_PUBLIC_API_URL http://localhost:3001",
      {
        "name": "NEXT_PUBLIC_API_URL http://localhost:3001",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "NEXT_PUBLIC_WS_URL ws://localhost:3001",
      {
        "name": "NEXT_PUBLIC_WS_URL ws://localhost:3001",
        "dockerFile": "FinishThisIdea/HowWasTheVibe/generated/infrastructure/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "build .",
      {
        "name": "build .",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "restart unless-stopped",
      {
        "name": "restart unless-stopped",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "db",
      {
        "name": "db",
        "dockerFile": "FinishThisIdea/test-workspace/ai-os-clean/CalGenesis/SoulstreamOperatingSystem/SoulstreamOperatingSystem/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image postgres:15",
      {
        "name": "image postgres:15",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-mcp",
      {
        "name": "container_name finishthisidea-mcp",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MCP_PORT 9050",
      {
        "name": "MCP_PORT 9050",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_NAME mcp-unified-server",
      {
        "name": "SERVICE_NAME mcp-unified-server",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9050/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9050/health\"]",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command node mcp-unified-server.js",
      {
        "name": "command node mcp-unified-server.js",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-auth",
      {
        "name": "container_name finishthisidea-auth",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_PORT 9024",
      {
        "name": "SERVICE_PORT 9024",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_NAME auth-verification",
      {
        "name": "SERVICE_NAME auth-verification",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command node 100-percent-verification.js",
      {
        "name": "command node 100-percent-verification.js",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-calos",
      {
        "name": "container_name finishthisidea-calos",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_PORT 9027",
      {
        "name": "SERVICE_PORT 9027",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_NAME calos-system",
      {
        "name": "SERVICE_NAME calos-system",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command node calos-next-level.js",
      {
        "name": "command node calos-next-level.js",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-physical",
      {
        "name": "container_name finishthisidea-physical",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_PORT 9031",
      {
        "name": "SERVICE_PORT 9031",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_NAME physical-verification",
      {
        "name": "SERVICE_NAME physical-verification",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command node physical-verification-system.js",
      {
        "name": "command node physical-verification-system.js",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-rpc",
      {
        "name": "container_name finishthisidea-rpc",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_PORT 9040",
      {
        "name": "SERVICE_PORT 9040",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SERVICE_NAME camelcase-rpc",
      {
        "name": "SERVICE_NAME camelcase-rpc",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command node camelcase-api-rpc-interface.js",
      {
        "name": "command node camelcase-api-rpc-interface.js",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-redis",
      {
        "name": "container_name finishthisidea-redis",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-db",
      {
        "name": "container_name finishthisidea-db",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB finishthisidea",
      {
        "name": "POSTGRES_DB finishthisidea",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER finishthisidea",
      {
        "name": "POSTGRES_USER finishthisidea",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-supersecure}",
      {
        "name": "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-supersecure}",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-proxy",
      {
        "name": "container_name finishthisidea-proxy",
        "dockerFile": "FinishThisIdea/docker-compose-complete.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context .",
      {
        "name": "context .",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image vessel-command:latest",
      {
        "name": "image vessel-command:latest",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-command-center",
      {
        "name": "container_name vessel-command-center",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-registry",
      {
        "name": "container_name vessel-registry",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image spawn-portal:latest",
      {
        "name": "image spawn-portal:latest",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name spawn-portal",
      {
        "name": "container_name spawn-portal",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.vessel",
      {
        "name": "dockerfile Dockerfile.vessel",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "target scout-pod",
      {
        "name": "target scout-pod",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-scout-alpha",
      {
        "name": "container_name vessel-scout-alpha",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "cpus '0.5'",
      {
        "name": "cpus '0.5'",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 256M",
      {
        "name": "memory 256M",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "target battle-cruiser",
      {
        "name": "target battle-cruiser",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-battleship-omega",
      {
        "name": "container_name vessel-battleship-omega",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "cpus '2'",
      {
        "name": "cpus '2'",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 1G",
      {
        "name": "memory 1G",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "target mothership",
      {
        "name": "target mothership",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-mothership-nexus",
      {
        "name": "container_name vessel-mothership-nexus",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "cpus '4'",
      {
        "name": "cpus '4'",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-monitor",
      {
        "name": "container_name vessel-monitor",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name vessel-dashboard",
      {
        "name": "container_name vessel-dashboard",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ipam",
      {
        "name": "ipam",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "config",
      {
        "name": "config",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "gateway 172.20.0.1",
      {
        "name": "gateway 172.20.0.1",
        "dockerFile": "FinishThisIdea/docker-compose-vessels.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.blockchain",
      {
        "name": "dockerfile Dockerfile.blockchain",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-verifier",
      {
        "name": "container_name blockchain-verifier",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/api/status\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/api/status\"]",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-postgres",
      {
        "name": "container_name blockchain-postgres",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB blockchain_verification",
      {
        "name": "POSTGRES_DB blockchain_verification",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER blockchain",
      {
        "name": "POSTGRES_USER blockchain",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD secure_blockchain_pass",
      {
        "name": "POSTGRES_PASSWORD secure_blockchain_pass",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-redis",
      {
        "name": "container_name blockchain-redis",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-nginx",
      {
        "name": "container_name blockchain-nginx",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-prometheus",
      {
        "name": "container_name blockchain-prometheus",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name blockchain-grafana",
      {
        "name": "container_name blockchain-grafana",
        "dockerFile": "FinishThisIdea/docker-compose.blockchain.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "loki",
      {
        "name": "loki",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image grafana/loki:latest",
      {
        "name": "image grafana/loki:latest",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-loki",
      {
        "name": "container_name finishthisidea-loki",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command -config.file=/etc/loki/local-config.yaml",
      {
        "name": "command -config.file=/etc/loki/local-config.yaml",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1\"]",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "promtail",
      {
        "name": "promtail",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image grafana/promtail:latest",
      {
        "name": "image grafana/promtail:latest",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-promtail",
      {
        "name": "container_name finishthisidea-promtail",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command -config.file=/etc/promtail/config.yml",
      {
        "name": "command -config.file=/etc/promtail/config.yml",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:9080/ready || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:9080/ready || exit 1\"]",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "app",
      {
        "name": "app",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image finishthisidea:latest",
      {
        "name": "image finishthisidea:latest",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-app-logging",
      {
        "name": "container_name finishthisidea-app-logging",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "logging",
      {
        "name": "logging",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "driver \"json-file\"",
      {
        "name": "driver \"json-file\"",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "options",
      {
        "name": "options",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "labels \"service=finishthisidea\"",
      {
        "name": "labels \"service=finishthisidea\"",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-log-exporter",
      {
        "name": "container_name finishthisidea-log-exporter",
        "dockerFile": "FinishThisIdea/docker-compose.logging.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "loki_data",
      {
        "name": "loki_data",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "driver local",
      {
        "name": "driver local",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "monitoring",
      {
        "name": "monitoring",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "external true",
      {
        "name": "external true",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name finishthisidea-monitoring",
      {
        "name": "name finishthisidea-monitoring",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.memory-safe",
      {
        "name": "dockerfile Dockerfile.memory-safe",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name memory-safe-unified-mvp",
      {
        "name": "container_name memory-safe-unified-mvp",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 2G",
      {
        "name": "memory 2G",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "start_period 40s",
      {
        "name": "start_period 40s",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "labels",
      {
        "name": "labels",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name memory-monitor-sidecar",
      {
        "name": "container_name memory-monitor-sidecar",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command [\"node\", \"memory-monitor.js\", \"--interval=5000\", \"--warning=2048\", \"--critical=3072\"]",
      {
        "name": "command [\"node\", \"memory-monitor.js\", \"--interval=5000\", \"--warning=2048\", \"--critical=3072\"]",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name memory-safe-redis",
      {
        "name": "container_name memory-safe-redis",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "memory 512M",
      {
        "name": "memory 512M",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "default",
      {
        "name": "default",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name memory-safe-network",
      {
        "name": "name memory-safe-network",
        "dockerFile": "FinishThisIdea/docker-compose.memory-safe.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-prometheus",
      {
        "name": "container_name finishthisidea-prometheus",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9090/\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9090/\"]",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-grafana",
      {
        "name": "container_name finishthisidea-grafana",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\"]",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "alertmanager",
      {
        "name": "alertmanager",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image prom/alertmanager:latest",
      {
        "name": "image prom/alertmanager:latest",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-alertmanager",
      {
        "name": "container_name finishthisidea-alertmanager",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9093/\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9093/\"]",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image prom/node-exporter:latest",
      {
        "name": "image prom/node-exporter:latest",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-node-exporter",
      {
        "name": "container_name finishthisidea-node-exporter",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9100/\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9100/\"]",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image oliver006/redis_exporter:latest",
      {
        "name": "image oliver006/redis_exporter:latest",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-redis-exporter",
      {
        "name": "container_name finishthisidea-redis-exporter",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9121/\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9121/\"]",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image prometheuscommunity/postgres-exporter:latest",
      {
        "name": "image prometheuscommunity/postgres-exporter:latest",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-postgres-exporter",
      {
        "name": "container_name finishthisidea-postgres-exporter",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9187/\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9187/\"]",
        "dockerFile": "FinishThisIdea/docker-compose.monitoring.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-app",
      {
        "name": "container_name finishthisidea-app",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "alertmanager_data",
      {
        "name": "alertmanager_data",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.processor",
      {
        "name": "dockerfile Dockerfile.processor",
        "dockerFile": "FinishThisIdea/docker-compose.multistack.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.rust",
      {
        "name": "dockerfile Dockerfile.rust",
        "dockerFile": "FinishThisIdea/docker-compose.multistack.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.solidity",
      {
        "name": "dockerfile Dockerfile.solidity",
        "dockerFile": "FinishThisIdea/docker-compose.multistack.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.python",
      {
        "name": "dockerfile Dockerfile.python",
        "dockerFile": "FinishThisIdea/docker-compose.multistack.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.registry",
      {
        "name": "dockerfile Dockerfile.registry",
        "dockerFile": "FinishThisIdea/docker-compose.multistack.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.menu",
      {
        "name": "dockerfile Dockerfile.menu",
        "dockerFile": "FinishThisIdea/docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.arena",
      {
        "name": "dockerfile Dockerfile.arena",
        "dockerFile": "FinishThisIdea/docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.spawn",
      {
        "name": "dockerfile Dockerfile.spawn",
        "dockerFile": "FinishThisIdea/docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.citadel",
      {
        "name": "dockerfile Dockerfile.citadel",
        "dockerFile": "FinishThisIdea/docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.omniscient",
      {
        "name": "dockerfile Dockerfile.omniscient",
        "dockerFile": "FinishThisIdea/docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image python:3.11-slim",
      {
        "name": "image python:3.11-slim",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-unified-display",
      {
        "name": "container_name ai-agent-unified-display",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "working_dir /app",
      {
        "name": "working_dir /app",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python unified-verification-display-system.py\"",
      {
        "name": "command sh -c \"pip install flask requests && python unified-verification-display-system.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9999/api/verification/status\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9999/api/verification/status\"]",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-collar-system",
      {
        "name": "container_name ai-agent-collar-system",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python -c 'from verification_collar_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/verify\\\"); def verify(): collar_system = VerificationCollarSystem(); return collar_system.get_verification_status(); app.run(host=\\\"0.0.0.0\\\", port=9998)'\"",
      {
        "name": "command sh -c \"pip install flask requests && python -c 'from verification_collar_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/verify\\\"); def verify(): collar_system = VerificationCollarSystem(); return collar_system.get_verification_status(); app.run(host=\\\"0.0.0.0\\\", port=9998)'\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-triple-reasoning",
      {
        "name": "container_name ai-agent-triple-reasoning",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests aiohttp && python -c 'from triple_reasoning_router_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/status\\\"); def status(): router = TripleReasoningRouter(); return router.get_system_status(); app.run(host=\\\"0.0.0.0\\\", port=9997)'\"",
      {
        "name": "command sh -c \"pip install flask requests aiohttp && python -c 'from triple_reasoning_router_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/status\\\"); def status(): router = TripleReasoningRouter(); return router.get_system_status(); app.run(host=\\\"0.0.0.0\\\", port=9997)'\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "hardhat",
      {
        "name": "hardhat",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image node:18-alpine",
      {
        "name": "image node:18-alpine",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-hardhat",
      {
        "name": "container_name ai-agent-hardhat",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"npm install && npx hardhat node --hostname 0.0.0.0\"",
      {
        "name": "command sh -c \"npm install && npx hardhat node --hostname 0.0.0.0\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"-q\", \"--spider\", \"http://localhost:8545\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"-q\", \"--spider\", \"http://localhost:8545\"]",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.rust-unified",
      {
        "name": "dockerfile Dockerfile.rust-unified",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-rust-wrapper",
      {
        "name": "container_name ai-agent-rust-wrapper",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-ecosystem-master",
      {
        "name": "container_name ai-agent-ecosystem-master",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python ecosystem-master-platform.py\"",
      {
        "name": "command sh -c \"pip install flask requests && python ecosystem-master-platform.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/api/status\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/api/status\"]",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-vanity",
      {
        "name": "container_name ai-agent-vanity",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python agent-vanity-customization-system.py\"",
      {
        "name": "command sh -c \"pip install flask requests && python agent-vanity-customization-system.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:7777\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:7777\"]",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-trading",
      {
        "name": "container_name ai-agent-trading",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python agent-trading-marketplace.py\"",
      {
        "name": "command sh -c \"pip install flask requests && python agent-trading-marketplace.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:6666/api/analytics\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:6666/api/analytics\"]",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-breeding",
      {
        "name": "container_name ai-agent-breeding",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python agent-breeding-evolution-system.py\"",
      {
        "name": "command sh -c \"pip install flask requests && python agent-breeding-evolution-system.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5555\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5555\"]",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-deployer",
      {
        "name": "container_name ai-agent-deployer",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"sleep 10 && npm install && npm run compile && npm run deploy:localhost\"",
      {
        "name": "command sh -c \"sleep 10 && npm install && npm run compile && npm run deploy:localhost\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-agent-json-api",
      {
        "name": "container_name ai-agent-json-api",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests && python -c 'import flask, requests, json; app = flask.Flask(__name__); @app.route(\\\"/complete-verification\\\"); def verify(): return json.dumps({\\\"collar_system\\\": requests.get(\\\"http://verification-collar:9998/verify\\\").json(), \\\"reasoning_system\\\": requests.get(\\\"http://triple-reasoning:9997/status\\\").json(), \\\"rust_wrapper\\\": requests.get(\\\"http://rust-wrapper:8080/health\\\").json(), \\\"services\\\": {\\\"ecosystem\\\": requests.get(\\\"http://ecosystem-master:8888/api/status\\\").json(), \\\"vanity\\\": \\\"running\\\", \\\"trading\\\": \\\"running\\\", \\\"breeding\\\": \\\"running\\\"}}); app.run(host=\\\"0.0.0.0\\\", port=9996)'\"",
      {
        "name": "command sh -c \"pip install flask requests && python -c 'import flask, requests, json; app = flask.Flask(__name__); @app.route(\\\"/complete-verification\\\"); def verify(): return json.dumps({\\\"collar_system\\\": requests.get(\\\"http://verification-collar:9998/verify\\\").json(), \\\"reasoning_system\\\": requests.get(\\\"http://triple-reasoning:9997/status\\\").json(), \\\"rust_wrapper\\\": requests.get(\\\"http://rust-wrapper:8080/health\\\").json(), \\\"services\\\": {\\\"ecosystem\\\": requests.get(\\\"http://ecosystem-master:8888/api/status\\\").json(), \\\"vanity\\\": \\\"running\\\", \\\"trading\\\": \\\"running\\\", \\\"breeding\\\": \\\"running\\\"}}); app.run(host=\\\"0.0.0.0\\\", port=9996)'\"",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name ai-agent-unified-network",
      {
        "name": "name ai-agent-unified-network",
        "dockerFile": "FinishThisIdea/docker-compose.unified.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8545\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8545\"]",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.rust-new",
      {
        "name": "dockerfile Dockerfile.rust-new",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests sqlite3 && python agent-trading-marketplace.py\"",
      {
        "name": "command sh -c \"pip install flask requests sqlite3 && python agent-trading-marketplace.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"pip install flask requests sqlite3 && python agent-breeding-evolution-system.py\"",
      {
        "name": "command sh -c \"pip install flask requests sqlite3 && python agent-breeding-evolution-system.py\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command sh -c \"npm install && npm run compile && npm run deploy:localhost\"",
      {
        "name": "command sh -c \"npm install && npm run compile && npm run deploy:localhost\"",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name ai-agent-network",
      {
        "name": "name ai-agent-network",
        "dockerFile": "FinishThisIdea/docker-compose.verification.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD password",
      {
        "name": "POSTGRES_PASSWORD password",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-minio",
      {
        "name": "container_name finishthisidea-minio",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-ollama",
      {
        "name": "container_name finishthisidea-ollama",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "start_period 30s",
      {
        "name": "start_period 30s",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"curl -f http://localhost:3000/api/health || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"curl -f http://localhost:3000/api/health || exit 1\"]",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command -config.file=/etc/loki/loki-config.yml",
      {
        "name": "command -config.file=/etc/loki/loki-config.yml",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:3100/ready\"]",
      {
        "name": "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:3100/ready\"]",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command -config.file=/etc/promtail/promtail-config.yml",
      {
        "name": "command -config.file=/etc/promtail/promtail-config.yml",
        "dockerFile": "FinishThisIdea/docker-compose.yml.backup.20250721-074700",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name finishthisidea-network",
      {
        "name": "name finishthisidea-network",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile src/services/ai-api/Dockerfile",
      {
        "name": "dockerfile src/services/ai-api/Dockerfile",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.ai-api.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-ai-api",
      {
        "name": "container_name finishthisidea-ai-api",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-postgres",
      {
        "name": "container_name finishthisidea-postgres",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}",
      {
        "name": "command redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile src/monitoring/Dockerfile",
      {
        "name": "dockerfile src/monitoring/Dockerfile",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.ai-api.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-analytics",
      {
        "name": "container_name finishthisidea-analytics",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "elasticsearch",
      {
        "name": "elasticsearch",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/elasticsearch/elasticsearch:8.11.0",
      {
        "name": "image docker.elastic.co/elasticsearch/elasticsearch:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-elasticsearch",
      {
        "name": "container_name finishthisidea-elasticsearch",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"curl -f http://localhost:9200/_cluster/health || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"curl -f http://localhost:9200/_cluster/health || exit 1\"]",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "logstash",
      {
        "name": "logstash",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/logstash/logstash:8.11.0",
      {
        "name": "image docker.elastic.co/logstash/logstash:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-logstash",
      {
        "name": "container_name finishthisidea-logstash",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "kibana",
      {
        "name": "kibana",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/kibana/kibana:8.11.0",
      {
        "name": "image docker.elastic.co/kibana/kibana:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-kibana",
      {
        "name": "container_name finishthisidea-kibana",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"curl -f http://localhost:5601/api/status || exit 1\"]",
      {
        "name": "test [\"CMD-SHELL\", \"curl -f http://localhost:5601/api/status || exit 1\"]",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "filebeat",
      {
        "name": "filebeat",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/beats/filebeat:8.11.0",
      {
        "name": "image docker.elastic.co/beats/filebeat:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-filebeat",
      {
        "name": "container_name finishthisidea-filebeat",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "user root",
      {
        "name": "user root",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command filebeat -e -strict.perms=false",
      {
        "name": "command filebeat -e -strict.perms=false",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/apm/apm-server:8.11.0",
      {
        "name": "image docker.elastic.co/apm/apm-server:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-apm",
      {
        "name": "container_name finishthisidea-apm",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "metricbeat",
      {
        "name": "metricbeat",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image docker.elastic.co/beats/metricbeat:8.11.0",
      {
        "name": "image docker.elastic.co/beats/metricbeat:8.11.0",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-metricbeat",
      {
        "name": "container_name finishthisidea-metricbeat",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command metricbeat -e -system.hostfs=/hostfs -strict.perms=false",
      {
        "name": "command metricbeat -e -system.hostfs=/hostfs -strict.perms=false",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.elk.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.ai-api",
      {
        "name": "dockerfile Dockerfile.ai-api",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3002/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3002/health\"]",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-nginx",
      {
        "name": "container_name finishthisidea-nginx",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]",
      {
        "name": "test [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]",
        "dockerFile": "FinishThisIdea-Complete/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB finishthisidea_phase2",
      {
        "name": "POSTGRES_DB finishthisidea_phase2",
        "dockerFile": "FinishThisIdea-Phase2/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MINIO_ROOT_PASSWORD minioadmin",
      {
        "name": "MINIO_ROOT_PASSWORD minioadmin",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD localpassword123  # Change this in production!",
      {
        "name": "POSTGRES_PASSWORD localpassword123  # Change this in production!",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"pg_isready -U finishthisidea\"]",
      {
        "name": "test [\"CMD-SHELL\", \"pg_isready -U finishthisidea\"]",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OLLAMA_KEEP_ALIVE 24h",
      {
        "name": "OLLAMA_KEEP_ALIVE 24h",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "devices",
      {
        "name": "devices",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "count all",
      {
        "name": "count all",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "capabilities [gpu]",
      {
        "name": "capabilities [gpu]",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "entrypoint >",
      {
        "name": "entrypoint >",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image deadly0/bull-board:latest",
      {
        "name": "image deadly0/bull-board:latest",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-bull-board",
      {
        "name": "container_name finishthisidea-bull-board",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_HOST redis",
      {
        "name": "REDIS_HOST redis",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_PORT 6379",
      {
        "name": "REDIS_PORT 6379",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_PASSWORD \"\"",
      {
        "name": "REDIS_PASSWORD \"\"",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./src/mvp-cleanup-service/backend",
      {
        "name": "context ./src/mvp-cleanup-service/backend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.dev",
      {
        "name": "dockerfile Dockerfile.dev",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-backend",
      {
        "name": "container_name finishthisidea-backend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_URL postgresql://finishthisidea:password@postgres:5432/finishthisidea",
      {
        "name": "DATABASE_URL postgresql://finishthisidea:password@postgres:5432/finishthisidea",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OLLAMA_URL http://ollama:11434",
      {
        "name": "OLLAMA_URL http://ollama:11434",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command npm run dev",
      {
        "name": "command npm run dev",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./src/mvp-cleanup-service/frontend",
      {
        "name": "context ./src/mvp-cleanup-service/frontend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-frontend",
      {
        "name": "container_name finishthisidea-frontend",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ${STRIPE_PUBLISHABLE_KEY}",
      {
        "name": "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ${STRIPE_PUBLISHABLE_KEY}",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "mailhog",
      {
        "name": "mailhog",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "image mailhog/mailhog:latest",
      {
        "name": "image mailhog/mailhog:latest",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-mailhog",
      {
        "name": "container_name finishthisidea-mailhog",
        "dockerFile": "finishthisidea-worktrees/feature-mvp-implementation/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "api",
      {
        "name": "api",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-api-prod",
      {
        "name": "container_name finishthisidea-api-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "env_file",
      {
        "name": "env_file",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_URL ${DATABASE_URL}",
      {
        "name": "DATABASE_URL ${DATABASE_URL}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_URL ${REDIS_URL}",
      {
        "name": "REDIS_URL ${REDIS_URL}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "JWT_SECRET ${JWT_SECRET}",
      {
        "name": "JWT_SECRET ${JWT_SECRET}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "CSRF_SECRET ${CSRF_SECRET}",
      {
        "name": "CSRF_SECRET ${CSRF_SECRET}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID}",
      {
        "name": "AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY}",
      {
        "name": "AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_REGION ${AWS_REGION}",
      {
        "name": "AWS_REGION ${AWS_REGION}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "S3_BUCKET ${S3_BUCKET}",
      {
        "name": "S3_BUCKET ${S3_BUCKET}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY}",
      {
        "name": "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET}",
      {
        "name": "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY}",
      {
        "name": "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OLLAMA_BASE_URL ${OLLAMA_BASE_URL:-http://ollama:11434}",
      {
        "name": "OLLAMA_BASE_URL ${OLLAMA_BASE_URL:-http://ollama:11434}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SLACK_BOT_TOKEN ${SLACK_BOT_TOKEN}",
      {
        "name": "SLACK_BOT_TOKEN ${SLACK_BOT_TOKEN}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DISCORD_WEBHOOK_URL ${DISCORD_WEBHOOK_URL}",
      {
        "name": "DISCORD_WEBHOOK_URL ${DISCORD_WEBHOOK_URL}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "TEAMS_WEBHOOK_URL ${TEAMS_WEBHOOK_URL}",
      {
        "name": "TEAMS_WEBHOOK_URL ${TEAMS_WEBHOOK_URL}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "SENTRY_DSN ${SENTRY_DSN}",
      {
        "name": "SENTRY_DSN ${SENTRY_DSN}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OTEL_EXPORTER_OTLP_ENDPOINT ${OTEL_EXPORTER_OTLP_ENDPOINT}",
      {
        "name": "OTEL_EXPORTER_OTLP_ENDPOINT ${OTEL_EXPORTER_OTLP_ENDPOINT}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "OTEL_API_KEY ${OTEL_API_KEY}",
      {
        "name": "OTEL_API_KEY ${OTEL_API_KEY}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ENABLE_TELEMETRY ${ENABLE_TELEMETRY:-true}",
      {
        "name": "ENABLE_TELEMETRY ${ENABLE_TELEMETRY:-true}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "ENABLE_SECURITY_HEADERS ${ENABLE_SECURITY_HEADERS:-true}",
      {
        "name": "ENABLE_SECURITY_HEADERS ${ENABLE_SECURITY_HEADERS:-true}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "worker",
      {
        "name": "worker",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-worker-prod",
      {
        "name": "container_name finishthisidea-worker-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "command [\"node\", \"dist/worker.js\"]",
      {
        "name": "command [\"node\", \"dist/worker.js\"]",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "replicas 2",
      {
        "name": "replicas 2",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-db-prod",
      {
        "name": "container_name finishthisidea-db-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB ${POSTGRES_DB:-finishthisidea}",
      {
        "name": "POSTGRES_DB ${POSTGRES_DB:-finishthisidea}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER ${POSTGRES_USER:-postgres}",
      {
        "name": "POSTGRES_USER ${POSTGRES_USER:-postgres}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD ${POSTGRES_PASSWORD}",
      {
        "name": "POSTGRES_PASSWORD ${POSTGRES_PASSWORD}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-postgres}\"]",
      {
        "name": "test [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-postgres}\"]",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-redis-prod",
      {
        "name": "container_name finishthisidea-redis-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "REDIS_PASSWORD ${REDIS_PASSWORD}",
      {
        "name": "REDIS_PASSWORD ${REDIS_PASSWORD}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD\", \"redis-cli\", \"--pass\", \"${REDIS_PASSWORD}\", \"ping\"]",
      {
        "name": "test [\"CMD\", \"redis-cli\", \"--pass\", \"${REDIS_PASSWORD}\", \"ping\"]",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-nginx-prod",
      {
        "name": "container_name finishthisidea-nginx-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-prometheus-prod",
      {
        "name": "container_name finishthisidea-prometheus-prod",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "postgres_prod_data",
      {
        "name": "postgres_prod_data",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "redis_prod_data",
      {
        "name": "redis_prod_data",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "name finishthisidea-prod-network",
      {
        "name": "name finishthisidea-prod-network",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.prod.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-api",
      {
        "name": "container_name finishthisidea-api",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "DATABASE_URL postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/finishthisidea",
      {
        "name": "DATABASE_URL postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/finishthisidea",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_ACCESS_KEY_ID ${MINIO_ROOT_USER:-minioadmin}",
      {
        "name": "AWS_ACCESS_KEY_ID ${MINIO_ROOT_USER:-minioadmin}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "AWS_SECRET_ACCESS_KEY ${MINIO_ROOT_PASSWORD:-minioadmin123}",
      {
        "name": "AWS_SECRET_ACCESS_KEY ${MINIO_ROOT_PASSWORD:-minioadmin123}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "S3_BUCKET finishthisidea-uploads",
      {
        "name": "S3_BUCKET finishthisidea-uploads",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name finishthisidea-worker",
      {
        "name": "container_name finishthisidea-worker",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-password}",
      {
        "name": "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-password}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MINIO_ROOT_USER ${MINIO_ROOT_USER:-minioadmin}",
      {
        "name": "MINIO_ROOT_USER ${MINIO_ROOT_USER:-minioadmin}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "MINIO_ROOT_PASSWORD ${MINIO_ROOT_PASSWORD:-minioadmin123}",
      {
        "name": "MINIO_ROOT_PASSWORD ${MINIO_ROOT_PASSWORD:-minioadmin123}",
        "dockerFile": "backups/finishthisidea-20250628-192742/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-trust-system",
      {
        "name": "container_name ai-trust-system",
        "dockerFile": "ai-trust-deployment/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name ai-trust-nginx",
      {
        "name": "container_name ai-trust-nginx",
        "dockerFile": "ai-trust-deployment/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "interval 60s",
      {
        "name": "interval 60s",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "timeout 30s",
      {
        "name": "timeout 30s",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-ai-service",
      {
        "name": "container_name document-generator-ai-service",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./services/analytics",
      {
        "name": "context ./services/analytics",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "dockerfile Dockerfile.debug",
      {
        "name": "dockerfile Dockerfile.debug",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-debug-dashboard",
      {
        "name": "container_name document-generator-debug-dashboard",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "condition service_started",
      {
        "name": "condition service_started",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "websocket",
      {
        "name": "websocket",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./services/websocket",
      {
        "name": "context ./services/websocket",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-websocket",
      {
        "name": "container_name document-generator-websocket",
        "dockerFile": "docker-compose-updated.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "context ./services/api-server",
      {
        "name": "context ./services/api-server",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_USER docgen",
      {
        "name": "POSTGRES_USER docgen",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_PASSWORD ${DB_PASSWORD}",
      {
        "name": "POSTGRES_PASSWORD ${DB_PASSWORD}",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "test [\"CMD-SHELL\", \"pg_isready -U docgen\"]",
      {
        "name": "test [\"CMD-SHELL\", \"pg_isready -U docgen\"]",
        "dockerFile": "docker-compose.production.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "build ./flask-backend",
      {
        "name": "build ./flask-backend",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "container_name document-generator-flask",
      {
        "name": "container_name document-generator-flask",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "user_uploads",
      {
        "name": "user_uploads",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "user_processing",
      {
        "name": "user_processing",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "user_outputs",
      {
        "name": "user_outputs",
        "dockerFile": "docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "POSTGRES_DB idealauncher",
      {
        "name": "POSTGRES_DB idealauncher",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ],
    [
      "idealauncher",
      {
        "name": "idealauncher",
        "dockerFile": "services/template-processor/mcp/docker-compose.yml",
        "ports": [],
        "status": "connected",
        "connected": true
      }
    ]
  ],
  "connections": [
    "version '3.8'",
    "services",
    "postgres",
    "image postgres:16-alpine",
    "container_name document-generator-postgres",
    "environment",
    "POSTGRES_USER postgres",
    "POSTGRES_PASSWORD postgres",
    "POSTGRES_DB document_generator",
    "ports",
    "volumes",
    "healthcheck",
    "test [\"CMD-SHELL\", \"pg_isready -U postgres\"]",
    "interval 10s",
    "timeout 5s",
    "retries 5",
    "networks",
    "redis",
    "image redis:7-alpine",
    "container_name document-generator-redis",
    "command redis-server --appendonly yes",
    "test [\"CMD\", \"redis-cli\", \"ping\"]",
    "minio",
    "image minio/minio:latest",
    "container_name document-generator-minio",
    "command server /data --console-address \":9001\"",
    "MINIO_ROOT_USER minioadmin",
    "MINIO_ROOT_PASSWORD minioadmin123",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]",
    "interval 30s",
    "timeout 20s",
    "retries 3",
    "ollama",
    "image ollama/ollama:latest",
    "container_name document-generator-ollama",
    "OLLAMA_HOST 0.0.0.0",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:11434/api/tags\"]",
    "timeout 10s",
    "deploy",
    "resources",
    "limits",
    "memory 8G",
    "reservations",
    "memory 4G",
    "build",
    "context ./mcp",
    "dockerfile Dockerfile",
    "container_name document-generator-template-processor",
    "NODE_ENV production",
    "PORT 3000",
    "WS_PORT 8081",
    "DATABASE_URL postgresql://postgres:postgres@postgres:5432/document_generator",
    "REDIS_URL redis://redis:6379",
    "OLLAMA_BASE_URL http://ollama:11434",
    "OPENAI_API_KEY ${OPENAI_API_KEY:-}",
    "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY:-}",
    "DEMO_MODE ${DEMO_MODE:-true}",
    "depends_on",
    "condition service_healthy",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]",
    "context ./FinishThisIdea",
    "container_name document-generator-ai-api",
    "PORT 3001",
    "S3_ENDPOINT http://minio:9000",
    "AWS_ACCESS_KEY_ID minioadmin",
    "AWS_SECRET_ACCESS_KEY minioadmin123",
    "S3_BUCKET document-generator-uploads",
    "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY:-}",
    "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET:-}",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3001/health\"]",
    "context ./FinishThisIdea-Complete",
    "container_name document-generator-platform-hub",
    "PORT 8080",
    "API_GATEWAY_URL http://template-processor:3000",
    "AI_API_URL http://ai-api:3001",
    "WS_URL ws://template-processor:8081",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]",
    "context ./services/sovereign-agents",
    "container_name document-generator-sovereign-agents",
    "PORT 8085",
    "DATABASE_PATH /app/data/sovereign-agents.db",
    "DATA_DIR /app/data",
    "LOG_LEVEL info",
    "test [\"CMD\", \"node\", \"health-check.js\"]",
    "analytics",
    "dockerfile Dockerfile.analytics",
    "container_name document-generator-analytics",
    "PORT 3002",
    "SOVEREIGN_AGENTS_URL http://sovereign-agents:8085",
    "prometheus",
    "image prom/prometheus:latest",
    "container_name document-generator-prometheus",
    "command",
    "grafana",
    "image grafana/grafana:latest",
    "container_name document-generator-grafana",
    "GF_SECURITY_ADMIN_USER admin",
    "GF_SECURITY_ADMIN_PASSWORD admin",
    "GF_USERS_ALLOW_SIGN_UP false",
    "nginx",
    "image nginx:alpine",
    "container_name document-generator-nginx",
    "profiles",
    "driver bridge",
    "postgres_data",
    "redis_data",
    "minio_data",
    "ollama_data",
    "prometheus_data",
    "grafana_data",
    "sovereign_data",
    "sovereign_logs",
    "image postgres:15-alpine",
    "POSTGRES_USER hwvb_user",
    "POSTGRES_PASSWORD hwvb_pass",
    "POSTGRES_DB howwasthevibe",
    "backend",
    "context ./backend",
    "NODE_ENV development",
    "DATABASE_URL postgresql://hwvb_user:hwvb_pass@postgres:5432/howwasthevibe",
    "JWT_SECRET your-jwt-secret-here",
    "frontend",
    "context ./frontend",
    "NEXT_PUBLIC_API_URL http://localhost:3001",
    "NEXT_PUBLIC_WS_URL ws://localhost:3001",
    "build .",
    "restart unless-stopped",
    "db",
    "image postgres:15",
    "container_name finishthisidea-mcp",
    "MCP_PORT 9050",
    "SERVICE_NAME mcp-unified-server",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9050/health\"]",
    "command node mcp-unified-server.js",
    "container_name finishthisidea-auth",
    "SERVICE_PORT 9024",
    "SERVICE_NAME auth-verification",
    "command node 100-percent-verification.js",
    "container_name finishthisidea-calos",
    "SERVICE_PORT 9027",
    "SERVICE_NAME calos-system",
    "command node calos-next-level.js",
    "container_name finishthisidea-physical",
    "SERVICE_PORT 9031",
    "SERVICE_NAME physical-verification",
    "command node physical-verification-system.js",
    "container_name finishthisidea-rpc",
    "SERVICE_PORT 9040",
    "SERVICE_NAME camelcase-rpc",
    "command node camelcase-api-rpc-interface.js",
    "container_name finishthisidea-redis",
    "container_name finishthisidea-db",
    "POSTGRES_DB finishthisidea",
    "POSTGRES_USER finishthisidea",
    "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-supersecure}",
    "container_name finishthisidea-proxy",
    "context .",
    "image vessel-command:latest",
    "container_name vessel-command-center",
    "container_name vessel-registry",
    "image spawn-portal:latest",
    "container_name spawn-portal",
    "dockerfile Dockerfile.vessel",
    "target scout-pod",
    "container_name vessel-scout-alpha",
    "cpus '0.5'",
    "memory 256M",
    "target battle-cruiser",
    "container_name vessel-battleship-omega",
    "cpus '2'",
    "memory 1G",
    "target mothership",
    "container_name vessel-mothership-nexus",
    "cpus '4'",
    "container_name vessel-monitor",
    "container_name vessel-dashboard",
    "ipam",
    "config",
    "gateway 172.20.0.1",
    "dockerfile Dockerfile.blockchain",
    "container_name blockchain-verifier",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/api/status\"]",
    "container_name blockchain-postgres",
    "POSTGRES_DB blockchain_verification",
    "POSTGRES_USER blockchain",
    "POSTGRES_PASSWORD secure_blockchain_pass",
    "container_name blockchain-redis",
    "container_name blockchain-nginx",
    "container_name blockchain-prometheus",
    "container_name blockchain-grafana",
    "loki",
    "image grafana/loki:latest",
    "container_name finishthisidea-loki",
    "command -config.file=/etc/loki/local-config.yaml",
    "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1\"]",
    "promtail",
    "image grafana/promtail:latest",
    "container_name finishthisidea-promtail",
    "command -config.file=/etc/promtail/config.yml",
    "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:9080/ready || exit 1\"]",
    "app",
    "image finishthisidea:latest",
    "container_name finishthisidea-app-logging",
    "logging",
    "driver \"json-file\"",
    "options",
    "labels \"service=finishthisidea\"",
    "container_name finishthisidea-log-exporter",
    "loki_data",
    "driver local",
    "monitoring",
    "external true",
    "name finishthisidea-monitoring",
    "dockerfile Dockerfile.memory-safe",
    "container_name memory-safe-unified-mvp",
    "memory 2G",
    "start_period 40s",
    "labels",
    "container_name memory-monitor-sidecar",
    "command [\"node\", \"memory-monitor.js\", \"--interval=5000\", \"--warning=2048\", \"--critical=3072\"]",
    "container_name memory-safe-redis",
    "memory 512M",
    "default",
    "name memory-safe-network",
    "container_name finishthisidea-prometheus",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9090/\"]",
    "container_name finishthisidea-grafana",
    "test [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1\"]",
    "alertmanager",
    "image prom/alertmanager:latest",
    "container_name finishthisidea-alertmanager",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9093/\"]",
    "image prom/node-exporter:latest",
    "container_name finishthisidea-node-exporter",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9100/\"]",
    "image oliver006/redis_exporter:latest",
    "container_name finishthisidea-redis-exporter",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9121/\"]",
    "image prometheuscommunity/postgres-exporter:latest",
    "container_name finishthisidea-postgres-exporter",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:9187/\"]",
    "container_name finishthisidea-app",
    "alertmanager_data",
    "dockerfile Dockerfile.processor",
    "dockerfile Dockerfile.rust",
    "dockerfile Dockerfile.solidity",
    "dockerfile Dockerfile.python",
    "dockerfile Dockerfile.registry",
    "dockerfile Dockerfile.menu",
    "dockerfile Dockerfile.arena",
    "dockerfile Dockerfile.spawn",
    "dockerfile Dockerfile.citadel",
    "dockerfile Dockerfile.omniscient",
    "image python:3.11-slim",
    "container_name ai-agent-unified-display",
    "working_dir /app",
    "command sh -c \"pip install flask requests && python unified-verification-display-system.py\"",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:9999/api/verification/status\"]",
    "container_name ai-agent-collar-system",
    "command sh -c \"pip install flask requests && python -c 'from verification_collar_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/verify\\\"); def verify(): collar_system = VerificationCollarSystem(); return collar_system.get_verification_status(); app.run(host=\\\"0.0.0.0\\\", port=9998)'\"",
    "container_name ai-agent-triple-reasoning",
    "command sh -c \"pip install flask requests aiohttp && python -c 'from triple_reasoning_router_system import *; import flask; app = flask.Flask(__name__); @app.route(\\\"/status\\\"); def status(): router = TripleReasoningRouter(); return router.get_system_status(); app.run(host=\\\"0.0.0.0\\\", port=9997)'\"",
    "hardhat",
    "image node:18-alpine",
    "container_name ai-agent-hardhat",
    "command sh -c \"npm install && npx hardhat node --hostname 0.0.0.0\"",
    "test [\"CMD\", \"wget\", \"-q\", \"--spider\", \"http://localhost:8545\"]",
    "dockerfile Dockerfile.rust-unified",
    "container_name ai-agent-rust-wrapper",
    "container_name ai-agent-ecosystem-master",
    "command sh -c \"pip install flask requests && python ecosystem-master-platform.py\"",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/api/status\"]",
    "container_name ai-agent-vanity",
    "command sh -c \"pip install flask requests && python agent-vanity-customization-system.py\"",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:7777\"]",
    "container_name ai-agent-trading",
    "command sh -c \"pip install flask requests && python agent-trading-marketplace.py\"",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:6666/api/analytics\"]",
    "container_name ai-agent-breeding",
    "command sh -c \"pip install flask requests && python agent-breeding-evolution-system.py\"",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:5555\"]",
    "container_name ai-agent-deployer",
    "command sh -c \"sleep 10 && npm install && npm run compile && npm run deploy:localhost\"",
    "container_name ai-agent-json-api",
    "command sh -c \"pip install flask requests && python -c 'import flask, requests, json; app = flask.Flask(__name__); @app.route(\\\"/complete-verification\\\"); def verify(): return json.dumps({\\\"collar_system\\\": requests.get(\\\"http://verification-collar:9998/verify\\\").json(), \\\"reasoning_system\\\": requests.get(\\\"http://triple-reasoning:9997/status\\\").json(), \\\"rust_wrapper\\\": requests.get(\\\"http://rust-wrapper:8080/health\\\").json(), \\\"services\\\": {\\\"ecosystem\\\": requests.get(\\\"http://ecosystem-master:8888/api/status\\\").json(), \\\"vanity\\\": \\\"running\\\", \\\"trading\\\": \\\"running\\\", \\\"breeding\\\": \\\"running\\\"}}); app.run(host=\\\"0.0.0.0\\\", port=9996)'\"",
    "name ai-agent-unified-network",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:8545\"]",
    "dockerfile Dockerfile.rust-new",
    "command sh -c \"pip install flask requests sqlite3 && python agent-trading-marketplace.py\"",
    "command sh -c \"pip install flask requests sqlite3 && python agent-breeding-evolution-system.py\"",
    "command sh -c \"npm install && npm run compile && npm run deploy:localhost\"",
    "name ai-agent-network",
    "POSTGRES_PASSWORD password",
    "container_name finishthisidea-minio",
    "container_name finishthisidea-ollama",
    "start_period 30s",
    "test [\"CMD-SHELL\", \"curl -f http://localhost:3000/api/health || exit 1\"]",
    "command -config.file=/etc/loki/loki-config.yml",
    "test [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:3100/ready\"]",
    "command -config.file=/etc/promtail/promtail-config.yml",
    "name finishthisidea-network",
    "dockerfile src/services/ai-api/Dockerfile",
    "container_name finishthisidea-ai-api",
    "container_name finishthisidea-postgres",
    "command redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}",
    "dockerfile src/monitoring/Dockerfile",
    "container_name finishthisidea-analytics",
    "elasticsearch",
    "image docker.elastic.co/elasticsearch/elasticsearch:8.11.0",
    "container_name finishthisidea-elasticsearch",
    "test [\"CMD-SHELL\", \"curl -f http://localhost:9200/_cluster/health || exit 1\"]",
    "logstash",
    "image docker.elastic.co/logstash/logstash:8.11.0",
    "container_name finishthisidea-logstash",
    "kibana",
    "image docker.elastic.co/kibana/kibana:8.11.0",
    "container_name finishthisidea-kibana",
    "test [\"CMD-SHELL\", \"curl -f http://localhost:5601/api/status || exit 1\"]",
    "filebeat",
    "image docker.elastic.co/beats/filebeat:8.11.0",
    "container_name finishthisidea-filebeat",
    "user root",
    "command filebeat -e -strict.perms=false",
    "image docker.elastic.co/apm/apm-server:8.11.0",
    "container_name finishthisidea-apm",
    "metricbeat",
    "image docker.elastic.co/beats/metricbeat:8.11.0",
    "container_name finishthisidea-metricbeat",
    "command metricbeat -e -system.hostfs=/hostfs -strict.perms=false",
    "dockerfile Dockerfile.ai-api",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost:3002/health\"]",
    "container_name finishthisidea-nginx",
    "test [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]",
    "POSTGRES_DB finishthisidea_phase2",
    "MINIO_ROOT_PASSWORD minioadmin",
    "POSTGRES_PASSWORD localpassword123  # Change this in production!",
    "test [\"CMD-SHELL\", \"pg_isready -U finishthisidea\"]",
    "OLLAMA_KEEP_ALIVE 24h",
    "devices",
    "count all",
    "capabilities [gpu]",
    "entrypoint >",
    "image deadly0/bull-board:latest",
    "container_name finishthisidea-bull-board",
    "REDIS_HOST redis",
    "REDIS_PORT 6379",
    "REDIS_PASSWORD \"\"",
    "context ./src/mvp-cleanup-service/backend",
    "dockerfile Dockerfile.dev",
    "container_name finishthisidea-backend",
    "DATABASE_URL postgresql://finishthisidea:password@postgres:5432/finishthisidea",
    "OLLAMA_URL http://ollama:11434",
    "command npm run dev",
    "context ./src/mvp-cleanup-service/frontend",
    "container_name finishthisidea-frontend",
    "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY ${STRIPE_PUBLISHABLE_KEY}",
    "mailhog",
    "image mailhog/mailhog:latest",
    "container_name finishthisidea-mailhog",
    "api",
    "container_name finishthisidea-api-prod",
    "env_file",
    "DATABASE_URL ${DATABASE_URL}",
    "REDIS_URL ${REDIS_URL}",
    "JWT_SECRET ${JWT_SECRET}",
    "CSRF_SECRET ${CSRF_SECRET}",
    "AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID}",
    "AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY}",
    "AWS_REGION ${AWS_REGION}",
    "S3_BUCKET ${S3_BUCKET}",
    "STRIPE_SECRET_KEY ${STRIPE_SECRET_KEY}",
    "STRIPE_WEBHOOK_SECRET ${STRIPE_WEBHOOK_SECRET}",
    "ANTHROPIC_API_KEY ${ANTHROPIC_API_KEY}",
    "OLLAMA_BASE_URL ${OLLAMA_BASE_URL:-http://ollama:11434}",
    "SLACK_BOT_TOKEN ${SLACK_BOT_TOKEN}",
    "DISCORD_WEBHOOK_URL ${DISCORD_WEBHOOK_URL}",
    "TEAMS_WEBHOOK_URL ${TEAMS_WEBHOOK_URL}",
    "SENTRY_DSN ${SENTRY_DSN}",
    "OTEL_EXPORTER_OTLP_ENDPOINT ${OTEL_EXPORTER_OTLP_ENDPOINT}",
    "OTEL_API_KEY ${OTEL_API_KEY}",
    "ENABLE_TELEMETRY ${ENABLE_TELEMETRY:-true}",
    "ENABLE_SECURITY_HEADERS ${ENABLE_SECURITY_HEADERS:-true}",
    "worker",
    "container_name finishthisidea-worker-prod",
    "command [\"node\", \"dist/worker.js\"]",
    "replicas 2",
    "container_name finishthisidea-db-prod",
    "POSTGRES_DB ${POSTGRES_DB:-finishthisidea}",
    "POSTGRES_USER ${POSTGRES_USER:-postgres}",
    "POSTGRES_PASSWORD ${POSTGRES_PASSWORD}",
    "test [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-postgres}\"]",
    "container_name finishthisidea-redis-prod",
    "REDIS_PASSWORD ${REDIS_PASSWORD}",
    "test [\"CMD\", \"redis-cli\", \"--pass\", \"${REDIS_PASSWORD}\", \"ping\"]",
    "container_name finishthisidea-nginx-prod",
    "container_name finishthisidea-prometheus-prod",
    "postgres_prod_data",
    "redis_prod_data",
    "name finishthisidea-prod-network",
    "container_name finishthisidea-api",
    "DATABASE_URL postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/finishthisidea",
    "AWS_ACCESS_KEY_ID ${MINIO_ROOT_USER:-minioadmin}",
    "AWS_SECRET_ACCESS_KEY ${MINIO_ROOT_PASSWORD:-minioadmin123}",
    "S3_BUCKET finishthisidea-uploads",
    "container_name finishthisidea-worker",
    "POSTGRES_PASSWORD ${POSTGRES_PASSWORD:-password}",
    "MINIO_ROOT_USER ${MINIO_ROOT_USER:-minioadmin}",
    "MINIO_ROOT_PASSWORD ${MINIO_ROOT_PASSWORD:-minioadmin123}",
    "container_name ai-trust-system",
    "container_name ai-trust-nginx",
    "interval 60s",
    "timeout 30s",
    "container_name document-generator-ai-service",
    "context ./services/analytics",
    "dockerfile Dockerfile.debug",
    "container_name document-generator-debug-dashboard",
    "condition service_started",
    "websocket",
    "context ./services/websocket",
    "container_name document-generator-websocket",
    "context ./services/api-server",
    "POSTGRES_USER docgen",
    "POSTGRES_PASSWORD ${DB_PASSWORD}",
    "test [\"CMD-SHELL\", \"pg_isready -U docgen\"]",
    "build ./flask-backend",
    "container_name document-generator-flask",
    "user_uploads",
    "user_processing",
    "user_outputs",
    "POSTGRES_DB idealauncher",
    "idealauncher"
  ],
  "data": {
    "mobile-app-cache.json": {
      "wallet": {
        "connected": true,
        "address": "0xd5dc6c1eecbc3f33c195c9733ff4c7242f3fd956",
        "balance": 0,
        "privateKey": "2d7d1cc22f30ea66f3c9a9d14373ce3740ddd8ff567112325ff2869c8dc25f1a19952a867f2c31f4d59f52a981601cdce6d02a2004a50c2d01f639f7e203ae85efbfa2b6dfeab1960e55ec8872f79d61",
        "transactions": [],
        "created": 1753273450118,
        "trackedWallets": [
          {
            "address": "0x742d35Cc6634C053",
            "nickname": "Scammed Wallet",
            "type": "monitoring",
            "added": 1753275285870
          }
        ]
      },
      "gameState": {
        "player": {
          "id": "player_001",
          "level": 45,
          "strength": 85,
          "dexterity": 76,
          "vitality": 92,
          "energy": 45,
          "experience": 127500,
          "gold": 25670
        },
        "inventory": {
          "grid": [
            [
              "item_1753275280855_rj0xj4",
              "item_1753275280855_tgut0r",
              "item_1753275280855_u3ry6l",
              "item_1753275280855_yozozd"
            ],
            [
              "item_1753275280855_fic42",
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null
            ]
          ],
          "items": {},
          "equipped": {
            "weapon": null,
            "armor": null,
            "helmet": null,
            "gloves": null,
            "boots": null,
            "rings": [
              null,
              null
            ],
            "amulet": null
          }
        },
        "stash": {
          "tabs": [
            "Personal",
            "Shared",
            "Horadric"
          ],
          "current": "Personal",
          "items": {}
        }
      },
      "forumData": [
        {
          "id": "general",
          "name": "General Discussion",
          "description": "General game discussion and community chat",
          "icon": "💬",
          "posts": [
            "post_1753275268833_r6wdi8"
          ],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 1
        },
        {
          "id": "trading",
          "name": "Trading Post",
          "description": "Buy, sell, and trade items with other players",
          "icon": "🏪",
          "posts": [
            "post_1753275268833_xkns7",
            "post_1753275298846_tt2emn"
          ],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 2
        },
        {
          "id": "guides",
          "name": "Guides & Strategies",
          "description": "Share guides, tips, and game strategies",
          "icon": "📚",
          "posts": [
            "post_1753275283843_twiij"
          ],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 1
        },
        {
          "id": "technical",
          "name": "Technical Discussion",
          "description": "Bot discussions, technical help, and development",
          "icon": "⚙️",
          "posts": [],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 0
        },
        {
          "id": "crypto",
          "name": "Crypto & RMT",
          "description": "Real money trading and cryptocurrency discussions",
          "icon": "💰",
          "posts": [
            "post_1753275268833_6nqrm"
          ],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 1
        },
        {
          "id": "scam-reports",
          "name": "Scam Reports",
          "description": "Report scammers and fraudulent activities",
          "icon": "⚠️",
          "posts": [],
          "subscribers": 0,
          "moderators": {},
          "created": 1753275268832,
          "postCount": 0
        }
      ]
    }
  },
  "state": {}
}