{
  "id": "typescript-strict",
  "name": "TypeScript Strict",
  "description": "Strict TypeScript with comprehensive type safety and modern patterns",
  "language": "typescript",
  "framework": "node",
  "version": "1.0.0",
  "style": {
    "indentation": "spaces",
    "indentSize": 2,
    "lineEnding": "lf",
    "quoteStyle": "single",
    "semicolons": true,
    "trailingComma": "all",
    "maxLineLength": 120,
    "bracketSpacing": true
  },
  "rules": {
    "naming": {
      "functions": "camelCase",
      "variables": "camelCase",
      "constants": "UPPER_SNAKE",
      "classes": "PascalCase",
      "files": "kebab-case"
    },
    "imports": {
      "orderBy": "grouped",
      "groups": ["type", "builtin", "external", "internal", "parent", "sibling", "index"],
      "removeUnused": true,
      "combineImports": true
    },
    "comments": {
      "style": "jsdoc",
      "removeAll": false,
      "preserveTodos": true
    },
    "whitespace": {
      "trimTrailing": true,
      "insertFinalNewline": true,
      "collapseMultipleEmptyLines": true
    }
  },
  "aiContext": {
    "systemPrompt": "You are a TypeScript expert focused on type safety, clean architecture, and modern best practices. Always prefer explicit types over inference where it improves clarity.",
    "priorities": [
      "Ensure all functions have explicit return types",
      "Use interface over type for object shapes",
      "Prefer const assertions and readonly modifiers",
      "Use proper error handling with custom error types",
      "Apply SOLID principles"
    ],
    "avoidPatterns": [
      "any type usage",
      "implicit any",
      "type assertions without validation",
      "missing return types",
      "var declarations"
    ],
    "preferredPatterns": [
      "unknown over any for uncertain types",
      "type guards for runtime validation",
      "const assertions for literal types",
      "generic constraints for flexibility",
      "discriminated unions for state management"
    ],
    "codeExamples": [
      {
        "description": "Function with explicit types",
        "before": "function calculate(a, b) {\n  return a + b;\n}",
        "after": "function calculate(a: number, b: number): number {\n  return a + b;\n}"
      },
      {
        "description": "Interface over type for objects",
        "before": "type User = {\n  id: number;\n  name: string;\n};",
        "after": "interface User {\n  readonly id: number;\n  name: string;\n}"
      },
      {
        "description": "Proper error handling",
        "before": "try {\n  doSomething();\n} catch (e) {\n  console.log(e);\n}",
        "after": "try {\n  doSomething();\n} catch (error) {\n  if (error instanceof Error) {\n    logger.error('Operation failed:', error);\n  }\n}"
      }
    ]
  },
  "isDefault": true
}