#!/usr/bin/env node

/**
 * GITHUB DESKTOP WRAPPER WITH CLEAN PUBLIC/PRIVATE SEPARATION
 * 
 * A complete GitHub Desktop replacement that integrates with the SoulFra ecosystem.
 * Provides clean separation between public (GitHub) and private (vault) files.
 * 
 * Features:
 * - Clean workspace operations (only public files go to GitHub)
 * - Private vault protection (sensitive files stay local)
 * - Automated file classification and routing
 * - Visual Git operations with real-time feedback
 * - Integration with agent orchestration
 * - Cross-device Git approvals (mobile can approve desktop operations)
 * - Intelligent commit message generation
 * - Branch management with workspace isolation
 */

const express = require('express');
const { spawn, exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const WebSocket = require('ws');
const chokidar = require('chokidar');

class GitHubDesktopWrapper {
    constructor(options = {}) {
        this.app = express();
        this.port = options.port || 3337;
        this.wsPort = options.wsPort || 3338;
        
        // Workspace configuration
        this.workspaceRoot = options.workspaceRoot || process.cwd();
        this.cleanWorkspace = path.join(this.workspaceRoot, 'cleanup-workspace');
        this.privateVault = path.join(this.workspaceRoot, '.vault');
        this.tempWorkspace = path.join(this.workspaceRoot, '.temp-git-ops');
        
        // File classification patterns\n        this.privatePatterns = [\n            // Environment and config files\n            '*.env*', '.env*', 'config.json', 'secrets.json',\n            // Key and certificate files\n            '*.key', '*.pem', '*.p12', '*.pfx', '*.crt',\n            // Auth and token files\n            '*token*', '*secret*', '*password*', '*auth*',\n            // Vault and secure directories\n            '.vault/**', 'private/**', 'secure/**',\n            // Database and backup files\n            '*.db', '*.sqlite', '*.backup', 'dump.sql',\n            // Personal and user data\n            'user-data/**', 'personal/**', '.ssh/**',\n            // Logs with potentially sensitive info\n            '*.log', 'logs/**',\n            // Development and debug files\n            '.vscode/settings.json', '.idea/**',\n            // OS and system files\n            '.DS_Store', 'Thumbs.db', '*.tmp',\n            // Package and dependency caches\n            'node_modules/**', '.npm/**', '.yarn/**'\n        ];\n        \n        this.publicPatterns = [\n            // Source code\n            '*.js', '*.ts', '*.jsx', '*.tsx', '*.py', '*.java', '*.cpp', '*.c',\n            // Web files\n            '*.html', '*.css', '*.scss', '*.less',\n            // Documentation\n            '*.md', '*.txt', '*.rst', 'README*', 'CHANGELOG*', 'LICENSE*',\n            // Configuration templates\n            '*.example', '*.template', '*.sample',\n            // Package files\n            'package.json', 'requirements.txt', 'Cargo.toml', 'pom.xml',\n            // Build and deployment\n            'Dockerfile*', 'docker-compose*.yml', '*.yml', '*.yaml',\n            // Git files\n            '.gitignore', '.gitattributes'\n        ];\n        \n        // Git operations state\n        this.gitOperations = new Map(); // operationId -> operation details\n        this.pendingApprovals = new Map(); // operationId -> approval request\n        this.workspaceWatchers = new Map(); // workspace -> file watcher\n        this.gitStatus = new Map(); // workspace -> current status\n        \n        // WebSocket connections for real-time updates\n        this.wsConnections = new Map();\n        this.crossDeviceApprovals = new Map();\n        \n        // Agent integration\n        this.agentBridgeUrl = options.agentBridgeUrl || 'http://localhost:9999';\n        this.voiceOrchestratorUrl = options.voiceOrchestratorUrl || 'http://localhost:3336';\n        \n        console.log('📦 GitHub Desktop Wrapper initialized');\n        console.log(`   Clean workspace: ${this.cleanWorkspace}`);\n        console.log(`   Private vault: ${this.privateVault}`);\n        \n        this.initialize();\n    }\n    \n    async initialize() {\n        await this.setupDirectories();\n        await this.setupWebServer();\n        await this.setupWebSocketServer();\n        await this.setupFileWatchers();\n        await this.loadGitConfiguration();\n        \n        console.log('✅ GitHub Desktop Wrapper ready');\n    }\n    \n    async setupDirectories() {\n        // Ensure required directories exist\n        const directories = [this.cleanWorkspace, this.privateVault, this.tempWorkspace];\n        \n        for (const dir of directories) {\n            try {\n                await fs.access(dir);\n                console.log(`📁 Directory exists: ${path.basename(dir)}`);\n            } catch {\n                await fs.mkdir(dir, { recursive: true });\n                console.log(`📁 Created directory: ${path.basename(dir)}`);\n            }\n        }\n        \n        // Initialize git in clean workspace if needed\n        try {\n            await this.execGit('status', this.cleanWorkspace);\n            console.log('📁 Clean workspace is a git repository');\n        } catch {\n            console.log('📁 Initializing git in clean workspace...');\n            await this.execGit('init', this.cleanWorkspace);\n        }\n    }\n    \n    async setupWebServer() {\n        this.app.use(express.json({ limit: '50mb' }));\n        this.app.use(express.urlencoded({ extended: true, limit: '50mb' }));\n        \n        // CORS for cross-device access\n        this.app.use((req, res, next) => {\n            res.header('Access-Control-Allow-Origin', '*');\n            res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n            res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Device-ID, X-Session-ID');\n            next();\n        });\n        \n        // Main GitHub Desktop Interface\n        this.app.get('/', this.serveGitHubDesktop.bind(this));\n        this.app.get('/desktop', this.serveGitHubDesktop.bind(this));\n        \n        // Git Operations API\n        this.app.get('/api/git/status', this.getGitStatus.bind(this));\n        this.app.post('/api/git/classify-files', this.classifyFiles.bind(this));\n        this.app.post('/api/git/stage-clean', this.stageCleanFiles.bind(this));\n        this.app.post('/api/git/commit', this.commitChanges.bind(this));\n        this.app.post('/api/git/push', this.pushToGitHub.bind(this));\n        this.app.post('/api/git/pull', this.pullFromGitHub.bind(this));\n        this.app.post('/api/git/branch', this.manageBranches.bind(this));\n        \n        // File Management API\n        this.app.post('/api/files/move-to-vault', this.moveToVault.bind(this));\n        this.app.post('/api/files/restore-from-vault', this.restoreFromVault.bind(this));\n        this.app.get('/api/files/vault-contents', this.getVaultContents.bind(this));\n        this.app.get('/api/files/workspace-contents', this.getWorkspaceContents.bind(this));\n        \n        // Cross-device Approval API\n        this.app.post('/api/approval/request', this.requestApproval.bind(this));\n        this.app.post('/api/approval/respond', this.respondToApproval.bind(this));\n        this.app.get('/api/approval/pending', this.getPendingApprovals.bind(this));\n        \n        // Agent Integration API\n        this.app.post('/api/agents/generate-commit-message', this.generateCommitMessage.bind(this));\n        this.app.post('/api/agents/analyze-changes', this.analyzeChanges.bind(this));\n        \n        this.server = this.app.listen(this.port);\n        console.log(`🌐 GitHub Desktop Wrapper listening on port ${this.port}`);\n    }\n    \n    async setupWebSocketServer() {\n        this.wss = new WebSocket.Server({ port: this.wsPort });\n        \n        this.wss.on('connection', (ws, req) => {\n            const deviceId = req.headers['x-device-id'] || crypto.randomUUID();\n            const sessionId = req.headers['x-session-id'] || crypto.randomUUID();\n            const deviceType = req.headers['x-device-type'] || 'unknown';\n            \n            console.log(`📱 Git device connected: ${deviceType} (${deviceId})`);\n            \n            const connection = {\n                ws,\n                deviceId,\n                sessionId,\n                deviceType,\n                connectionId: crypto.randomUUID(),\n                connectedAt: new Date()\n            };\n            \n            this.wsConnections.set(connection.connectionId, connection);\n            \n            ws.on('message', (data) => {\n                this.handleWebSocketMessage(connection, data);\n            });\n            \n            ws.on('close', () => {\n                this.wsConnections.delete(connection.connectionId);\n                console.log(`📱 Git device disconnected: ${deviceType} (${deviceId})`);\n            });\n            \n            // Send initial git status\n            this.sendGitStatus(connection);\n        });\n        \n        console.log(`🔌 Git WebSocket server listening on port ${this.wsPort}`);\n    }\n    \n    async setupFileWatchers() {\n        // Watch the main workspace for file changes\n        const watcher = chokidar.watch(this.workspaceRoot, {\n            ignored: [\n                path.join(this.workspaceRoot, 'node_modules/**'),\n                path.join(this.workspaceRoot, '.git/**'),\n                path.join(this.workspaceRoot, '.vault/**')\n            ],\n            persistent: true\n        });\n        \n        watcher.on('change', (filePath) => {\n            this.handleFileChange(filePath);\n        });\n        \n        watcher.on('add', (filePath) => {\n            this.handleFileAdd(filePath);\n        });\n        \n        watcher.on('unlink', (filePath) => {\n            this.handleFileDelete(filePath);\n        });\n        \n        this.workspaceWatchers.set('main', watcher);\n        console.log('👀 File watchers active');\n    }\n    \n    async loadGitConfiguration() {\n        try {\n            // Load git config\n            const userName = await this.execGit('config user.name', this.cleanWorkspace);\n            const userEmail = await this.execGit('config user.email', this.cleanWorkspace);\n            \n            console.log(`👤 Git user: ${userName.trim()} <${userEmail.trim()}>`);\n            \n            // Check remote\n            try {\n                const remote = await this.execGit('remote get-url origin', this.cleanWorkspace);\n                console.log(`🔗 Remote origin: ${remote.trim()}`);\n            } catch {\n                console.log('🔗 No remote origin configured');\n            }\n            \n        } catch (error) {\n            console.warn('⚠️  Git configuration incomplete:', error.message);\n        }\n    }\n    \n    // Main GitHub Desktop Interface\n    async serveGitHubDesktop(req, res) {\n        const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SoulFra GitHub Desktop</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n            background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);\n            color: #e2e8f0;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .header {\n            background: rgba(255, 255, 255, 0.05);\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            padding: 1rem 2rem;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .header h1 {\n            font-size: 1.5rem;\n            font-weight: bold;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .status-bar {\n            display: flex;\n            gap: 1rem;\n            align-items: center;\n            font-size: 0.9rem;\n        }\n        \n        .status-indicator {\n            display: flex;\n            align-items: center;\n            gap: 0.3rem;\n        }\n        \n        .status-dot {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #10b981;\n        }\n        \n        .status-dot.warning { background: #f59e0b; }\n        .status-dot.error { background: #ef4444; }\n        \n        .main-content {\n            flex: 1;\n            display: grid;\n            grid-template-areas: \n                \"sidebar changes-panel\"\n                \"sidebar commit-panel\";\n            grid-template-columns: 300px 1fr;\n            grid-template-rows: 1fr 300px;\n            gap: 1px;\n            background: rgba(255, 255, 255, 0.05);\n        }\n        \n        .sidebar {\n            grid-area: sidebar;\n            background: rgba(0, 0, 0, 0.2);\n            padding: 1.5rem;\n            overflow-y: auto;\n        }\n        \n        .changes-panel {\n            grid-area: changes-panel;\n            background: rgba(0, 0, 0, 0.1);\n            padding: 1.5rem;\n            overflow-y: auto;\n        }\n        \n        .commit-panel {\n            grid-area: commit-panel;\n            background: rgba(0, 0, 0, 0.15);\n            padding: 1.5rem;\n            border-top: 1px solid rgba(255, 255, 255, 0.1);\n        }\n        \n        .panel-title {\n            font-size: 1.1rem;\n            font-weight: 600;\n            margin-bottom: 1rem;\n            color: #9ca3af;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            padding-bottom: 0.5rem;\n        }\n        \n        .repo-info {\n            background: rgba(255, 255, 255, 0.05);\n            border-radius: 8px;\n            padding: 1rem;\n            margin-bottom: 1.5rem;\n        }\n        \n        .repo-name {\n            font-weight: 600;\n            font-size: 1rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .branch-info {\n            font-size: 0.9rem;\n            color: #9ca3af;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .btn {\n            background: linear-gradient(45deg, #3b82f6, #1d4ed8);\n            color: white;\n            border: none;\n            padding: 0.8rem 1.5rem;\n            border-radius: 6px;\n            font-size: 0.9rem;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            width: 100%;\n            justify-content: center;\n            margin: 0.3rem 0;\n        }\n        \n        .btn:hover {\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);\n        }\n        \n        .btn.secondary {\n            background: linear-gradient(45deg, #6b7280, #4b5563);\n        }\n        \n        .btn.danger {\n            background: linear-gradient(45deg, #ef4444, #dc2626);\n        }\n        \n        .btn.success {\n            background: linear-gradient(45deg, #10b981, #059669);\n        }\n        \n        .file-list {\n            max-height: 400px;\n            overflow-y: auto;\n        }\n        \n        .file-item {\n            display: flex;\n            align-items: center;\n            gap: 0.8rem;\n            padding: 0.8rem;\n            border-radius: 6px;\n            margin-bottom: 0.3rem;\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }\n        \n        .file-item:hover {\n            background: rgba(255, 255, 255, 0.05);\n        }\n        \n        .file-item.selected {\n            background: rgba(59, 130, 246, 0.2);\n            border: 1px solid rgba(59, 130, 246, 0.4);\n        }\n        \n        .file-status {\n            width: 20px;\n            height: 20px;\n            border-radius: 4px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 0.7rem;\n            font-weight: bold;\n        }\n        \n        .file-status.added { background: #10b981; color: white; }\n        .file-status.modified { background: #f59e0b; color: white; }\n        .file-status.deleted { background: #ef4444; color: white; }\n        .file-status.private { background: #8b5cf6; color: white; }\n        .file-status.public { background: #06b6d4; color: white; }\n        \n        .file-path {\n            flex: 1;\n            font-family: 'Monaco', 'Menlo', monospace;\n            font-size: 0.85rem;\n        }\n        \n        .file-actions {\n            display: flex;\n            gap: 0.3rem;\n        }\n        \n        .file-action {\n            background: transparent;\n            border: 1px solid rgba(255, 255, 255, 0.2);\n            color: #9ca3af;\n            padding: 0.3rem 0.6rem;\n            border-radius: 4px;\n            font-size: 0.7rem;\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }\n        \n        .file-action:hover {\n            background: rgba(255, 255, 255, 0.1);\n            color: white;\n        }\n        \n        .commit-form {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        \n        .commit-message {\n            background: rgba(255, 255, 255, 0.05);\n            border: 1px solid rgba(255, 255, 255, 0.1);\n            border-radius: 6px;\n            padding: 1rem;\n            color: #e2e8f0;\n            font-family: inherit;\n            font-size: 0.9rem;\n            resize: vertical;\n            min-height: 80px;\n        }\n        \n        .commit-message:focus {\n            outline: none;\n            border-color: #3b82f6;\n            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);\n        }\n        \n        .commit-actions {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n        \n        .classification-summary {\n            background: rgba(255, 255, 255, 0.05);\n            border-radius: 6px;\n            padding: 1rem;\n            margin-bottom: 1rem;\n        }\n        \n        .classification-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 0.5rem;\n        }\n        \n        .approval-notification {\n            background: linear-gradient(45deg, #f59e0b, #d97706);\n            color: white;\n            padding: 1rem;\n            border-radius: 6px;\n            margin-bottom: 1rem;\n            display: none;\n        }\n        \n        .approval-notification.show {\n            display: block;\n        }\n        \n        @media (max-width: 1024px) {\n            .main-content {\n                grid-template-areas: \n                    \"sidebar\"\n                    \"changes-panel\"\n                    \"commit-panel\";\n                grid-template-columns: 1fr;\n                grid-template-rows: auto auto auto;\n            }\n            \n            .sidebar {\n                min-height: 200px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>📦 SoulFra GitHub Desktop</h1>\n        <div class=\"status-bar\">\n            <div class=\"status-indicator\">\n                <div class=\"status-dot\" id=\"gitStatus\"></div>\n                <span>Git</span>\n            </div>\n            <div class=\"status-indicator\">\n                <div class=\"status-dot\" id=\"vaultStatus\"></div>\n                <span>Vault</span>\n            </div>\n            <div class=\"status-indicator\">\n                <div class=\"status-dot\" id=\"agentStatus\"></div>\n                <span>Agents</span>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"main-content\">\n        <div class=\"sidebar\">\n            <div class=\"panel-title\">Repository</div>\n            \n            <div class=\"repo-info\">\n                <div class=\"repo-name\" id=\"repoName\">Document Generator</div>\n                <div class=\"branch-info\">\n                    <span>🌿</span>\n                    <span id=\"currentBranch\">main</span>\n                </div>\n            </div>\n            \n            <button class=\"btn\" onclick=\"refreshStatus()\">🔄 Refresh Status</button>\n            <button class=\"btn secondary\" onclick=\"classifyAllFiles()\">🔍 Classify Files</button>\n            <button class=\"btn\" onclick=\"generateCommitMessage()\">🤖 Generate Commit Message</button>\n            \n            <div style=\"margin-top: 2rem;\">\n                <div class=\"panel-title\">Quick Actions</div>\n                <button class=\"btn secondary\" onclick=\"createBranch()\">🌿 New Branch</button>\n                <button class=\"btn secondary\" onclick=\"pullChanges()\">⬇️ Pull</button>\n                <button class=\"btn success\" onclick=\"pushChanges()\">⬆️ Push</button>\n            </div>\n            \n            <div style=\"margin-top: 2rem;\">\n                <div class=\"panel-title\">Vault Management</div>\n                <button class=\"btn secondary\" onclick=\"viewVaultContents()\">🔒 View Vault</button>\n                <button class=\"btn secondary\" onclick=\"moveSelectedToVault()\">🔐 Move to Vault</button>\n            </div>\n        </div>\n        \n        <div class=\"changes-panel\">\n            <div class=\"panel-title\">Changes</div>\n            \n            <div class=\"approval-notification\" id=\"approvalNotification\">\n                Mobile device is requesting approval for git operations.\n                <button onclick=\"approveFromDesktop()\" style=\"margin-left: 1rem; padding: 0.3rem 0.8rem; background: #10b981; color: white; border: none; border-radius: 4px; cursor: pointer;\">Approve</button>\n            </div>\n            \n            <div class=\"classification-summary\" id=\"classificationSummary\" style=\"display: none;\">\n                <div class=\"classification-item\">\n                    <span>📤 Public Files (to GitHub):</span>\n                    <span id=\"publicCount\">0</span>\n                </div>\n                <div class=\"classification-item\">\n                    <span>🔒 Private Files (to Vault):</span>\n                    <span id=\"privateCount\">0</span>\n                </div>\n            </div>\n            \n            <div class=\"file-list\" id=\"fileList\">\n                <div style=\"text-align: center; color: #9ca3af; padding: 2rem;\">\n                    Loading file changes...\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"commit-panel\">\n            <div class=\"panel-title\">Commit Changes</div>\n            \n            <div class=\"commit-form\">\n                <textarea \n                    class=\"commit-message\" \n                    id=\"commitMessage\" \n                    placeholder=\"Enter commit message...\n\nDescribe what changes you made and why.\"\n                ></textarea>\n                \n                <div class=\"commit-actions\">\n                    <button class=\"btn\" onclick=\"commitToCleanWorkspace()\">📝 Commit Clean Files</button>\n                    <button class=\"btn secondary\" onclick=\"stageAllChanges()\">📋 Stage All</button>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        let ws = null;\n        let currentFiles = [];\n        let selectedFiles = new Set();\n        let fileClassification = new Map();\n        \n        // Initialize WebSocket connection\n        function initWebSocket() {\n            ws = new WebSocket('ws://localhost:3338');\n            \n            ws.onopen = () => {\n                console.log('Connected to GitHub Desktop WebSocket');\n                updateStatusIndicator('gitStatus', 'success');\n            };\n            \n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                handleWebSocketMessage(data);\n            };\n            \n            ws.onclose = () => {\n                console.log('WebSocket disconnected, reconnecting...');\n                updateStatusIndicator('gitStatus', 'error');\n                setTimeout(initWebSocket, 3000);\n            };\n            \n            ws.onerror = (error) => {\n                console.error('WebSocket error:', error);\n                updateStatusIndicator('gitStatus', 'error');\n            };\n        }\n        \n        function handleWebSocketMessage(data) {\n            switch (data.type) {\n                case 'git-status':\n                    updateGitStatus(data.status);\n                    break;\n                case 'file-classification':\n                    updateFileClassification(data.classification);\n                    break;\n                case 'approval-request':\n                    showApprovalRequest(data);\n                    break;\n                case 'operation-complete':\n                    showOperationResult(data);\n                    break;\n            }\n        }\n        \n        async function refreshStatus() {\n            try {\n                const response = await fetch('/api/git/status');\n                const status = await response.json();\n                \n                updateGitStatus(status);\n                updateStatusIndicator('gitStatus', 'success');\n                \n            } catch (error) {\n                console.error('Failed to refresh status:', error);\n                updateStatusIndicator('gitStatus', 'error');\n            }\n        }\n        \n        function updateGitStatus(status) {\n            currentFiles = status.files || [];\n            \n            document.getElementById('currentBranch').textContent = status.branch || 'main';\n            \n            renderFileList();\n        }\n        \n        function renderFileList() {\n            const fileList = document.getElementById('fileList');\n            \n            if (currentFiles.length === 0) {\n                fileList.innerHTML = `\n                    <div style=\"text-align: center; color: #9ca3af; padding: 2rem;\">\n                        No changes detected\n                    </div>\n                `;\n                return;\n            }\n            \n            fileList.innerHTML = currentFiles.map(file => {\n                const classification = fileClassification.get(file.path) || 'unknown';\n                const isSelected = selectedFiles.has(file.path);\n                \n                return `\n                    <div class=\"file-item ${isSelected ? 'selected' : ''}\" onclick=\"toggleFileSelection('${file.path}')\">\n                        <div class=\"file-status ${file.status}\">${getStatusIcon(file.status)}</div>\n                        <div class=\"file-status ${classification}\">${getClassificationIcon(classification)}</div>\n                        <div class=\"file-path\">${file.path}</div>\n                        <div class=\"file-actions\">\n                            <button class=\"file-action\" onclick=\"event.stopPropagation(); moveFileToVault('${file.path}')\">🔒</button>\n                            <button class=\"file-action\" onclick=\"event.stopPropagation(); viewFileDiff('${file.path}')\">👁️</button>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n        }\n        \n        function getStatusIcon(status) {\n            switch (status) {\n                case 'added': return '+';\n                case 'modified': return 'M';\n                case 'deleted': return '-';\n                default: return '?';\n            }\n        }\n        \n        function getClassificationIcon(classification) {\n            switch (classification) {\n                case 'public': return '📤';\n                case 'private': return '🔒';\n                default: return '❓';\n            }\n        }\n        \n        function toggleFileSelection(filePath) {\n            if (selectedFiles.has(filePath)) {\n                selectedFiles.delete(filePath);\n            } else {\n                selectedFiles.add(filePath);\n            }\n            \n            renderFileList();\n        }\n        \n        async function classifyAllFiles() {\n            try {\n                const response = await fetch('/api/git/classify-files', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ files: currentFiles.map(f => f.path) })\n                });\n                \n                const classification = await response.json();\n                updateFileClassification(classification);\n                \n            } catch (error) {\n                console.error('File classification failed:', error);\n            }\n        }\n        \n        function updateFileClassification(classification) {\n            fileClassification.clear();\n            \n            let publicCount = 0;\n            let privateCount = 0;\n            \n            Object.entries(classification).forEach(([filePath, type]) => {\n                fileClassification.set(filePath, type);\n                if (type === 'public') publicCount++;\n                if (type === 'private') privateCount++;\n            });\n            \n            // Update classification summary\n            document.getElementById('publicCount').textContent = publicCount;\n            document.getElementById('privateCount').textContent = privateCount;\n            document.getElementById('classificationSummary').style.display = 'block';\n            \n            renderFileList();\n        }\n        \n        async function generateCommitMessage() {\n            try {\n                const response = await fetch('/api/agents/generate-commit-message', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ \n                        files: currentFiles,\n                        classification: Object.fromEntries(fileClassification)\n                    })\n                });\n                \n                const result = await response.json();\n                \n                if (result.message) {\n                    document.getElementById('commitMessage').value = result.message;\n                }\n                \n            } catch (error) {\n                console.error('Commit message generation failed:', error);\n            }\n        }\n        \n        async function commitToCleanWorkspace() {\n            const message = document.getElementById('commitMessage').value.trim();\n            \n            if (!message) {\n                alert('Please enter a commit message');\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/git/commit', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ \n                        message,\n                        files: Array.from(selectedFiles),\n                        classification: Object.fromEntries(fileClassification)\n                    })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    alert(`Commit successful: ${result.commitHash}`);\n                    document.getElementById('commitMessage').value = '';\n                    selectedFiles.clear();\n                    refreshStatus();\n                } else {\n                    alert(`Commit failed: ${result.error}`);\n                }\n                \n            } catch (error) {\n                console.error('Commit failed:', error);\n                alert('Commit failed. Check console for details.');\n            }\n        }\n        \n        async function pushChanges() {\n            try {\n                const response = await fetch('/api/git/push', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' }\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    alert('Push successful! Clean files uploaded to GitHub.');\n                } else {\n                    alert(`Push failed: ${result.error}`);\n                }\n                \n            } catch (error) {\n                console.error('Push failed:', error);\n                alert('Push failed. Check console for details.');\n            }\n        }\n        \n        async function pullChanges() {\n            try {\n                const response = await fetch('/api/git/pull', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' }\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    alert('Pull successful!');\n                    refreshStatus();\n                } else {\n                    alert(`Pull failed: ${result.error}`);\n                }\n                \n            } catch (error) {\n                console.error('Pull failed:', error);\n            }\n        }\n        \n        async function moveFileToVault(filePath) {\n            try {\n                const response = await fetch('/api/files/move-to-vault', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ filePath })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    alert(`File moved to vault: ${filePath}`);\n                    refreshStatus();\n                } else {\n                    alert(`Failed to move file: ${result.error}`);\n                }\n                \n            } catch (error) {\n                console.error('Move to vault failed:', error);\n            }\n        }\n        \n        async function moveSelectedToVault() {\n            if (selectedFiles.size === 0) {\n                alert('Please select files to move to vault');\n                return;\n            }\n            \n            const filePaths = Array.from(selectedFiles);\n            \n            for (const filePath of filePaths) {\n                await moveFileToVault(filePath);\n            }\n            \n            selectedFiles.clear();\n        }\n        \n        async function viewVaultContents() {\n            try {\n                const response = await fetch('/api/files/vault-contents');\n                const contents = await response.json();\n                \n                const fileList = contents.files.map(file => \n                    `• ${file.path} (${file.size} bytes)`\n                ).join('\\n');\n                \n                alert(`Vault Contents:\\n\\n${fileList || 'Vault is empty'}`);\n                \n            } catch (error) {\n                console.error('Failed to get vault contents:', error);\n            }\n        }\n        \n        function showApprovalRequest(data) {\n            const notification = document.getElementById('approvalNotification');\n            notification.classList.add('show');\n            notification.innerHTML = `\n                ${data.message}\n                <button onclick=\"approveFromDesktop('${data.operationId}')\" style=\"margin-left: 1rem; padding: 0.3rem 0.8rem; background: #10b981; color: white; border: none; border-radius: 4px; cursor: pointer;\">Approve</button>\n                <button onclick=\"rejectFromDesktop('${data.operationId}')\" style=\"margin-left: 0.5rem; padding: 0.3rem 0.8rem; background: #ef4444; color: white; border: none; border-radius: 4px; cursor: pointer;\">Reject</button>\n            `;\n        }\n        \n        async function approveFromDesktop(operationId) {\n            try {\n                const response = await fetch('/api/approval/respond', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ operationId, approved: true })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    document.getElementById('approvalNotification').classList.remove('show');\n                    alert('Operation approved');\n                }\n                \n            } catch (error) {\n                console.error('Approval failed:', error);\n            }\n        }\n        \n        function updateStatusIndicator(elementId, status) {\n            const indicator = document.getElementById(elementId);\n            indicator.className = `status-dot ${status === 'success' ? '' : status}`;\n        }\n        \n        function createBranch() {\n            const branchName = prompt('Enter new branch name:');\n            if (branchName) {\n                // Implementation for branch creation\n                alert(`Creating branch: ${branchName}`);\n            }\n        }\n        \n        function stageAllChanges() {\n            selectedFiles.clear();\n            currentFiles.forEach(file => selectedFiles.add(file.path));\n            renderFileList();\n        }\n        \n        function viewFileDiff(filePath) {\n            // Implementation for viewing file diff\n            alert(`Viewing diff for: ${filePath}`);\n        }\n        \n        function showOperationResult(data) {\n            if (data.success) {\n                alert(`Operation completed: ${data.message}`);\n            } else {\n                alert(`Operation failed: ${data.error}`);\n            }\n        }\n        \n        // Initialize the application\n        document.addEventListener('DOMContentLoaded', () => {\n            initWebSocket();\n            refreshStatus();\n            \n            // Update status indicators\n            updateStatusIndicator('vaultStatus', 'success');\n            updateStatusIndicator('agentStatus', 'success');\n        });\n    </script>\n</body>\n</html>\n        `;\n        \n        res.send(html);\n    }\n    \n    // Continue in the next part due to length...\n}\n\nmodule.exports = GitHubDesktopWrapper;