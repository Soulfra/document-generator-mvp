#!/usr/bin/env node

/**
 * üåê SUBDOMAIN ROUTING CONFIGURATION
 * 
 * Complete setup for middle-out subdomain architecture:
 * ‚Ä¢ trading.domain.com ‚Üí Browser extension enhanced trading
 * ‚Ä¢ game.domain.com ‚Üí Game layer interface  
 * ‚Ä¢ tycoon.domain.com ‚Üí Tycoon wrapper system
 * ‚Ä¢ api.domain.com ‚Üí API documentation & access
 * ‚Ä¢ admin.domain.com ‚Üí Administrative interface
 * ‚Ä¢ reasoning.domain.com ‚Üí Reasoning differential machine
 * 
 * All routes back to central Enhanced Economy Hub
 */

const fs = require('fs').promises;
const path = require('path');

class SubdomainRoutingConfig {
    constructor() {
        this.basePort = 9800;
        this.domain = process.env.DOMAIN || 'localhost';
        this.subdomains = [
            'trading',
            'game', 
            'tycoon',
            'api',
            'admin',
            'reasoning'
        ];
        
        // Nginx configuration for production
        this.nginxConfig = '';
        
        // Docker compose configuration
        this.dockerConfig = '';
        
        // DNS configuration (for cloudflare/similar)
        this.dnsConfig = '';
        
        // Local development hosts file entries
        this.hostsEntries = '';
    }
    
    async generateConfigurations() {
        console.log('üåê Generating subdomain routing configurations...');
        
        await this.generateNginxConfig();
        await this.generateDockerConfig();
        await this.generateDNSConfig();
        await this.generateHostsConfig();
        await this.generateStartupScript();
        
        console.log('‚úÖ All configurations generated');\n    }\n    \n    async generateNginxConfig() {\n        this.nginxConfig = `\n# Nginx configuration for Enhanced Economy Hub subdomains\n# Place in /etc/nginx/sites-available/economy-hub\n\n# Main hub (default)\nserver {\n    listen 80;\n    server_name ${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n    \n    # WebSocket support\n    location /ws {\n        proxy_pass http://localhost:${this.basePort + 1};\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\n# Trading subdomain\nserver {\n    listen 80;\n    server_name trading.${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host trading.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Add header to identify subdomain\n        proxy_set_header X-Subdomain trading;\n    }\n}\n\n# Game subdomain\nserver {\n    listen 80;\n    server_name game.${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host game.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_set_header X-Subdomain game;\n    }\n}\n\n# Tycoon subdomain\nserver {\n    listen 80;\n    server_name tycoon.${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host tycoon.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_set_header X-Subdomain tycoon;\n    }\n}\n\n# API subdomain\nserver {\n    listen 80;\n    server_name api.${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host api.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_set_header X-Subdomain api;\n        \n        # CORS headers for API\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Headers \"Content-Type, Authorization\";\n    }\n}\n\n# Admin subdomain (with IP restriction)\nserver {\n    listen 80;\n    server_name admin.${this.domain};\n    \n    # Restrict access to admin\n    allow 127.0.0.1;\n    allow 10.0.0.0/8;\n    allow 192.168.0.0/16;\n    deny all;\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host admin.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_set_header X-Subdomain admin;\n    }\n}\n\n# Reasoning subdomain\nserver {\n    listen 80;\n    server_name reasoning.${this.domain};\n    \n    location / {\n        proxy_pass http://localhost:${this.basePort};\n        proxy_set_header Host reasoning.${this.domain};\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        proxy_set_header X-Subdomain reasoning;\n    }\n}\n\n# SSL configuration (if using Let's Encrypt)\n# server {\n#     listen 443 ssl http2;\n#     server_name ${this.domain} *.${this.domain};\n#     \n#     ssl_certificate /etc/letsencrypt/live/${this.domain}/fullchain.pem;\n#     ssl_certificate_key /etc/letsencrypt/live/${this.domain}/privkey.pem;\n#     \n#     # ... rest of configuration ...\n# }\n        `;\n        \n        await fs.writeFile('./nginx-subdomain-config.conf', this.nginxConfig);\n        console.log('‚úÖ Nginx configuration generated');\n    }\n    \n    async generateDockerConfig() {\n        this.dockerConfig = `\n# Docker Compose configuration for Enhanced Economy Hub\n# Includes reverse proxy and subdomain routing\n\nversion: '3.8'\n\nservices:\n  # Enhanced Economy Hub (main application)\n  economy-hub:\n    build: .\n    container_name: enhanced-economy-hub\n    ports:\n      - \"${this.basePort}:${this.basePort}\"\n      - \"${this.basePort + 1}:${this.basePort + 1}\"\n    environment:\n      - NODE_ENV=production\n      - DOMAIN=${this.domain}\n      - HUB_PORT=${this.basePort}\n      - HUB_WS_PORT=${this.basePort + 1}\n      - POSTGRES_HOST=postgres\n      - POSTGRES_DB=document_generator\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - economy-network\n    restart: unless-stopped\n    \n  # Nginx reverse proxy\n  nginx:\n    image: nginx:alpine\n    container_name: economy-nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx-subdomain-config.conf:/etc/nginx/conf.d/default.conf\n      - ./ssl:/etc/ssl/certs  # For SSL certificates\n    depends_on:\n      - economy-hub\n    networks:\n      - economy-network\n    restart: unless-stopped\n    \n  # PostgreSQL database\n  postgres:\n    image: postgres:15\n    container_name: economy-postgres\n    environment:\n      - POSTGRES_DB=document_generator\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql\n    networks:\n      - economy-network\n    restart: unless-stopped\n    \n  # Redis for caching and sessions\n  redis:\n    image: redis:alpine\n    container_name: economy-redis\n    networks:\n      - economy-network\n    restart: unless-stopped\n    \n  # Optional: Cloudflare tunnel for secure exposure\n  cloudflare-tunnel:\n    image: cloudflare/cloudflared:latest\n    container_name: economy-tunnel\n    command: tunnel --no-autoupdate run\n    environment:\n      - TUNNEL_TOKEN=${process.env.CLOUDFLARE_TUNNEL_TOKEN || 'your-tunnel-token'}\n    depends_on:\n      - nginx\n    networks:\n      - economy-network\n    restart: unless-stopped\n    profiles:\n      - cloudflare\n\nvolumes:\n  postgres_data:\n    driver: local\n\nnetworks:\n  economy-network:\n    driver: bridge\n        `;\n        \n        await fs.writeFile('./docker-compose-subdomains.yml', this.dockerConfig);\n        console.log('‚úÖ Docker configuration generated');\n    }\n    \n    async generateDNSConfig() {\n        this.dnsConfig = `\n# DNS Configuration for Enhanced Economy Hub\n# For Cloudflare (or similar DNS provider)\n\n# A Records (point to your server IP)\n${this.domain}               A    YOUR_SERVER_IP\ntrading.${this.domain}       A    YOUR_SERVER_IP\ngame.${this.domain}          A    YOUR_SERVER_IP\ntycoon.${this.domain}        A    YOUR_SERVER_IP\napi.${this.domain}           A    YOUR_SERVER_IP\nadmin.${this.domain}         A    YOUR_SERVER_IP  \nreasoning.${this.domain}     A    YOUR_SERVER_IP\n\n# CNAME Records (alternative - use one or the other)\n# trading.${this.domain}     CNAME    ${this.domain}\n# game.${this.domain}        CNAME    ${this.domain}\n# tycoon.${this.domain}      CNAME    ${this.domain}\n# api.${this.domain}         CNAME    ${this.domain}\n# admin.${this.domain}       CNAME    ${this.domain}\n# reasoning.${this.domain}   CNAME    ${this.domain}\n\n# Wildcard record (catches all subdomains)\n*.${this.domain}             A    YOUR_SERVER_IP\n\n# For local development with ngrok/localtunnel:\n# Use their provided URLs instead of your domain\n\n# Cloudflare specific settings:\n# - Enable \"Proxied\" (orange cloud) for DDoS protection\n# - SSL/TLS mode: \"Full (strict)\" if you have SSL certs\n# - Page Rules for subdomain-specific caching/security\n        `;\n        \n        await fs.writeFile('./dns-configuration.txt', this.dnsConfig);\n        console.log('‚úÖ DNS configuration generated');\n    }\n    \n    async generateHostsConfig() {\n        this.hostsEntries = `\n# Add these entries to /etc/hosts for local development\n# This allows testing subdomains on localhost\n\n127.0.0.1    ${this.domain}\n127.0.0.1    trading.${this.domain}\n127.0.0.1    game.${this.domain}\n127.0.0.1    tycoon.${this.domain}\n127.0.0.1    api.${this.domain}\n127.0.0.1    admin.${this.domain}\n127.0.0.1    reasoning.${this.domain}\n\n# On Windows, edit C:\\Windows\\System32\\drivers\\etc\\hosts\n# On macOS/Linux, edit /etc/hosts (requires sudo)\n\n# Example command to add entries (Linux/macOS):\n# echo \"127.0.0.1 trading.localhost\" | sudo tee -a /etc/hosts\n        `;\n        \n        await fs.writeFile('./hosts-entries.txt', this.hostsEntries);\n        console.log('‚úÖ Hosts file entries generated');\n    }\n    \n    async generateStartupScript() {\n        const startupScript = `#!/bin/bash\n\n# Enhanced Economy Hub Startup Script\n# Configures and starts the complete middle-out system\n\nset -e  # Exit on error\n\necho \"üåê Starting Enhanced Economy Hub with Subdomain Routing...\"\necho \"====================================================\"\n\n# Check if running in development or production\nif [ \"$NODE_ENV\" = \"production\" ]; then\n    echo \"üöÄ Production mode detected\"\n    \n    # Check if Docker is installed\n    if ! command -v docker &> /dev/null; then\n        echo \"‚ùå Docker is required for production deployment\"\n        exit 1\n    fi\n    \n    # Check if docker-compose is installed\n    if ! command -v docker-compose &> /dev/null; then\n        echo \"‚ùå Docker Compose is required for production deployment\"\n        exit 1\n    fi\n    \n    echo \"üì¶ Starting with Docker Compose...\"\n    \n    # Build and start all services\n    docker-compose -f docker-compose-subdomains.yml up -d --build\n    \n    echo \"‚úÖ All services started\"\n    echo \"üåê Main hub: http://${this.domain}\"\n    echo \"üìà Trading: http://trading.${this.domain}\"\n    echo \"üéÆ Game: http://game.${this.domain}\"\n    echo \"üè≠ Tycoon: http://tycoon.${this.domain}\"\n    echo \"üîå API: http://api.${this.domain}\"\n    echo \"‚öôÔ∏è Admin: http://admin.${this.domain}\"\n    echo \"üß† Reasoning: http://reasoning.${this.domain}\"\n    \nelse\n    echo \"üõ†Ô∏è Development mode detected\"\n    \n    # Check if Node.js is installed\n    if ! command -v node &> /dev/null; then\n        echo \"‚ùå Node.js is required for development\"\n        exit 1\n    fi\n    \n    # Install dependencies if needed\n    if [ ! -d \"node_modules\" ]; then\n        echo \"üì¶ Installing dependencies...\"\n        npm install\n    fi\n    \n    # Set up local hosts file entries (requires sudo)\n    echo \"üîß Setting up local hosts entries...\"\n    if [ -f \"/etc/hosts\" ]; then\n        # Check if entries already exist\n        if ! grep -q \"trading.localhost\" /etc/hosts; then\n            echo \"Adding localhost subdomain entries (requires sudo)...\"\n            echo \"127.0.0.1 trading.localhost\" | sudo tee -a /etc/hosts\n            echo \"127.0.0.1 game.localhost\" | sudo tee -a /etc/hosts\n            echo \"127.0.0.1 tycoon.localhost\" | sudo tee -a /etc/hosts\n            echo \"127.0.0.1 api.localhost\" | sudo tee -a /etc/hosts\n            echo \"127.0.0.1 admin.localhost\" | sudo tee -a /etc/hosts\n            echo \"127.0.0.1 reasoning.localhost\" | sudo tee -a /etc/hosts\n        fi\n    fi\n    \n    # Start PostgreSQL (if not running)\n    if ! pg_isready -h localhost -p 5432 &> /dev/null; then\n        echo \"üóÑÔ∏è Starting PostgreSQL...\"\n        if command -v brew &> /dev/null; then\n            brew services start postgresql\n        elif command -v systemctl &> /dev/null; then\n            sudo systemctl start postgresql\n        else\n            echo \"‚ö†Ô∏è Please start PostgreSQL manually\"\n        fi\n    fi\n    \n    # Start Redis (if not running)\n    if ! redis-cli ping &> /dev/null; then\n        echo \"üîÑ Starting Redis...\"\n        if command -v brew &> /dev/null; then\n            brew services start redis\n        elif command -v systemctl &> /dev/null; then\n            sudo systemctl start redis\n        else\n            echo \"‚ö†Ô∏è Please start Redis manually\"\n        fi\n    fi\n    \n    echo \"üöÄ Starting Enhanced Economy Hub...\"\n    \n    # Set development environment variables\n    export NODE_ENV=development\n    export DOMAIN=localhost\n    export HUB_PORT=${this.basePort}\n    export HUB_WS_PORT=${this.basePort + 1}\n    \n    # Start the application\n    node enhanced-economy-hub.js\nfi\n\necho \"üéØ Enhanced Economy Hub is running!\"\necho \"üìä Check health: http://localhost:${this.basePort}/api/health\"\n        `;\n        \n        await fs.writeFile('./start-subdomain-hub.sh', startupScript);\n        \n        // Make script executable\n        try {\n            await fs.chmod('./start-subdomain-hub.sh', 0o755);\n        } catch (error) {\n            console.warn('Could not make startup script executable:', error.message);\n        }\n        \n        console.log('‚úÖ Startup script generated');\n    }\n    \n    async generateTradingSubdomainInterface() {\n        const tradingInterface = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>üìà Trading Interface - Enhanced Economy Hub</title>\n    <style>\n        body {\n            background: linear-gradient(135deg, #0f0f23, #1a1a2e, #16213e);\n            color: #fff;\n            font-family: 'Courier New', monospace;\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n        }\n        \n        .trading-container {\n            max-width: 1400px;\n            margin: 0 auto;\n        }\n        \n        .trading-header {\n            text-align: center;\n            padding: 20px 0;\n            border-bottom: 3px solid #00ff88;\n            margin-bottom: 30px;\n        }\n        \n        .extension-status {\n            background: rgba(0, 255, 136, 0.1);\n            border: 2px solid #00ff88;\n            border-radius: 12px;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        \n        .trading-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n        \n        .trading-panel {\n            background: rgba(255, 136, 0, 0.1);\n            border: 2px solid #ff8800;\n            border-radius: 12px;\n            padding: 20px;\n        }\n        \n        .install-extension {\n            background: linear-gradient(45deg, #00ff88, #00cc6a);\n            color: #000;\n            padding: 15px 30px;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: bold;\n            cursor: pointer;\n            margin: 10px;\n        }\n        \n        .hash-verification {\n            background: rgba(255, 0, 136, 0.1);\n            border: 2px solid #ff0088;\n            border-radius: 12px;\n            padding: 20px;\n            margin-top: 20px;\n        }\n        \n        .hash-input {\n            width: 100%;\n            padding: 10px;\n            background: rgba(0, 0, 0, 0.5);\n            border: 1px solid #555;\n            color: #fff;\n            font-family: monospace;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"trading-container\">\n        <div class=\"trading-header\">\n            <h1>üìà Trading Interface</h1>\n            <p>Browser Extension Enhanced Trading Platform</p>\n            <p>Connected to Enhanced Economy Hub</p>\n        </div>\n        \n        <div class=\"extension-status\">\n            <h3>üîå Browser Extension Status</h3>\n            <p id=\"extension-status\">Checking extension...</p>\n            <button class=\"install-extension\" onclick=\"installExtension()\">üì¶ Install Trading Extension</button>\n            <button class=\"install-extension\" onclick=\"testConnection()\">üîó Test Connection</button>\n        </div>\n        \n        <div class=\"trading-grid\">\n            <div class=\"trading-panel\">\n                <h3>üìä Live Trading Data</h3>\n                <div id=\"trading-data\">\n                    <p>Connecting to markets...</p>\n                </div>\n            </div>\n            \n            <div class=\"trading-panel\">\n                <h3>üéÆ Game-Enhanced Features</h3>\n                <div id=\"game-features\">\n                    <p>Loading game layer integration...</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"hash-verification\">\n            <h3>üî¢ Hash Verification (420 System)</h3>\n            <p>Enter data to verify hash patterns:</p>\n            <input type=\"text\" class=\"hash-input\" id=\"hash-input\" placeholder=\"Enter data to hash...\">\n            <button class=\"install-extension\" onclick=\"verifyHash()\">üîç Verify 420 Pattern</button>\n            <div id=\"hash-result\"></div>\n        </div>\n    </div>\n    \n    <script>\n        // Connect to central hub WebSocket\n        const ws = new WebSocket('ws://localhost:${this.basePort + 1}');\n        \n        ws.onopen = function() {\n            console.log('Connected to Enhanced Economy Hub');\n            updateStatus('üü¢ Connected to hub');\n        };\n        \n        ws.onmessage = function(event) {\n            const data = JSON.parse(event.data);\n            handleHubMessage(data);\n        };\n        \n        function updateStatus(message) {\n            document.getElementById('extension-status').textContent = message;\n        }\n        \n        function handleHubMessage(data) {\n            if (data.type === 'trading_data') {\n                document.getElementById('trading-data').innerHTML = \\`\n                    <p>Symbol: \\${data.symbol}</p>\n                    <p>Price: $\\${data.price}</p>\n                    <p>Change: \\${data.change}</p>\n                \\`;\n            }\n        }\n        \n        function installExtension() {\n            alert('üöÄ Extension installation would begin here. This would download and install the browser extension.');\n        }\n        \n        function testConnection() {\n            fetch('/api/health')\n                .then(r => r.json())\n                .then(data => {\n                    updateStatus('üü¢ Hub healthy: ' + data.status);\n                })\n                .catch(err => {\n                    updateStatus('üî¥ Hub connection failed');\n                });\n        }\n        \n        function verifyHash() {\n            const input = document.getElementById('hash-input').value;\n            \n            fetch('/api/hash/verify', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ data: input, pattern: '420' })\n            })\n            .then(r => r.json())\n            .then(result => {\n                document.getElementById('hash-result').innerHTML = \\`\n                    <p>Hash: \\${result.hash}</p>\n                    <p>420 Pattern: \\${result.verified ? '‚úÖ VERIFIED!' : '‚ùå Not found'}</p>\n                    \\${result.tycoonReward ? '<p>üèÜ Tycoon reward triggered!</p>' : ''}\n                \\`;\n            });\n        }\n        \n        // Auto-load trading data\n        setInterval(() => {\n            fetch('/api/extension/trading-data?symbol=BTC&timeframe=1h&userId=demo')\n                .then(r => r.json())\n                .then(data => {\n                    document.getElementById('trading-data').innerHTML = \\`\n                        <p>Symbol: \\${data.tradingData.symbol}</p>\n                        <p>Price: $\\${data.tradingData.price}</p>\n                        <p>Change: \\${data.tradingData.change}</p>\n                        <p>Tycoon Level: \\${data.tycoonLevel}</p>\n                    \\`;\n                })\n                .catch(err => console.error('Trading data error:', err));\n        }, 5000);\n    </script>\n</body>\n</html>\n        `;\n        \n        await fs.writeFile('./public/trading-interface.html', tradingInterface);\n        console.log('‚úÖ Trading subdomain interface generated');\n    }\n    \n    async generateDocumentation() {\n        const documentation = `\n# üåê Enhanced Economy Hub - Subdomain Routing Guide\n\n## Overview\n\nThe Enhanced Economy Hub uses a middle-out architecture where everything connects to a central hub (port 9800) but is accessed through different subdomains, each providing a specialized interface.\n\n## Architecture\n\n\\`\\`\\`\n                   üåê Enhanced Economy Hub (Port 9800)\n                            ‚ÜóÔ∏è    ‚ÜñÔ∏è    ‚ÜôÔ∏è    ‚ÜòÔ∏è\n    üìà trading.domain.com  üéÆ game.domain.com  üè≠ tycoon.domain.com  üîå api.domain.com\n                     ‚ÜñÔ∏è                                          ‚ÜôÔ∏è\n              ‚öôÔ∏è admin.domain.com                    üß† reasoning.domain.com\n\\`\\`\\`\n\n## Subdomain Functions\n\n### üìà trading.domain.com\n- Browser extension enhanced trading interface\n- Live market data with game layer enhancement\n- Plugin injection system for trading tools\n- Hash verification (420 pattern) integration\n\n### üéÆ game.domain.com  \n- Game layer management interface\n- Ring architecture visualization\n- Cross-ring communication tools\n- Tower defense, tycoon, loot systems\n\n### üè≠ tycoon.domain.com\n- Tycoon progression interface\n- Patience/reward timing system\n- Upgrade management\n- Resource tracking\n\n### üîå api.domain.com\n- API documentation and testing\n- Swagger/OpenAPI interface\n- Rate limiting information\n- CORS-enabled for external access\n\n### ‚öôÔ∏è admin.domain.com\n- System administration (IP restricted)\n- Performance monitoring\n- User management\n- Configuration tools\n\n### üß† reasoning.domain.com\n- Reasoning differential machine interface\n- Decision chain visualization\n- Timing controller\n- Action queue management\n\n## Setup Instructions\n\n### Local Development\n\n1. **Install dependencies:**\n   \\`\\`\\`bash\n   npm install\n   \\`\\`\\`\n\n2. **Set up hosts file:**\n   \\`\\`\\`bash\n   sudo ./setup-hosts.sh\n   \\`\\`\\`\n\n3. **Start the hub:**\n   \\`\\`\\`bash\n   ./start-subdomain-hub.sh\n   \\`\\`\\`\n\n4. **Access interfaces:**\n   - Main hub: http://localhost:9800\n   - Trading: http://trading.localhost:9800\n   - Game: http://game.localhost:9800\n   - Tycoon: http://tycoon.localhost:9800\n   - API: http://api.localhost:9800\n   - Admin: http://admin.localhost:9800\n   - Reasoning: http://reasoning.localhost:9800\n\n### Production Deployment\n\n1. **Set up DNS records:**\n   \\`\\`\\`\n   domain.com           A    YOUR_SERVER_IP\n   *.domain.com         A    YOUR_SERVER_IP\n   \\`\\`\\`\n\n2. **Deploy with Docker:**\n   \\`\\`\\`bash\n   NODE_ENV=production ./start-subdomain-hub.sh\n   \\`\\`\\`\n\n3. **Configure SSL (optional):**\n   \\`\\`\\`bash\n   certbot --nginx -d domain.com -d *.domain.com\n   \\`\\`\\`\n\n## API Integration\n\nAll subdomains share the same backend APIs but can have different authentication and rate limiting:\n\n### Trading Subdomain APIs\n- \\`POST /api/extension/auth\\` - Extension authentication\n- \\`GET /api/extension/trading-data\\` - Enhanced trading data\n- \\`POST /api/extension/inject-plugin\\` - Plugin injection\n\n### Game Subdomain APIs  \n- \\`GET /api/game/layers\\` - Active game layers\n- \\`POST /api/game/action\\` - Game actions\n- \\`POST /api/game/cross-ring\\` - Cross-ring communication\n\n### Tycoon Subdomain APIs\n- \\`GET /api/tycoon/progress/:userId\\` - User progress\n- \\`POST /api/tycoon/upgrade\\` - Process upgrades\n- \\`POST /api/tycoon/claim-reward\\` - Claim rewards\n\n## WebSocket Integration\n\nAll subdomains can connect to the WebSocket server on port 9801:\n\n\\`\\`\\`javascript\nconst ws = new WebSocket('ws://domain.com:9801');\n\n// Subscribe to subdomain-specific updates\nws.send(JSON.stringify({\n    type: 'subscribe',\n    subdomain: 'trading',\n    userId: 'user123'\n}));\n\\`\\`\\`\n\n## Security Considerations\n\n- Admin subdomain is IP-restricted by default\n- API subdomain has CORS headers enabled\n- All requests pass through the obfuscation layer\n- Extension authentication required for plugin injection\n- Rate limiting per subdomain\n\n## Monitoring & Health Checks\n\n- Health endpoint: \\`/api/health\\`\n- Metrics endpoint: \\`/api/metrics\\` (admin only)\n- WebSocket status: Real-time connection monitoring\n- Per-subdomain analytics tracking\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Subdomain not resolving:**\n   - Check hosts file entries\n   - Verify DNS configuration\n   - Ensure nginx is running\n\n2. **Extension not connecting:**\n   - Check CORS headers\n   - Verify WebSocket connection\n   - Check authentication tokens\n\n3. **Game layers not responding:**\n   - Check database connection\n   - Verify ring architecture setup\n   - Review game layer initialization\n\n### Debug Commands\n\n\\`\\`\\`bash\n# Test subdomain routing\ncurl -H \"Host: trading.localhost\" http://localhost:9800/\n\n# Check WebSocket connection\nwscat -c ws://localhost:9801\n\n# Verify health\ncurl http://localhost:9800/api/health\n\\`\\`\\`\n\n## Next Steps\n\n1. **Browser Extension Development**: Create actual Chrome/Firefox extensions\n2. **Game Layer Enhancement**: Add more interactive game elements  \n3. **Tycoon Mechanics**: Implement complex progression systems\n4. **API Rate Limiting**: Add per-user/subdomain limits\n5. **SSL Automation**: Set up automatic certificate renewal\n6. **CDN Integration**: Add CloudFlare or similar for performance\n\n---\n\n*Enhanced Economy Hub - Middle-out architecture for maximum flexibility and scalability*\n        `;\n        \n        await fs.writeFile('./SUBDOMAIN-ROUTING-GUIDE.md', documentation);\n        console.log('‚úÖ Documentation generated');\n    }\n}\n\n// Generate all configurations\nif (require.main === module) {\n    const config = new SubdomainRoutingConfig();\n    \n    (async () => {\n        try {\n            await config.generateConfigurations();\n            await config.generateTradingSubdomainInterface();\n            await config.generateDocumentation();\n            \n            console.log('\\nüéØ Subdomain routing configuration complete!');\n            console.log('üìÅ Generated files:');\n            console.log('  - nginx-subdomain-config.conf');\n            console.log('  - docker-compose-subdomains.yml');\n            console.log('  - dns-configuration.txt');\n            console.log('  - hosts-entries.txt');\n            console.log('  - start-subdomain-hub.sh');\n            console.log('  - public/trading-interface.html');\n            console.log('  - SUBDOMAIN-ROUTING-GUIDE.md');\n            console.log('\\nüöÄ Ready to start middle-out subdomain system!');\n            \n        } catch (error) {\n            console.error('‚ùå Configuration generation failed:', error);\n            process.exit(1);\n        }\n    })();\n}\n\nmodule.exports = SubdomainRoutingConfig;