#!/bin/bash
# no-todos-check.sh - Verifies no TODO/stub content in documentation
# Part of the quality enforcement system

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Configuration
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Stub markers to check for
STUB_MARKERS=(
    "TODO"
    "FIXME"
    "STUB"
    "placeholder"
    "not implemented"
    "Documentation generated by"
    "// Test file generated by"
    "\[Content for"
    "\[.*\] content to be filled"
)

# Files to check
check_files() {
    local failed=0
    local checked=0
    local violations=()
    
    echo -e "${BLUE}=== Checking for TODO/Stub Content ===${NC}"
    echo
    
    # Check all documentation files
    while IFS= read -r file; do
        ((checked++))
        
        # Skip certain files that might legitimately contain these terms
        if [[ "$file" == *"no-todos-check.sh"* ]] || \
           [[ "$file" == *"QUALITY_STANDARDS.md"* ]] || \
           [[ "$file" == *"test"* ]]; then
            continue
        fi
        
        # Check each stub marker
        for marker in "${STUB_MARKERS[@]}"; do
            if grep -q "$marker" "$file" 2>/dev/null; then
                violations+=("$file:$(grep -n "$marker" "$file" | head -1)")
                ((failed++))
                break
            fi
        done
    done < <(find "$PROJECT_ROOT" -type f \( -name "*.md" -o -name "*.ts" -o -name "*.js" -o -name "*.tsx" -o -name "*.jsx" \) \
             -not -path "*/node_modules/*" \
             -not -path "*/.git/*" \
             -not -path "*/dist/*" \
             -not -path "*/build/*" \
             -not -path "*/coverage/*")
    
    # Report results
    if [ ${#violations[@]} -gt 0 ]; then
        echo -e "${RED}✗ Found ${#violations[@]} files with TODO/stub content:${NC}"
        echo
        for violation in "${violations[@]}"; do
            echo -e "  ${RED}• $violation${NC}"
        done
        echo
        echo -e "${YELLOW}These files contain stub content that violates quality standards!${NC}"
        echo -e "${YELLOW}Per QUALITY_STANDARDS.md: NO STUBS, NO PLACEHOLDERS, NO TODOs${NC}"
        return 1
    else
        echo -e "${GREEN}✓ No TODO/stub content found in $checked files${NC}"
        return 0
    fi
}

# Check documentation completeness
check_doc_completeness() {
    echo
    echo -e "${BLUE}=== Checking Documentation Completeness ===${NC}"
    echo
    
    local min_size=1000  # Minimum file size in bytes
    local min_sections=3 # Minimum number of sections
    local incomplete=()
    
    # Check all markdown files in docs/
    while IFS= read -r file; do
        # Check file size
        local size=$(wc -c < "$file")
        if [ "$size" -lt "$min_size" ]; then
            incomplete+=("$file: Too small ($size bytes, minimum: $min_size)")
            continue
        fi
        
        # Check section count
        local sections=$(grep -c "^##\s" "$file" || true)
        if [ "$sections" -lt "$min_sections" ]; then
            incomplete+=("$file: Too few sections ($sections, minimum: $min_sections)")
        fi
    done < <(find "$PROJECT_ROOT/docs" -name "*.md" -type f)
    
    if [ ${#incomplete[@]} -gt 0 ]; then
        echo -e "${RED}✗ Found ${#incomplete[@]} incomplete documentation files:${NC}"
        echo
        for issue in "${incomplete[@]}"; do
            echo -e "  ${RED}• $issue${NC}"
        done
        return 1
    else
        echo -e "${GREEN}✓ All documentation files meet completeness requirements${NC}"
        return 0
    fi
}

# Main execution
main() {
    local exit_code=0
    
    # Run checks
    if ! check_files; then
        exit_code=1
    fi
    
    if ! check_doc_completeness; then
        exit_code=1
    fi
    
    # Summary
    echo
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}=== All Quality Checks Passed ===${NC}"
        echo -e "${GREEN}No stubs or TODOs found in the codebase!${NC}"
    else
        echo -e "${RED}=== Quality Checks Failed ===${NC}"
        echo -e "${RED}Fix all issues before committing!${NC}"
        echo
        echo "Per project standards:"
        echo "1. NO STUBS - Every file must have real implementation"
        echo "2. NO PLACEHOLDERS - Complete all sections"
        echo "3. NO TODOs - Finish the work or don't commit"
        echo
        echo "See QUALITY_STANDARDS.md for details"
    fi
    
    exit $exit_code
}

# Run if executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi