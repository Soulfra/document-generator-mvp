#!/usr/bin/env node

/**
 * 🌐 ENHANCED MULTI-LAYERED ECONOMY HUB
 * 
 * Middle-out architecture central hub where EVERYTHING connects:
 * • All economy layers (Human↔Human, AI↔Human, Human↔AI, AI↔AI)
 * • Subdomain routing (trading/game/api/admin URLs)
 * • Game layer management with tycoon wrapper
 * • Hash verification (420) integration
 * • Reasoning differential machine (timing controller)
 * • Browser extension backend
 * • NPC registry and agent spawning
 * 
 * This is the CORE that everything radiates from
 */

const express = require('express');
const WebSocket = require('ws');
const { Client } = require('pg');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

// Import existing systems
const gameLayerManager = require('./game-layer-manager');
const MatthewMauerObfuscationLayer = require('./matthew-mauer-obfuscation-layer');

class EnhancedEconomyHub {
    constructor() {
        this.app = express();
        this.port = process.env.HUB_PORT || 9800;
        this.wsPort = process.env.HUB_WS_PORT || 9801;
        
        // PostgreSQL connection to unified database
        this.pgClient = new Client({
            host: process.env.POSTGRES_HOST || 'localhost',
            port: process.env.POSTGRES_PORT || 5432,
            database: process.env.POSTGRES_DB || 'document_generator',
            user: process.env.POSTGRES_USER || 'postgres',
            password: process.env.POSTGRES_PASSWORD || 'password'
        });
        
        // Core systems integration
        this.gameLayerManager = gameLayerManager;
        this.obfuscationLayer = new MatthewMauerObfuscationLayer();
        
        // Economy layer managers
        this.economyLayers = {
            humanToHuman: new HumanToHumanEconomy(this.pgClient),
            aiToHuman: new AIToHumanEconomy(this.pgClient),
            humanToAI: new HumanToAIEconomy(this.pgClient),
            aiToAI: new AIToAIEconomy(this.pgClient),
            reasoning: new ReasoningEconomy(this.pgClient)
        };
        
        // Tycoon wrapper system
        this.tycoonSystem = new TycoonWrapperSystem(this.pgClient);
        
        // Hash verification system (420 verification)
        this.hashVerification = new HashVerificationSystem();
        
        // Reasoning differential machine (timing controller)
        this.reasoningDifferential = new ReasoningDifferentialMachine();
        
        // NPC Registry for buildable agents
        this.npcRegistry = new NPCRegistry(this.pgClient);
        
        // Subdomain routing configuration
        this.subdomainRoutes = new Map([
            ['trading', this.serveTradingInterface.bind(this)],
            ['game', this.serveGameInterface.bind(this)],
            ['api', this.serveAPIInterface.bind(this)],
            ['admin', this.serveAdminInterface.bind(this)],
            ['tycoon', this.serveTycoonInterface.bind(this)],
            ['reasoning', this.serveReasoningInterface.bind(this)]
        ]);
        
        // Active connections and sessions
        this.wsConnections = new Map();
        this.activeSessions = new Map();
        this.activeGameSessions = new Map();
        
        // Performance monitoring
        this.metrics = {
            requests: 0,
            errors: 0,
            gameActions: 0,
            hashVerifications: 0,
            tycoonActions: 0
        };
        
        console.log('🌐 ENHANCED MULTI-LAYERED ECONOMY HUB');\n        console.log('====================================');\n        console.log('🎯 Middle-out architecture activated');\n        console.log('🔄 All systems converge here');\n        console.log('🎮 Game layers + Tycoon wrapper');\n        console.log('🔗 Hash verification (420) ready');\n        console.log('🧠 Reasoning differential machine online');\n        console.log('');\n        \n        this.initialize();\n    }\n    \n    async initialize() {\n        try {\n            await this.pgClient.connect();\n            console.log('✅ Connected to unified PostgreSQL database');\n            \n            // Initialize all systems\n            await this.initializeCoreSystems();\n            await this.initializeEconomyLayers();\n            await this.initializeTycoonSystem();\n            await this.initializeHashVerification();\n            await this.initializeReasoningDifferential();\n            \n            this.setupExpress();\n            this.startWebSocketServer();\n            this.startBackgroundProcessors();\n            \n            console.log(`🌐 Enhanced Economy Hub running on http://localhost:${this.port}`);\n            console.log(`🔌 WebSocket server on ws://localhost:${this.wsPort}`);\n            console.log('🚀 All subdomain routes active');\n            \n        } catch (error) {\n            console.error('❌ Failed to initialize enhanced economy hub:', error.message);\n            process.exit(1);\n        }\n    }\n    \n    async initializeCoreSystems() {\n        // Initialize game layer manager\n        await this.gameLayerManager.initializeLayer('towerDefense');\n        await this.gameLayerManager.initializeLayer('idleTycoon');\n        await this.gameLayerManager.initializeLayer('championLoot');\n        await this.gameLayerManager.initializeLayer('penguinHuddle');\n        \n        console.log('✅ Game layer manager initialized');\n    }\n    \n    async initializeEconomyLayers() {\n        for (const [name, layer] of Object.entries(this.economyLayers)) {\n            await layer.initialize();\n            console.log(`✅ ${name} economy layer initialized`);\n        }\n    }\n    \n    async initializeTycoonSystem() {\n        await this.tycoonSystem.initialize();\n        console.log('✅ Tycoon wrapper system initialized');\n    }\n    \n    async initializeHashVerification() {\n        await this.hashVerification.initialize();\n        console.log('✅ Hash verification (420) system initialized');\n    }\n    \n    async initializeReasoningDifferential() {\n        await this.reasoningDifferential.initialize();\n        console.log('✅ Reasoning differential machine initialized');\n    }\n    \n    setupExpress() {\n        this.app.use(express.json());\n        this.app.use(express.static('public'));\n        \n        // CORS middleware\n        this.app.use((req, res, next) => {\n            res.header('Access-Control-Allow-Origin', '*');\n            res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n            res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n            next();\n        });\n        \n        // Metrics middleware\n        this.app.use((req, res, next) => {\n            this.metrics.requests++;\n            next();\n        });\n        \n        // Subdomain routing middleware\n        this.app.use(this.handleSubdomainRouting.bind(this));\n        \n        // Main hub dashboard (default route)\n        this.app.get('/', this.serveMainDashboard.bind(this));\n        \n        // Core API routes\n        this.setupCoreAPIRoutes();\n        \n        // Game integration routes\n        this.setupGameRoutes();\n        \n        // Tycoon system routes\n        this.setupTycoonRoutes();\n        \n        // Hash verification routes\n        this.setupHashVerificationRoutes();\n        \n        // Browser extension API routes\n        this.setupBrowserExtensionRoutes();\n        \n        // Error handling\n        this.app.use((error, req, res, next) => {\n            this.metrics.errors++;\n            console.error('Express error:', error);\n            res.status(500).json({ error: 'Internal server error' });\n        });\n        \n        this.app.listen(this.port);\n    }\n    \n    handleSubdomainRouting(req, res, next) {\n        // Extract subdomain from host header\n        const host = req.get('host');\n        if (!host) return next();\n        \n        const subdomain = host.split('.')[0];\n        \n        // Check if we have a specific route for this subdomain\n        if (this.subdomainRoutes.has(subdomain)) {\n            req.subdomain = subdomain;\n            return this.subdomainRoutes.get(subdomain)(req, res);\n        }\n        \n        next();\n    }\n    \n    setupCoreAPIRoutes() {\n        // Economy layer APIs\n        this.app.get('/api/economies', async (req, res) => {\n            const stats = await this.getEconomyStats();\n            res.json(stats);\n        });\n        \n        this.app.post('/api/transaction', async (req, res) => {\n            const { type, from, to, amount, metadata } = req.body;\n            \n            // Route through tycoon system for proper timing\n            const result = await this.tycoonSystem.processTransaction({\n                type, from, to, amount, metadata\n            });\n            \n            res.json(result);\n        });\n        \n        this.app.get('/api/agents', this.getActiveAgents.bind(this));\n        this.app.get('/api/humans', this.getActiveHumans.bind(this));\n        \n        // NPC Registry APIs\n        this.app.get('/api/npc-registry', async (req, res) => {\n            const data = await this.npcRegistry.getStats();\n            res.json(data);\n        });\n        \n        this.app.post('/api/npc-registry/spawn', async (req, res) => {\n            const result = await this.npcRegistry.spawnAgent(req.body);\n            res.json(result);\n        });\n        \n        this.app.post('/api/ideas', async (req, res) => {\n            const result = await this.npcRegistry.submitIdea(req.body);\n            res.json(result);\n        });\n        \n        // System health endpoint\n        this.app.get('/api/health', (req, res) => {\n            res.json({\n                status: 'healthy',\n                timestamp: Date.now(),\n                uptime: process.uptime(),\n                memory: process.memoryUsage(),\n                metrics: this.metrics,\n                gameLayersActive: this.gameLayerManager.activeLayers.size,\n                economyLayersHealthy: Object.keys(this.economyLayers).length\n            });\n        });\n    }\n    \n    setupGameRoutes() {\n        // Game layer management\n        this.app.get('/api/game/layers', (req, res) => {\n            const layers = {};\n            for (const [name, layer] of this.gameLayerManager.activeLayers) {\n                layers[name] = this.gameLayerManager.getLayerStatus(name);\n            }\n            res.json({ layers });\n        });\n        \n        this.app.post('/api/game/action', async (req, res) => {\n            const { layer, action, data } = req.body;\n            \n            // Route through reasoning differential for timing\n            const result = await this.reasoningDifferential.processGameAction({\n                layer, action, data\n            });\n            \n            this.metrics.gameActions++;\n            res.json(result);\n        });\n        \n        // Cross-ring communication\n        this.app.post('/api/game/cross-ring', async (req, res) => {\n            const { fromLayer, toLayer, message } = req.body;\n            \n            await this.gameLayerManager.sendCrossRing(fromLayer, toLayer, message);\n            res.json({ success: true });\n        });\n    }\n    \n    setupTycoonRoutes() {\n        // Tycoon progression\n        this.app.get('/api/tycoon/progress/:userId', async (req, res) => {\n            const progress = await this.tycoonSystem.getUserProgress(req.params.userId);\n            res.json(progress);\n        });\n        \n        this.app.post('/api/tycoon/upgrade', async (req, res) => {\n            const { userId, upgradeType, cost } = req.body;\n            \n            // Check if user has earned the right to upgrade (patience requirement)\n            const canUpgrade = await this.tycoonSystem.checkUpgradeEligibility(userId, upgradeType);\n            \n            if (!canUpgrade.eligible) {\n                return res.json({\n                    success: false,\n                    message: 'Must wait for proper timing',\n                    timeRemaining: canUpgrade.timeRemaining\n                });\n            }\n            \n            const result = await this.tycoonSystem.processUpgrade(userId, upgradeType, cost);\n            this.metrics.tycoonActions++;\n            res.json(result);\n        });\n        \n        // Reward distribution\n        this.app.post('/api/tycoon/claim-reward', async (req, res) => {\n            const { userId, rewardType } = req.body;\n            \n            const result = await this.tycoonSystem.claimReward(userId, rewardType);\n            res.json(result);\n        });\n    }\n    \n    setupHashVerificationRoutes() {\n        // 420 verification endpoint\n        this.app.post('/api/hash/verify', async (req, res) => {\n            const { data, pattern } = req.body;\n            \n            const result = await this.hashVerification.verifyPattern(data, pattern);\n            \n            if (result.verified && result.pattern === '420') {\n                // Trigger tycoon reward\n                const reward = await this.tycoonSystem.trigger420Reward(req.body.userId);\n                result.tycoonReward = reward;\n            }\n            \n            this.metrics.hashVerifications++;\n            res.json(result);\n        });\n        \n        // Generate hash with pattern\n        this.app.post('/api/hash/generate', async (req, res) => {\n            const { targetPattern, difficulty } = req.body;\n            \n            const result = await this.hashVerification.generatePatternHash(targetPattern, difficulty);\n            res.json(result);\n        });\n    }\n    \n    setupBrowserExtensionRoutes() {\n        // Extension authentication\n        this.app.post('/api/extension/auth', async (req, res) => {\n            const { extensionId, version, userToken } = req.body;\n            \n            // Verify through obfuscation layer\n            const authResult = await this.obfuscationLayer.processRequest({\n                type: 'extension_auth',\n                extensionId,\n                version,\n                userToken\n            });\n            \n            res.json(authResult);\n        });\n        \n        // Trading data for extension\n        this.app.get('/api/extension/trading-data', async (req, res) => {\n            const { symbol, timeframe } = req.query;\n            \n            // Get trading data and run through game layers for enhancement\n            const tradingData = await this.getTradingData(symbol, timeframe);\n            const gameEnhanced = await this.gameLayerManager.sendCrossRing(\n                'championLoot', \n                'towerDefense', \n                { type: 'trading_analysis', data: tradingData }\n            );\n            \n            res.json({\n                tradingData,\n                gameEnhanced,\n                tycoonLevel: await this.tycoonSystem.getUserLevel(req.query.userId)\n            });\n        });\n        \n        // Plugin injection endpoint\n        this.app.post('/api/extension/inject-plugin', async (req, res) => {\n            const { pluginCode, targetSite, permissions } = req.body;\n            \n            // Security check through obfuscation layer\n            const securityCheck = await this.obfuscationLayer.processRequest({\n                type: 'plugin_injection',\n                code: pluginCode,\n                target: targetSite,\n                permissions\n            });\n            \n            if (!securityCheck.success) {\n                return res.status(403).json({ error: 'Plugin injection blocked' });\n            }\n            \n            res.json({ success: true, injectionToken: crypto.randomUUID() });\n        });\n    }\n    \n    // Subdomain interface handlers\n    async serveTradingInterface(req, res) {\n        const tradingHTML = await this.generateTradingInterface();\n        res.send(tradingHTML);\n    }\n    \n    async serveGameInterface(req, res) {\n        const gameHTML = await this.generateGameInterface();\n        res.send(gameHTML);\n    }\n    \n    async serveAPIInterface(req, res) {\n        const apiHTML = await this.generateAPIDocumentation();\n        res.send(apiHTML);\n    }\n    \n    async serveAdminInterface(req, res) {\n        const adminHTML = await this.generateAdminInterface();\n        res.send(adminHTML);\n    }\n    \n    async serveTycoonInterface(req, res) {\n        const tycoonHTML = await this.generateTycoonInterface();\n        res.send(tycoonHTML);\n    }\n    \n    async serveReasoningInterface(req, res) {\n        const reasoningHTML = await this.generateReasoningInterface();\n        res.send(reasoningHTML);\n    }\n    \n    async serveMainDashboard(req, res) {\n        try {\n            // Get comprehensive system data\n            const systemData = await this.getComprehensiveSystemData();\n            \n            const html = await this.generateMainDashboardHTML(systemData);\n            res.send(html);\n        } catch (error) {\n            console.error('Dashboard error:', error);\n            res.status(500).send('Dashboard error');\n        }\n    }\n    \n    async getComprehensiveSystemData() {\n        const [economyStats, gameLayerStats, tycoonStats, hashStats, reasoningStats, npcRegistry] = await Promise.all([\n            this.getEconomyStats(),\n            this.getGameLayerStats(),\n            this.tycoonSystem.getStats(),\n            this.hashVerification.getStats(),\n            this.reasoningDifferential.getStats(),\n            this.npcRegistry.getStats()\n        ]);\n        \n        return {\n            economy: economyStats,\n            gameLayers: gameLayerStats,\n            tycoon: tycoonStats,\n            hashVerification: hashStats,\n            reasoning: reasoningStats,\n            npcRegistry,\n            metrics: this.metrics,\n            activeConnections: this.wsConnections.size,\n            systemUptime: process.uptime()\n        };\n    }\n    \n    // Background processors\n    startBackgroundProcessors() {\n        // Process all economy layers every 5 seconds\n        setInterval(async () => {\n            for (const layer of Object.values(this.economyLayers)) {\n                try {\n                    await layer.process();\n                } catch (error) {\n                    console.error('Economy layer processing error:', error);\n                }\n            }\n        }, 5000);\n        \n        // Update tycoon progress every 10 seconds\n        setInterval(async () => {\n            try {\n                await this.tycoonSystem.updateAllProgression();\n            } catch (error) {\n                console.error('Tycoon progression error:', error);\n            }\n        }, 10000);\n        \n        // Run reasoning differential machine every 1 second\n        setInterval(async () => {\n            try {\n                await this.reasoningDifferential.processQueue();\n            } catch (error) {\n                console.error('Reasoning differential error:', error);\n            }\n        }, 1000);\n        \n        console.log('⚙️ Background processors started');\n    }\n    \n    // WebSocket server for real-time updates\n    startWebSocketServer() {\n        const wss = new WebSocket.Server({ port: this.wsPort });\n        \n        wss.on('connection', (ws) => {\n            const connectionId = crypto.randomUUID();\n            this.wsConnections.set(connectionId, ws);\n            \n            console.log(`🔌 Client connected: ${connectionId}`);\n            \n            ws.on('message', async (message) => {\n                try {\n                    const data = JSON.parse(message);\n                    await this.handleWebSocketMessage(ws, data, connectionId);\n                } catch (error) {\n                    console.error('WebSocket message error:', error);\n                }\n            });\n            \n            ws.on('close', () => {\n                this.wsConnections.delete(connectionId);\n                console.log(`🔌 Client disconnected: ${connectionId}`);\n            });\n        });\n        \n        this.wss = wss;\n    }\n    \n    async handleWebSocketMessage(ws, data, connectionId) {\n        switch (data.type) {\n            case 'subscribe_economy':\n                // Subscribe to specific economy layer updates\n                break;\n            case 'submit_game_action':\n                // Handle real-time game actions\n                const result = await this.reasoningDifferential.processGameAction(data.action);\n                ws.send(JSON.stringify({ type: 'game_action_result', result }));\n                break;\n            case 'tycoon_check':\n                // Check tycoon progress\n                const progress = await this.tycoonSystem.getUserProgress(data.userId);\n                ws.send(JSON.stringify({ type: 'tycoon_progress', progress }));\n                break;\n            default:\n                ws.send(JSON.stringify({ type: 'error', message: 'Unknown message type' }));\n        }\n    }\n    \n    // Broadcast to all connected clients\n    broadcast(message) {\n        const data = JSON.stringify(message);\n        for (const ws of this.wsConnections.values()) {\n            if (ws.readyState === WebSocket.OPEN) {\n                ws.send(data);\n            }\n        }\n    }\n    \n    // Helper methods\n    async getEconomyStats() {\n        const stats = {};\n        for (const [name, layer] of Object.entries(this.economyLayers)) {\n            try {\n                stats[name] = await layer.getStats();\n            } catch (error) {\n                console.error(`Error getting stats for ${name}:`, error.message);\n                stats[name] = {};\n            }\n        }\n        return stats;\n    }\n    \n    async getGameLayerStats() {\n        const stats = {};\n        for (const [name, layer] of this.gameLayerManager.activeLayers) {\n            stats[name] = this.gameLayerManager.getLayerStatus(name);\n        }\n        return stats;\n    }\n    \n    async getActiveAgents(req, res) {\n        try {\n            const result = await this.pgClient.query(`\n                SELECT agent_id, name, specialty, status, is_online, wallet_balance,\n                       level, reputation, last_active\n                FROM ai_agents \n                WHERE is_online = true OR last_active > NOW() - INTERVAL '1 hour'\n                ORDER BY reputation DESC\n                LIMIT 50\n            `);\n            \n            if (res) {\n                res.json({ agents: result.rows });\n            } else {\n                return result.rows;\n            }\n        } catch (error) {\n            console.error('Error fetching active agents:', error);\n            if (res) res.status(500).json({ error: 'Database error' });\n            return [];\n        }\n    }\n    \n    async getActiveHumans(req, res) {\n        try {\n            const result = await this.pgClient.query(`\n                SELECT username, role, tier, wallet_balance, level, reputation, last_login\n                FROM unified_users \n                WHERE last_login > NOW() - INTERVAL '24 hours'\n                ORDER BY reputation DESC\n                LIMIT 50\n            `);\n            \n            if (res) {\n                res.json({ humans: result.rows });\n            } else {\n                return result.rows;\n            }\n        } catch (error) {\n            console.error('Error fetching active humans:', error);\n            if (res) res.status(500).json({ error: 'Database error' });\n            return [];\n        }\n    }\n    \n    async getTradingData(symbol, timeframe) {\n        // Mock trading data - would connect to real APIs\n        return {\n            symbol,\n            timeframe,\n            price: 123.45,\n            change: 2.34,\n            volume: 1000000,\n            timestamp: Date.now()\n        };\n    }\n    \n    // HTML generators for different interfaces\n    async generateMainDashboardHTML(systemData) {\n        return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>🌐 Enhanced Economy Hub - Middle-Out Central Command</title>\n    <style>\n        body {\n            background: linear-gradient(135deg, #0f0f23, #1a1a2e, #16213e);\n            color: #fff;\n            font-family: 'Courier New', monospace;\n            margin: 0;\n            padding: 20px;\n            min-height: 100vh;\n        }\n        \n        .container {\n            max-width: 1800px;\n            margin: 0 auto;\n        }\n        \n        .header {\n            text-align: center;\n            padding: 20px 0;\n            border-bottom: 3px solid #00ff88;\n            margin-bottom: 30px;\n        }\n        \n        .header h1 {\n            margin: 0;\n            font-size: 2.5em;\n            text-shadow: 0 0 10px #00ff88;\n        }\n        \n        .subdomain-nav {\n            display: flex;\n            justify-content: center;\n            gap: 20px;\n            margin: 20px 0;\n            flex-wrap: wrap;\n        }\n        \n        .subdomain-link {\n            background: linear-gradient(45deg, #00ff88, #00cc6a);\n            color: #000;\n            padding: 10px 20px;\n            border-radius: 8px;\n            text-decoration: none;\n            font-weight: bold;\n            transition: all 0.3s ease;\n        }\n        \n        .subdomain-link:hover {\n            transform: scale(1.05);\n            box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);\n        }\n        \n        .system-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .system-panel {\n            background: rgba(0, 255, 136, 0.1);\n            border: 2px solid #00ff88;\n            border-radius: 12px;\n            padding: 20px;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .system-panel::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 4px;\n            background: linear-gradient(90deg, #00ff88, #00cc6a, #00ff88);\n            animation: flow 2s linear infinite;\n        }\n        \n        @keyframes flow {\n            0% { transform: translateX(-100%); }\n            100% { transform: translateX(100%); }\n        }\n        \n        .panel-title {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 15px;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .stats-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n            margin-bottom: 15px;\n        }\n        \n        .stat {\n            background: rgba(0, 0, 0, 0.3);\n            padding: 8px;\n            border-radius: 4px;\n            text-align: center;\n        }\n        \n        .stat-value {\n            font-size: 18px;\n            font-weight: bold;\n            color: #00ff88;\n        }\n        \n        .stat-label {\n            font-size: 12px;\n            color: #aaa;\n        }\n        \n        .tycoon-panel {\n            background: rgba(255, 136, 0, 0.1);\n            border: 2px solid #ff8800;\n        }\n        \n        .tycoon-panel::before {\n            background: linear-gradient(90deg, #ff8800, #ffaa00, #ff8800);\n        }\n        \n        .reasoning-panel {\n            background: rgba(136, 0, 255, 0.1);\n            border: 2px solid #8800ff;\n        }\n        \n        .reasoning-panel::before {\n            background: linear-gradient(90deg, #8800ff, #aa00ff, #8800ff);\n        }\n        \n        .hash-panel {\n            background: rgba(255, 0, 136, 0.1);\n            border: 2px solid #ff0088;\n        }\n        \n        .hash-panel::before {\n            background: linear-gradient(90deg, #ff0088, #ff00aa, #ff0088);\n        }\n        \n        .live-indicator {\n            display: inline-block;\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #00ff88;\n            margin-right: 8px;\n            animation: pulse 1s infinite;\n        }\n        \n        @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.3; }\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 20px;\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            overflow: hidden;\n            margin: 10px 0;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, #00ff88, #00cc6a);\n            transition: width 0.3s ease;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🌐 Enhanced Economy Hub</h1>\n            <p>Middle-Out Central Command • All Systems Converge Here</p>\n            <div class=\"live-indicator\"></div>\n            <span>LIVE SYSTEM</span>\n        </div>\n        \n        <div class=\"subdomain-nav\">\n            <a href=\"http://trading.localhost:${this.port}\" class=\"subdomain-link\">📈 Trading Interface</a>\n            <a href=\"http://game.localhost:${this.port}\" class=\"subdomain-link\">🎮 Game Interface</a>\n            <a href=\"http://tycoon.localhost:${this.port}\" class=\"subdomain-link\">🏭 Tycoon Interface</a>\n            <a href=\"http://api.localhost:${this.port}\" class=\"subdomain-link\">🔌 API Documentation</a>\n            <a href=\"http://admin.localhost:${this.port}\" class=\"subdomain-link\">⚙️ Admin Panel</a>\n            <a href=\"http://reasoning.localhost:${this.port}\" class=\"subdomain-link\">🧠 Reasoning Engine</a>\n        </div>\n        \n        <div class=\"system-grid\">\n            <!-- Economy Layers Panel -->\n            <div class=\"system-panel\">\n                <div class=\"panel-title\">\n                    💰 Economy Layers\n                    <span style=\"font-size: 12px; color: #aaa;\">(All Economic Interactions)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.economy.humanToHuman?.activeUsers || 0}</div>\n                        <div class=\"stat-label\">Human↔Human</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.economy.aiToHuman?.activeAgents || 0}</div>\n                        <div class=\"stat-label\">AI↔Human</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.economy.humanToAI?.activeDirections || 0}</div>\n                        <div class=\"stat-label\">Human↔AI</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.economy.aiToAI?.activeTrades || 0}</div>\n                        <div class=\"stat-label\">AI↔AI</div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Game Layers Panel -->\n            <div class=\"system-panel\">\n                <div class=\"panel-title\">\n                    🎮 Game Layers\n                    <span style=\"font-size: 12px; color: #aaa;\">(Ring Architecture)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${Object.keys(systemData.gameLayers || {}).length}</div>\n                        <div class=\"stat-label\">Active Layers</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.metrics.gameActions}</div>\n                        <div class=\"stat-label\">Game Actions</div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Tycoon System Panel -->\n            <div class=\"system-panel tycoon-panel\">\n                <div class=\"panel-title\">\n                    🏭 Tycoon Wrapper\n                    <span style=\"font-size: 12px; color: #aaa;\">(Patience & Rewards)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.tycoon?.activeUsers || 0}</div>\n                        <div class=\"stat-label\">Active Tycoons</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.metrics.tycoonActions}</div>\n                        <div class=\"stat-label\">Tycoon Actions</div>\n                    </div>\n                </div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" style=\"width: ${(systemData.tycoon?.globalProgress || 0) * 100}%\"></div>\n                </div>\n            </div>\n            \n            <!-- Hash Verification Panel -->\n            <div class=\"system-panel hash-panel\">\n                <div class=\"panel-title\">\n                    🔢 Hash Verification\n                    <span style=\"font-size: 12px; color: #aaa;\">(420 Pattern Recognition)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.hashVerification?.totalVerifications || 0}</div>\n                        <div class=\"stat-label\">Total Verifications</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.hashVerification?.pattern420Hits || 0}</div>\n                        <div class=\"stat-label\">420 Hits</div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Reasoning Differential Panel -->\n            <div class=\"system-panel reasoning-panel\">\n                <div class=\"panel-title\">\n                    🧠 Reasoning Differential\n                    <span style=\"font-size: 12px; color: #aaa;\">(Timing Controller)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.reasoning?.activeChains || 0}</div>\n                        <div class=\"stat-label\">Active Chains</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.reasoning?.decisionsPerMinute || 0}</div>\n                        <div class=\"stat-label\">Decisions/Min</div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- System Metrics Panel -->\n            <div class=\"system-panel\">\n                <div class=\"panel-title\">\n                    📊 System Metrics\n                    <span style=\"font-size: 12px; color: #aaa;\">(Performance)</span>\n                </div>\n                <div class=\"stats-grid\">\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.metrics.requests}</div>\n                        <div class=\"stat-label\">Total Requests</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.activeConnections}</div>\n                        <div class=\"stat-label\">WS Connections</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${Math.floor(systemData.systemUptime / 60)}m</div>\n                        <div class=\"stat-label\">Uptime</div>\n                    </div>\n                    <div class=\"stat\">\n                        <div class=\"stat-value\">${systemData.metrics.errors}</div>\n                        <div class=\"stat-label\">Errors</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        // WebSocket connection for live updates\n        const ws = new WebSocket('ws://localhost:${this.wsPort}');\n        \n        ws.onmessage = function(event) {\n            const data = JSON.parse(event.data);\n            handleLiveUpdate(data);\n        };\n        \n        function handleLiveUpdate(data) {\n            // Update dashboard with live data\n            console.log('Live update:', data);\n        }\n        \n        // Auto-refresh every 30 seconds\n        setInterval(() => {\n            location.reload();\n        }, 30000);\n    </script>\n</body>\n</html>\n        `;\n    }\n    \n    async generateTradingInterface() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>📈 Trading Interface</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>📈 Trading Interface</h1>\n        <p>Browser extension enhanced trading platform</p>\n        <p>Connected to central hub at port ${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n    \n    async generateGameInterface() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>🎮 Game Interface</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎮 Game Interface</h1>\n        <p>Game layer management interface</p>\n        <p>Connected to central hub at port ${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n    \n    async generateTycoonInterface() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>🏭 Tycoon Interface</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🏭 Tycoon Interface</h1>\n        <p>Patience and reward management system</p>\n        <p>Connected to central hub at port ${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n    \n    async generateAPIDocumentation() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>🔌 API Documentation</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔌 API Documentation</h1>\n        <p>Central hub API endpoints</p>\n        <p>Base URL: http://localhost:${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n    \n    async generateAdminInterface() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>⚙️ Admin Panel</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>⚙️ Admin Panel</h1>\n        <p>System administration interface</p>\n        <p>Connected to central hub at port ${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n    \n    async generateReasoningInterface() {\n        return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>🧠 Reasoning Engine</title>\n    <style>\n        body { background: #0f0f23; color: #fff; font-family: monospace; }\n        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🧠 Reasoning Engine</h1>\n        <p>Reasoning differential machine interface</p>\n        <p>Connected to central hub at port ${this.port}</p>\n    </div>\n</body>\n</html>\n        `;\n    }\n}\n\n// Supporting classes (stubs - would be fully implemented)\nclass TycoonWrapperSystem {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {\n        // Initialize tycoon system\n    }\n    \n    async processTransaction(transaction) {\n        // Process through tycoon timing logic\n        return { success: true, processed: true };\n    }\n    \n    async getUserProgress(userId) {\n        return { level: 1, progress: 0.5, resources: 100 };\n    }\n    \n    async checkUpgradeEligibility(userId, upgradeType) {\n        return { eligible: true, timeRemaining: 0 };\n    }\n    \n    async processUpgrade(userId, upgradeType, cost) {\n        return { success: true, newLevel: 2 };\n    }\n    \n    async claimReward(userId, rewardType) {\n        return { success: true, reward: 'patience_bonus' };\n    }\n    \n    async trigger420Reward(userId) {\n        return { success: true, reward: '420_verified', bonus: 100 };\n    }\n    \n    async getUserLevel(userId) {\n        return 5;\n    }\n    \n    async getStats() {\n        return { activeUsers: 10, globalProgress: 0.7 };\n    }\n    \n    async updateAllProgression() {\n        // Update all user progression\n    }\n}\n\nclass HashVerificationSystem {\n    async initialize() {\n        // Initialize hash verification\n    }\n    \n    async verifyPattern(data, pattern) {\n        const hash = crypto.createHash('sha256').update(data).digest('hex');\n        const verified = hash.includes(pattern);\n        return { verified, pattern: verified ? pattern : null, hash };\n    }\n    \n    async generatePatternHash(targetPattern, difficulty) {\n        // Generate hash with specific pattern\n        return { hash: 'generated_hash', pattern: targetPattern };\n    }\n    \n    async getStats() {\n        return { totalVerifications: 42, pattern420Hits: 7 };\n    }\n}\n\nclass ReasoningDifferentialMachine {\n    constructor() {\n        this.actionQueue = [];\n    }\n    \n    async initialize() {\n        // Initialize reasoning machine\n    }\n    \n    async processGameAction(action) {\n        // Add timing logic here\n        this.actionQueue.push(action);\n        return { success: true, queued: true };\n    }\n    \n    async processQueue() {\n        // Process queued actions with proper timing\n        if (this.actionQueue.length > 0) {\n            const action = this.actionQueue.shift();\n            // Process action with timing logic\n        }\n    }\n    \n    async getStats() {\n        return { activeChains: 3, decisionsPerMinute: 45 };\n    }\n}\n\n// Economy layer classes (from original)\nclass HumanToHumanEconomy {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return { activeUsers: 25, volume: 15420, transactions: 142 };\n    }\n    \n    async process() {}\n}\n\nclass AIToHumanEconomy {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return { activeAgents: 18, completedTasks: 89, revenue: 2340 };\n    }\n    \n    async process() {}\n}\n\nclass HumanToAIEconomy {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return { activeDirections: 45, aiCredits: 12500, efficiency: 87 };\n    }\n    \n    async process() {}\n}\n\nclass AIToAIEconomy {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return { activeTrades: 12, agentAlliances: 6, volume: 8900 };\n    }\n    \n    async process() {}\n}\n\nclass ReasoningEconomy {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return {\n            activeReasoningChains: 8,\n            decisionsPerHour: 156,\n            consensusRate: 94,\n            reasoningCredits: 3400\n        };\n    }\n    \n    async process() {}\n}\n\nclass NPCRegistry {\n    constructor(pgClient) {\n        this.pgClient = pgClient;\n    }\n    \n    async initialize() {}\n    \n    async getStats() {\n        return {\n            totalIdeas: 15,\n            readyToBuild: 3,\n            builtAgents: 8,\n            activeNPCs: 5\n        };\n    }\n    \n    async spawnAgent(data) {\n        return { success: true, agentId: 'npc_' + Date.now() };\n    }\n    \n    async submitIdea(idea) {\n        return { success: true, ideaId: 'idea_' + Date.now() };\n    }\n}\n\n// Start the Enhanced Economy Hub\nif (require.main === module) {\n    const hub = new EnhancedEconomyHub();\n    \n    process.on('SIGINT', async () => {\n        console.log('\\n🛑 Shutting down Enhanced Economy Hub...');\n        if (hub.pgClient) {\n            await hub.pgClient.end();\n        }\n        process.exit(0);\n    });\n}\n\nmodule.exports = EnhancedEconomyHub;