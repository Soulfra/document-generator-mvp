import SwiftUI

struct CreateBossView: View {
    @StateObject private var viewModel = CreateBossViewModel()
    @Environment(\.dismiss) var dismiss
    @State private var showingImagePicker = false
    @State private var showingSuccessAlert = false
    
    var body: some View {
        NavigationView {
            Form {
                // Boss Info Section
                Section {
                    TextField("Boss Name", text: $viewModel.name)
                        .autocapitalization(.words)
                    
                    TextField("Description", text: $viewModel.description, axis: .vertical)
                        .lineLimit(3...6)
                } header: {
                    Label("Boss Information", systemImage: "info.circle")
                }
                
                // Stats Section
                Section {
                    StatSlider(
                        label: "Health",
                        value: $viewModel.health,
                        range: 100...2000,
                        step: 50,
                        color: .red,
                        icon: "heart.fill"
                    )
                    
                    StatSlider(
                        label: "Damage",
                        value: $viewModel.damage,
                        range: 10...200,
                        step: 5,
                        color: .orange,
                        icon: "bolt.fill"
                    )
                    
                    StatSlider(
                        label: "Speed",
                        value: $viewModel.speed,
                        range: 1...10,
                        step: 1,
                        color: .blue,
                        icon: "hare.fill"
                    )
                    
                    // Boss Rating Preview
                    BossRatingPreview(
                        health: viewModel.health,
                        damage: viewModel.damage,
                        speed: viewModel.speed
                    )
                } header: {
                    Label("Combat Stats", systemImage: "chart.bar")
                }
                
                // Special Ability Section
                Section {
                    Toggle("Has Special Ability", isOn: $viewModel.hasSpecialAbility)
                    
                    if viewModel.hasSpecialAbility {
                        TextField("Ability Name", text: $viewModel.specialAbility)
                        
                        TextField("Ability Description", text: $viewModel.abilityDescription, axis: .vertical)
                            .lineLimit(2...4)
                    }
                } header: {
                    Label("Special Ability", systemImage: "sparkles")
                }
                
                // Visual Customization
                Section {
                    ColorPicker("Primary Color", selection: $viewModel.primaryColor)
                    
                    HStack {
                        Text("Boss Icon")
                        Spacer()
                        Image(systemName: viewModel.selectedIcon)
                            .font(.title2)
                            .foregroundColor(viewModel.primaryColor)
                    }
                    .contentShape(Rectangle())
                    .onTapGesture {
                        // Show icon picker
                    }
                } header: {
                    Label("Visual Style", systemImage: "paintbrush")
                }
                
                // Revenue Settings
                Section {
                    Toggle("Enable Revenue Sharing", isOn: $viewModel.enableRevenue)
                    
                    if viewModel.enableRevenue {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("Revenue Split")
                                .font(.subheadline)
                            
                            HStack(spacing: 20) {
                                RevenueDisplay(label: "You", percentage: 70, color: .green)
                                RevenueDisplay(label: "Platform", percentage: 25, color: .blue)
                                RevenueDisplay(label: "Host", percentage: 5, color: .orange)
                            }
                        }
                    }
                } header: {
                    Label("Monetization", systemImage: "dollarsign.circle")
                } footer: {
                    if viewModel.enableRevenue {
                        Text("You'll earn 70% of all revenue generated by your boss in battles.")
                    }
                }
                
                // Kingdom Settings
                Section {
                    Toggle("Create Kingdom", isOn: $viewModel.createKingdom)
                    
                    if viewModel.createKingdom {
                        TextField("Kingdom Name", text: $viewModel.kingdomName)
                            .autocapitalization(.words)
                    }
                } header: {
                    Label("Kingdom", systemImage: "crown")
                } footer: {
                    if viewModel.createKingdom {
                        Text("As the boss creator, you'll become the ruler of this kingdom.")
                    }
                }
            }
            .navigationTitle("Create Boss")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Create") {
                        createBoss()
                    }
                    .fontWeight(.semibold)
                    .disabled(!viewModel.isValid)
                }
            }
            .alert("Boss Created!", isPresented: $showingSuccessAlert) {
                Button("View Boss") {
                    dismiss()
                    // Navigate to boss detail
                }
                Button("Create Another") {
                    viewModel.reset()
                }
            } message: {
                Text("Your boss \"\(viewModel.name)\" has been created successfully!")
            }
        }
    }
    
    private func createBoss() {
        Task {
            let success = await viewModel.createBoss()
            if success {
                showingSuccessAlert = true
            }
        }
    }
}

// MARK: - Stat Slider
struct StatSlider: View {
    let label: String
    @Binding var value: Double
    let range: ClosedRange<Double>
    let step: Double
    let color: Color
    let icon: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Label(label, systemImage: icon)
                    .foregroundColor(color)
                Spacer()
                Text("\(Int(value))")
                    .fontWeight(.semibold)
                    .foregroundColor(color)
            }
            
            Slider(value: $value, in: range, step: step)
                .tint(color)
        }
    }
}

// MARK: - Boss Rating Preview
struct BossRatingPreview: View {
    let health: Double
    let damage: Double
    let speed: Double
    
    var totalPower: Int {
        Int(health / 10 + damage * 2 + speed * 10)
    }
    
    var difficulty: String {
        switch totalPower {
        case 0..<200:
            return "Easy"
        case 200..<400:
            return "Medium"
        case 400..<600:
            return "Hard"
        case 600..<800:
            return "Expert"
        default:
            return "Legendary"
        }
    }
    
    var difficultyColor: Color {
        switch difficulty {
        case "Easy":
            return .green
        case "Medium":
            return .yellow
        case "Hard":
            return .orange
        case "Expert":
            return .red
        default:
            return .purple
        }
    }
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text("Power Rating")
                    .font(.caption)
                    .foregroundColor(.secondary)
                Text("\(totalPower)")
                    .font(.title2)
                    .fontWeight(.bold)
            }
            
            Spacer()
            
            VStack(alignment: .trailing, spacing: 4) {
                Text("Difficulty")
                    .font(.caption)
                    .foregroundColor(.secondary)
                Text(difficulty)
                    .font(.title3)
                    .fontWeight(.semibold)
                    .foregroundColor(difficultyColor)
            }
        }
        .padding(.vertical, 8)
    }
}

// MARK: - Revenue Display
struct RevenueDisplay: View {
    let label: String
    let percentage: Int
    let color: Color
    
    var body: some View {
        VStack(spacing: 4) {
            Text("\(percentage)%")
                .font(.headline)
                .foregroundColor(color)
            Text(label)
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 8)
        .background(color.opacity(0.1))
        .cornerRadius(8)
    }
}

// MARK: - View Model
class CreateBossViewModel: ObservableObject {
    @Published var name = ""
    @Published var description = ""
    @Published var health: Double = 500
    @Published var damage: Double = 50
    @Published var speed: Double = 5
    @Published var hasSpecialAbility = false
    @Published var specialAbility = ""
    @Published var abilityDescription = ""
    @Published var primaryColor = Color.red
    @Published var selectedIcon = "shield.fill"
    @Published var enableRevenue = true
    @Published var createKingdom = true
    @Published var kingdomName = ""
    
    var isValid: Bool {
        !name.isEmpty && name.count >= 3
    }
    
    func createBoss() async -> Bool {
        // API call to create boss
        let bossData = BossCreationData(
            name: name,
            description: description,
            health: Int(health),
            damage: Int(damage),
            speed: Int(speed),
            specialAbility: hasSpecialAbility ? specialAbility : nil,
            abilityDescription: hasSpecialAbility ? abilityDescription : nil,
            primaryColor: primaryColor.hexString,
            icon: selectedIcon,
            enableRevenue: enableRevenue,
            createKingdom: createKingdom,
            kingdomName: createKingdom ? (kingdomName.isEmpty ? "\(name)'s Kingdom" : kingdomName) : nil
        )
        
        // Simulate API call
        try? await Task.sleep(nanoseconds: 1_000_000_000)
        return true
    }
    
    func reset() {
        name = ""
        description = ""
        health = 500
        damage = 50
        speed = 5
        hasSpecialAbility = false
        specialAbility = ""
        abilityDescription = ""
        primaryColor = .red
        selectedIcon = "shield.fill"
        enableRevenue = true
        createKingdom = true
        kingdomName = ""
    }
}

// MARK: - Boss Creation Data
struct BossCreationData: Codable {
    let name: String
    let description: String
    let health: Int
    let damage: Int
    let speed: Int
    let specialAbility: String?
    let abilityDescription: String?
    let primaryColor: String
    let icon: String
    let enableRevenue: Bool
    let createKingdom: Bool
    let kingdomName: String?
}

// MARK: - Color Extension
extension Color {
    var hexString: String {
        let components = UIColor(self).cgColor.components ?? [0, 0, 0, 1]
        let r = Int(components[0] * 255)
        let g = Int(components[1] * 255)
        let b = Int(components[2] * 255)
        return String(format: "#%02X%02X%02X", r, g, b)
    }
}

// MARK: - Preview
struct CreateBossView_Previews: PreviewProvider {
    static var previews: some View {
        CreateBossView()
    }
}