#!/usr/bin/env node

/**
 * SOULFRA MOBILE-DESKTOP OPERATING SYSTEM
 * 
 * Complete mobile-desktop OS with QR pairing, voice interaction, and agent integration.
 * This replaces GitHub Desktop with a full cross-device development experience.
 * 
 * Features:
 * - QR code mobile-desktop pairing
 * - Voice interaction with agent orchestration  
 * - Canvas parent-child architecture
 * - Complete onboarding experience
 * - Clean GitHub shipping with private vault protection
 * - Integration with all existing agent systems
 */

const express = require('express');
const WebSocket = require('ws');
const crypto = require('crypto');
const QRCode = require('qrcode');
const jwt = require('jsonwebtoken');
const { Client } = require('pg');
const fs = require('fs').promises;
const path = require('path');
const { spawn } = require('child_process');

// Import existing agent systems
const AgenticOS = require('./AGENTIC-OPERATING-SYSTEM.js');
const AgentInterfaceBridge = require('./agent-interface-bridge.js');

class SoulfraMobileDesktopOS {
    constructor() {
        this.app = express();
        this.port = process.env.PORT || 3333;
        this.wsPort = process.env.WS_PORT || 3334;
        
        // Core Operating System Components
        this.agenticOS = null;
        this.agentBridge = null;
        
        // Enhanced Device pairing and canvas system
        this.devicePairs = new Map(); // deviceId -> DeviceInfo
        this.canvasSessions = new Map(); // sessionId -> CanvasSession
        this.wsConnections = new Map(); // connectionId -> WebSocket
        this.pairingCodes = new Map(); // qrCode -> PairingSession
        this.authTokens = new Map(); // token -> SessionData
        
        // Voice interaction system
        this.voiceCommands = new Map();
        this.activeVoiceSessions = new Map();
        
        // GitHub integration
        this.gitOperations = new Map();
        this.privateVault = new Map();
        
        // Onboarding system
        this.onboardingFlows = new Map();
        this.userProfiles = new Map();
        
        console.log('🚀 SOULFRA MOBILE-DESKTOP OPERATING SYSTEM');
        console.log('==========================================');
        console.log('🤖 Full OS with agent integration');
        console.log('📱 Mobile-desktop QR pairing');
        console.log('🗣️  Voice interaction system');
        console.log('🎨 Canvas parent-child architecture');
        console.log('🔒 GitHub wrapper with vault protection');
        
        this.initialize();
    }
    
    async initialize() {
        try {
            // Initialize core systems
            await this.initializeCoreOS();
            await this.setupDatabase();
            await this.setupWebServer();
            await this.setupWebSocketServer();
            await this.setupVoiceSystem();
            await this.setupGitHubIntegration();
            await this.startOnboardingService();
            
            console.log(`\n✅ SoulFra Mobile-Desktop OS running:`);
            console.log(`   🖥️  Desktop: http://localhost:${this.port}`);
            console.log(`   📱 Mobile: http://localhost:${this.port}/mobile`);
            console.log(`   🔌 WebSocket: ws://localhost:${this.wsPort}`);
            console.log(`   🗣️  Voice API: http://localhost:${this.port}/voice`);
            console.log(`   🔄 Git Wrapper: http://localhost:${this.port}/git`);
            
        } catch (error) {
            console.error('❌ OS initialization failed:', error);
            process.exit(1);
        }
    }
    
    async initializeCoreOS() {
        console.log('🤖 Initializing Agent Operating System...');
        
        // Start the AGENTIC-OPERATING-SYSTEM
        try {
            this.agenticOS = new AgenticOS();
            await new Promise(resolve => {
                this.agenticOS.once('systemReady', resolve);
            });
            console.log('✅ Agentic OS operational');
        } catch (error) {
            console.log('⚠️  Running in fallback mode without full agent OS');
        }
        
        // Start the agent interface bridge
        this.agentBridge = new AgentInterfaceBridge({ port: 9999 });
        await this.agentBridge.start();
        console.log('✅ Agent interface bridge connected');
    }
    
    async setupDatabase() {
        this.db = new Client({
            host: process.env.DB_HOST || 'localhost',
            port: process.env.DB_PORT || 5432,
            database: process.env.DB_NAME || 'document_generator',
            user: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASSWORD || 'postgres'
        });
        
        try {
            await this.db.connect();
            
            // Create OS-specific tables
            await this.db.query(`
                CREATE TABLE IF NOT EXISTS mobile_desktop_pairs (
                    id SERIAL PRIMARY KEY,
                    session_id VARCHAR(255) UNIQUE NOT NULL,
                    desktop_device_id VARCHAR(255) NOT NULL,
                    mobile_device_id VARCHAR(255),
                    pairing_status VARCHAR(50) DEFAULT 'pending',
                    canvas_state JSONB DEFAULT '{}',
                    voice_enabled BOOLEAN DEFAULT false,
                    agent_access_level VARCHAR(50) DEFAULT 'basic',
                    onboarding_complete BOOLEAN DEFAULT false,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_sync TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                
                CREATE TABLE IF NOT EXISTS voice_commands (
                    id SERIAL PRIMARY KEY,
                    session_id VARCHAR(255) NOT NULL,
                    command_text TEXT NOT NULL,
                    command_type VARCHAR(50) NOT NULL,
                    agent_assigned VARCHAR(100),
                    execution_status VARCHAR(50) DEFAULT 'pending',
                    result JSONB,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                
                CREATE TABLE IF NOT EXISTS git_operations (
                    id SERIAL PRIMARY KEY,
                    session_id VARCHAR(255) NOT NULL,
                    operation_type VARCHAR(50) NOT NULL,
                    repository_path TEXT NOT NULL,
                    files_affected JSONB,
                    private_files_held JSONB,
                    commit_hash VARCHAR(255),
                    status VARCHAR(50) DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                
                CREATE TABLE IF NOT EXISTS onboarding_progress (
                    id SERIAL PRIMARY KEY,
                    session_id VARCHAR(255) NOT NULL,
                    step_name VARCHAR(100) NOT NULL,
                    step_status VARCHAR(50) DEFAULT 'pending',
                    step_data JSONB,
                    completed_at TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            `);
            
            console.log('✅ Mobile-Desktop OS database ready');
        } catch (error) {
            console.log('⚠️  Database unavailable, using in-memory storage');
            this.db = null;
        }
    }
    
    async setupWebServer() {
        this.app.use(express.json({ limit: '50mb' }));
        this.app.use(express.urlencoded({ extended: true, limit: '50mb' }));
        
        // CORS for cross-device communication
        this.app.use((req, res, next) => {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
            res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Device-ID');
            next();
        });
        
        // Desktop OS Interface
        this.app.get('/', this.serveDesktopOS.bind(this));\n        this.app.get('/desktop', this.serveDesktopOS.bind(this));
        \n        // Mobile OS Interface\n        this.app.get('/mobile', this.serveMobileOS.bind(this));\n        this.app.get('/mobile/*', this.serveMobileOS.bind(this));
        \n        // QR Code Pairing API\n        this.app.post('/api/pairing/initiate', this.initiatePairing.bind(this));\n        this.app.post('/api/pairing/scan', this.handlePairingScan.bind(this));\n        this.app.post('/api/pairing/approve', this.approvePairing.bind(this));\n        this.app.get('/api/pairing/:sessionId/status', this.getPairingStatus.bind(this));\n        \n        // Voice Interaction API\n        this.app.post('/api/voice/command', this.handleVoiceCommand.bind(this));\n        this.app.post('/api/voice/agent-delegate', this.delegateToAgent.bind(this));\n        this.app.get('/api/voice/status', this.getVoiceStatus.bind(this));\n        \n        // Canvas Synchronization API\n        this.app.post('/api/canvas/sync', this.syncCanvasState.bind(this));\n        this.app.get('/api/canvas/:sessionId/state', this.getCanvasState.bind(this));\n        \n        // GitHub Wrapper API\n        this.app.post('/api/git/commit', this.handleGitCommit.bind(this));\n        this.app.post('/api/git/push', this.handleGitPush.bind(this));\n        this.app.post('/api/git/approve-mobile', this.approveGitOperationMobile.bind(this));\n        this.app.get('/api/git/status', this.getGitStatus.bind(this));\n        \n        // Onboarding API\n        this.app.post('/api/onboarding/start', this.startOnboarding.bind(this));\n        this.app.post('/api/onboarding/step', this.completeOnboardingStep.bind(this));\n        this.app.get('/api/onboarding/:sessionId/progress', this.getOnboardingProgress.bind(this));\n        \n        // Agent Integration API (proxy to agent bridge)\n        this.app.use('/api/agents', this.proxyToAgentBridge.bind(this));\n        \n        this.server = this.app.listen(this.port);\n    }\n    \n    async setupWebSocketServer() {\n        this.wss = new WebSocket.Server({ port: this.wsPort });\n        \n        this.wss.on('connection', (ws, req) => {\n            const connectionId = crypto.randomUUID();\n            const deviceType = req.headers['x-device-type'] || 'unknown';\n            const sessionId = req.headers['x-session-id'];\n            \n            console.log(`📱 ${deviceType} device connected: ${connectionId}`);\n            \n            // Store connection\n            this.wsConnections.set(connectionId, {\n                ws,\n                deviceType,\n                sessionId,\n                connectionId,\n                lastPing: Date.now()\n            });\n            \n            // Handle messages\n            ws.on('message', (data) => {\n                this.handleWebSocketMessage(connectionId, data);\n            });\n            \n            // Handle disconnect\n            ws.on('close', () => {\n                console.log(`📱 Device disconnected: ${connectionId}`);\n                this.wsConnections.delete(connectionId);\n            });\n            \n            // Send welcome message\n            ws.send(JSON.stringify({\n                type: 'connected',\n                connectionId,\n                deviceType,\n                osVersion: '1.0.0'\n            }));\n        });\n        \n        console.log('✅ WebSocket server ready for cross-device sync');\n    }\n    \n    async setupVoiceSystem() {\n        // Initialize voice command recognition\n        this.voiceCommands.set('delegate', {\n            pattern: /delegate|assign|send to agent/i,\n            handler: this.handleVoiceDelegate.bind(this)\n        });\n        \n        this.voiceCommands.set('commit', {\n            pattern: /commit|save|git commit/i,\n            handler: this.handleVoiceCommit.bind(this)\n        });\n        \n        this.voiceCommands.set('status', {\n            pattern: /status|show me|what's happening/i,\n            handler: this.handleVoiceStatus.bind(this)\n        });\n        \n        this.voiceCommands.set('agents', {\n            pattern: /agents|show agents|agent status/i,\n            handler: this.handleVoiceAgents.bind(this)\n        });\n        \n        console.log('✅ Voice interaction system ready');\n    }\n    \n    async setupGitHubIntegration() {\n        // Initialize clean workspace for GitHub operations\n        this.cleanupWorkspace = path.join(__dirname, 'cleanup-workspace');\n        this.privateVaultPath = path.join(__dirname, '.vault');\n        \n        try {\n            await fs.access(this.cleanupWorkspace);\n            console.log('✅ Clean workspace found for GitHub operations');\n        } catch {\n            console.log('⚠️  Creating clean workspace for GitHub operations');\n            await fs.mkdir(this.cleanupWorkspace, { recursive: true });\n        }\n        \n        console.log('✅ GitHub wrapper ready with vault protection');\n    }\n    \n    async startOnboardingService() {\n        // Pre-defined onboarding flows\n        this.onboardingFlows.set('developer', {\n            steps: [\n                { name: 'pair-mobile', title: 'Pair Your Mobile Device', required: true },\n                { name: 'voice-setup', title: 'Set Up Voice Commands', required: false },\n                { name: 'agent-intro', title: 'Meet Your AI Agents', required: true },\n                { name: 'git-setup', title: 'Connect GitHub Account', required: true },\n                { name: 'first-project', title: 'Create Your First Project', required: true }\n            ]\n        });\n        \n        this.onboardingFlows.set('business', {\n            steps: [\n                { name: 'pair-mobile', title: 'Pair Your Mobile Device', required: true },\n                { name: 'voice-setup', title: 'Set Up Voice Commands', required: true },\n                { name: 'business-agents', title: 'Configure Business Agents', required: true },\n                { name: 'automation-setup', title: 'Set Up Automation', required: false },\n                { name: 'first-mvp', title: 'Generate Your First MVP', required: true }\n            ]\n        });\n        \n        console.log('✅ Onboarding service ready');\n    }\n    \n    // Desktop OS Interface\n    async serveDesktopOS(req, res) {\n        const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SoulFra Mobile-Desktop OS</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);\n            color: #00ff88;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .os-header {\n            background: rgba(0, 255, 136, 0.1);\n            border-bottom: 1px solid #00ff88;\n            padding: 1rem 2rem;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .os-title {\n            font-size: 1.5rem;\n            font-weight: bold;\n            text-shadow: 0 0 10px #00ff88;\n        }\n        \n        .device-status {\n            display: flex;\n            gap: 1rem;\n            align-items: center;\n        }\n        \n        .status-indicator {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: #ff6666;\n            animation: pulse 2s infinite;\n        }\n        \n        .status-indicator.connected {\n            background: #00ff88;\n        }\n        \n        .main-workspace {\n            flex: 1;\n            display: grid;\n            grid-template-areas: \n                \"pairing canvas agents\"\n                \"voice git-ops monitoring\";\n            grid-template-rows: 1fr 1fr;\n            grid-template-columns: 300px 1fr 300px;\n            gap: 1rem;\n            padding: 1rem;\n        }\n        \n        .workspace-panel {\n            background: rgba(0, 255, 136, 0.05);\n            border: 1px solid rgba(0, 255, 136, 0.3);\n            border-radius: 10px;\n            padding: 1rem;\n            overflow-y: auto;\n        }\n        \n        .pairing-panel { grid-area: pairing; }\n        .canvas-panel { grid-area: canvas; }\n        .agents-panel { grid-area: agents; }\n        .voice-panel { grid-area: voice; }\n        .git-panel { grid-area: git-ops; }\n        .monitoring-panel { grid-area: monitoring; }\n        \n        .panel-title {\n            font-size: 1.2rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            color: #00ffcc;\n            border-bottom: 1px solid rgba(0, 255, 136, 0.3);\n            padding-bottom: 0.5rem;\n        }\n        \n        .qr-container {\n            text-align: center;\n            padding: 2rem;\n        }\n        \n        .qr-code {\n            background: white;\n            padding: 1rem;\n            border-radius: 10px;\n            margin: 1rem 0;\n            display: inline-block;\n        }\n        \n        .big-button {\n            background: linear-gradient(45deg, #00ff88, #00ccff);\n            color: #000;\n            border: none;\n            padding: 1rem 2rem;\n            border-radius: 10px;\n            font-size: 1.1rem;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            margin: 0.5rem 0;\n        }\n        \n        .big-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 12px rgba(0, 255, 136, 0.3);\n        }\n        \n        .canvas-workspace {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            min-height: 400px;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .agent-item {\n            background: rgba(0, 255, 136, 0.1);\n            border: 1px solid rgba(0, 255, 136, 0.3);\n            border-radius: 5px;\n            padding: 0.5rem;\n            margin: 0.5rem 0;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        \n        .agent-item:hover {\n            background: rgba(0, 255, 136, 0.2);\n        }\n        \n        .voice-controls {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .voice-button {\n            background: rgba(255, 102, 102, 0.2);\n            border: 1px solid #ff6666;\n            color: #ff6666;\n            padding: 0.8rem;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n        \n        .voice-button:hover {\n            background: rgba(255, 102, 102, 0.3);\n        }\n        \n        .voice-button.active {\n            background: #ff6666;\n            color: #000;\n        }\n        \n        @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.5; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"os-header\">\n        <div class=\"os-title\">🤖 SoulFra Mobile-Desktop OS</div>\n        <div class=\"device-status\">\n            <span>Mobile:</span>\n            <div class=\"status-indicator\" id=\"mobileStatus\"></div>\n            <span>Agents:</span>\n            <div class=\"status-indicator connected\" id=\"agentStatus\"></div>\n            <span>Voice:</span>\n            <div class=\"status-indicator\" id=\"voiceStatus\"></div>\n        </div>\n    </div>\n    \n    <div class=\"main-workspace\">\n        <div class=\"workspace-panel pairing-panel\">\n            <div class=\"panel-title\">📱 Mobile Pairing</div>\n            <div class=\"qr-container\">\n                <div>Scan QR code with your mobile device:</div>\n                <div class=\"qr-code\" id=\"qrCode\">\n                    <!-- QR code will be generated here -->\n                    <div style=\"width: 150px; height: 150px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; color: #666;\">\n                        Loading QR...\n                    </div>\n                </div>\n                <button class=\"big-button\" onclick=\"generateNewQR()\">Generate New QR</button>\n            </div>\n        </div>\n        \n        <div class=\"workspace-panel canvas-panel\">\n            <div class=\"panel-title\">🎨 Shared Canvas</div>\n            <div class=\"canvas-workspace\" id=\"sharedCanvas\">\n                <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; opacity: 0.5;\">\n                    <div>📱 Pair your mobile device to start</div>\n                    <div style=\"font-size: 0.9rem; margin-top: 0.5rem;\">Canvas will sync between devices</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"workspace-panel agents-panel\">\n            <div class=\"panel-title\">🤖 AI Agents</div>\n            <div id=\"agentsList\">\n                <div class=\"agent-item\" onclick=\"showAgent('orchestrator')\">\n                    <div>🎯 Agent Orchestrator</div>\n                    <div style=\"font-size: 0.8rem; opacity: 0.7;\">Managing 6 agents</div>\n                </div>\n                <div class=\"agent-item\" onclick=\"showAgent('git')\">\n                    <div>🔄 Git Agent</div>\n                    <div style=\"font-size: 0.8rem; opacity: 0.7;\">Handling commits</div>\n                </div>\n                <div class=\"agent-item\" onclick=\"showAgent('voice')\">\n                    <div>🗣️ Voice Agent</div>\n                    <div style=\"font-size: 0.8rem; opacity: 0.7;\">Ready for commands</div>\n                </div>\n                <div class=\"agent-item\" onclick=\"showAgent('document')\">\n                    <div>📄 Document Agent</div>\n                    <div style=\"font-size: 0.8rem; opacity: 0.7;\">Processing docs</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"workspace-panel voice-panel\">\n            <div class=\"panel-title\">🗣️ Voice Commands</div>\n            <div class=\"voice-controls\">\n                <button class=\"voice-button\" onclick=\"startVoiceCommand()\">🎤 Start Voice Command</button>\n                <button class=\"voice-button\" onclick=\"testVoice('delegate')\">Test: \"Delegate this to agents\"</button>\n                <button class=\"voice-button\" onclick=\"testVoice('commit')\">Test: \"Commit changes\"</button>\n                <button class=\"voice-button\" onclick=\"testVoice('status')\">Test: \"Show agent status\"</button>\n                <div id=\"voiceResult\" style=\"margin-top: 1rem; padding: 0.5rem; background: rgba(0,0,0,0.3); border-radius: 5px; min-height: 60px;\">\n                    Voice results will appear here...\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"workspace-panel git-panel\">\n            <div class=\"panel-title\">🔄 GitHub Operations</div>\n            <div>\n                <button class=\"big-button\" onclick=\"showGitStatus()\">📊 Show Git Status</button>\n                <button class=\"big-button\" onclick=\"commitChanges()\">💾 Commit Changes</button>\n                <button class=\"big-button\" onclick=\"pushToGitHub()\">🚀 Push to GitHub</button>\n                <div id=\"gitResult\" style=\"margin-top: 1rem; padding: 0.5rem; background: rgba(0,0,0,0.3); border-radius: 5px; min-height: 100px; font-size: 0.9rem;\">\n                    Git operations will appear here...\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"workspace-panel monitoring-panel\">\n            <div class=\"panel-title\">📊 System Monitor</div>\n            <div id=\"systemStats\">\n                <div style=\"margin-bottom: 0.5rem;\">🤖 Agents: <span style=\"color: #00ff88;\">Active</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">📱 Mobile: <span style=\"color: #ff6666;\">Disconnected</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">🗣️ Voice: <span style=\"color: #ffff00;\">Ready</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">🔄 Git: <span style=\"color: #00ff88;\">Clean</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">💾 Vault: <span style=\"color: #00ff88;\">Secure</span></div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        let ws = null;\n        let sessionId = null;\n        let mobileConnected = false;\n        \n        // Initialize WebSocket connection\n        function initWebSocket() {\n            ws = new WebSocket('ws://localhost:3334');\n            \n            ws.onopen = () => {\n                console.log('Desktop OS connected to WebSocket');\n                ws.send(JSON.stringify({\n                    type: 'device-register',\n                    deviceType: 'desktop',\n                    sessionId: sessionId\n                }));\n            };\n            \n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                handleWebSocketMessage(data);\n            };\n            \n            ws.onclose = () => {\n                console.log('WebSocket disconnected, reconnecting...');\n                setTimeout(initWebSocket, 3000);\n            };\n        }\n        \n        function handleWebSocketMessage(data) {\n            switch (data.type) {\n                case 'connected':\n                    sessionId = data.connectionId;\n                    break;\n                case 'mobile-paired':\n                    mobileConnected = true;\n                    document.getElementById('mobileStatus').classList.add('connected');\n                    updateSystemStats();\n                    break;\n                case 'canvas-sync':\n                    syncCanvas(data.canvasState);\n                    break;\n                case 'voice-command':\n                    handleVoiceFromMobile(data.command);\n                    break;\n            }\n        }\n        \n        async function generateNewQR() {\n            try {\n                const response = await fetch('/api/pairing/initiate', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ deviceType: 'desktop' })\n                });\n                \n                const data = await response.json();\n                sessionId = data.sessionId;\n                \n                // Generate QR code\n                const qrContainer = document.getElementById('qrCode');\n                qrContainer.innerHTML = `<img src=\"data:image/png;base64,${data.qrCodeImage}\" alt=\"QR Code\" style=\"width: 150px; height: 150px;\">`;\n                \n            } catch (error) {\n                console.error('Failed to generate QR code:', error);\n            }\n        }\n        \n        async function startVoiceCommand() {\n            const button = event.target;\n            button.classList.add('active');\n            button.textContent = '🎤 Listening...';\n            \n            // Simulate voice recognition\n            setTimeout(() => {\n                button.classList.remove('active');\n                button.textContent = '🎤 Start Voice Command';\n                \n                const result = document.getElementById('voiceResult');\n                result.innerHTML = 'Voice command simulation: \"Hey SoulFra, show me the agents\"<br>→ Routing to Voice Agent...';\n            }, 3000);\n        }\n        \n        async function testVoice(command) {\n            const commands = {\n                delegate: 'Delegate this document to the appropriate agents',\n                commit: 'Commit the current changes with message \"Update from voice\"',\n                status: 'Show me the current status of all agents'\n            };\n            \n            const result = document.getElementById('voiceResult');\n            result.innerHTML = `Voice: \"${commands[command]}\"<br>→ Processing with Voice Agent...`;\n            \n            try {\n                const response = await fetch('/api/voice/command', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ \n                        command: commands[command],\n                        sessionId: sessionId\n                    })\n                });\n                \n                const data = await response.json();\n                result.innerHTML += `<br>✅ ${data.result || 'Command processed'}`;\n            } catch (error) {\n                result.innerHTML += '<br>❌ Voice command failed';\n            }\n        }\n        \n        async function showGitStatus() {\n            const result = document.getElementById('gitResult');\n            result.innerHTML = 'Checking Git status...';\n            \n            try {\n                const response = await fetch('/api/git/status');\n                const data = await response.json();\n                \n                result.innerHTML = `\n                    <div>📂 Clean workspace: /cleanup-workspace</div>\n                    <div>🔒 Private files: ${data.privateFiles || 0} files in vault</div>\n                    <div>📝 Changes: ${data.changes || 0} files modified</div>\n                    <div>🌿 Branch: ${data.branch || 'main'}</div>\n                `;\n            } catch (error) {\n                result.innerHTML = '❌ Git status check failed';\n            }\n        }\n        \n        async function commitChanges() {\n            const result = document.getElementById('gitResult');\n            result.innerHTML = 'Committing changes...';\n            \n            try {\n                const response = await fetch('/api/git/commit', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        message: 'Update from SoulFra Desktop OS',\n                        sessionId: sessionId\n                    })\n                });\n                \n                const data = await response.json();\n                result.innerHTML = `✅ Commit successful: ${data.commitHash}`;\n            } catch (error) {\n                result.innerHTML = '❌ Commit failed';\n            }\n        }\n        \n        async function pushToGitHub() {\n            const result = document.getElementById('gitResult');\n            result.innerHTML = 'Pushing to GitHub (clean files only)...';\n            \n            try {\n                const response = await fetch('/api/git/push', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ sessionId: sessionId })\n                });\n                \n                const data = await response.json();\n                result.innerHTML = `✅ Pushed to GitHub<br>🔒 ${data.privateFilesHeld} private files held in vault`;\n            } catch (error) {\n                result.innerHTML = '❌ Push failed';\n            }\n        }\n        \n        function showAgent(agentType) {\n            alert(`Agent Details: ${agentType}\\n\\nThis would show detailed agent information and controls.`);\n        }\n        \n        function syncCanvas(canvasState) {\n            const canvas = document.getElementById('sharedCanvas');\n            // Update canvas based on mobile input\n            console.log('Syncing canvas state:', canvasState);\n        }\n        \n        function updateSystemStats() {\n            const stats = document.getElementById('systemStats');\n            const mobileStatus = mobileConnected ? 'Connected' : 'Disconnected';\n            const mobileColor = mobileConnected ? '#00ff88' : '#ff6666';\n            \n            stats.innerHTML = `\n                <div style=\"margin-bottom: 0.5rem;\">🤖 Agents: <span style=\"color: #00ff88;\">Active</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">📱 Mobile: <span style=\"color: ${mobileColor};\">${mobileStatus}</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">🗣️ Voice: <span style=\"color: #00ff88;\">Ready</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">🔄 Git: <span style=\"color: #00ff88;\">Clean</span></div>\n                <div style=\"margin-bottom: 0.5rem;\">💾 Vault: <span style=\"color: #00ff88;\">Secure</span></div>\n            `;\n        }\n        \n        // Initialize the desktop OS\n        document.addEventListener('DOMContentLoaded', () => {\n            generateNewQR();\n            initWebSocket();\n            updateSystemStats();\n        });\n    </script>\n</body>\n</html>\n        `;\n        \n        res.send(html);\n    }\n    \n    // Mobile OS Interface  \n    async serveMobileOS(req, res) {\n        const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SoulFra Mobile OS</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n            color: #00ff88;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            overflow-x: hidden;\n        }\n        \n        .mobile-header {\n            background: rgba(0, 255, 136, 0.1);\n            border-bottom: 1px solid #00ff88;\n            padding: 1rem;\n            text-align: center;\n            position: sticky;\n            top: 0;\n            z-index: 100;\n        }\n        \n        .mobile-title {\n            font-size: 1.3rem;\n            font-weight: bold;\n            text-shadow: 0 0 10px #00ff88;\n        }\n        \n        .mobile-workspace {\n            flex: 1;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        \n        .mobile-panel {\n            background: rgba(0, 255, 136, 0.05);\n            border: 1px solid rgba(0, 255, 136, 0.3);\n            border-radius: 15px;\n            padding: 1rem;\n        }\n        \n        .panel-title {\n            font-size: 1.1rem;\n            font-weight: bold;\n            margin-bottom: 0.8rem;\n            color: #00ffcc;\n            border-bottom: 1px solid rgba(0, 255, 136, 0.3);\n            padding-bottom: 0.5rem;\n        }\n        \n        .mobile-button {\n            background: linear-gradient(45deg, #00ff88, #00ccff);\n            color: #000;\n            border: none;\n            padding: 1rem;\n            border-radius: 10px;\n            font-size: 1rem;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            width: 100%;\n            margin: 0.3rem 0;\n            touch-action: manipulation;\n        }\n        \n        .mobile-button:active {\n            transform: scale(0.95);\n        }\n        \n        .voice-button {\n            background: linear-gradient(45deg, #ff6666, #ff9999);\n            color: #fff;\n            font-size: 1.2rem;\n            padding: 1.5rem;\n        }\n        \n        .voice-button.active {\n            background: linear-gradient(45deg, #ff3333, #ff6666);\n            animation: pulse 1s infinite;\n        }\n        \n        .qr-scanner {\n            text-align: center;\n            padding: 1rem;\n        }\n        \n        .canvas-mobile {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 10px;\n            min-height: 200px;\n            position: relative;\n            overflow: hidden;\n            touch-action: pan-x pan-y;\n        }\n        \n        .status-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 0.5rem;\n        }\n        \n        .status-item {\n            background: rgba(0, 0, 0, 0.3);\n            padding: 0.8rem;\n            border-radius: 8px;\n            text-align: center;\n        }\n        \n        .connection-status {\n            text-align: center;\n            padding: 1rem;\n            font-size: 0.9rem;\n        }\n        \n        .connected {\n            color: #00ff88;\n        }\n        \n        .disconnected {\n            color: #ff6666;\n        }\n        \n        @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.7; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"mobile-header\">\n        <div class=\"mobile-title\">📱 SoulFra Mobile OS</div>\n        <div class=\"connection-status\" id=\"connectionStatus\">\n            <span class=\"disconnected\">⚫ Not connected to desktop</span>\n        </div>\n    </div>\n    \n    <div class=\"mobile-workspace\">\n        <div class=\"mobile-panel\">\n            <div class=\"panel-title\">📷 QR Code Scanner</div>\n            <div class=\"qr-scanner\">\n                <button class=\"mobile-button\" onclick=\"scanQRCode()\">📱 Scan QR Code to Pair</button>\n                <input type=\"text\" placeholder=\"Or enter pairing code manually\" style=\"width: 100%; padding: 0.8rem; margin-top: 0.5rem; border-radius: 5px; border: 1px solid #666; background: #222; color: #fff;\">\n                <button class=\"mobile-button\" onclick=\"manualPair()\">🔗 Manual Pair</button>\n            </div>\n        </div>\n        \n        <div class=\"mobile-panel\">\n            <div class=\"panel-title\">🗣️ Voice Commands</div>\n            <button class=\"mobile-button voice-button\" id=\"voiceBtn\" onclick=\"startVoiceCommand()\">\n                🎤 Hold to Talk to SoulFra\n            </button>\n            <div id=\"voiceResult\" style=\"margin-top: 1rem; padding: 0.8rem; background: rgba(0,0,0,0.3); border-radius: 8px; min-height: 60px; font-size: 0.9rem;\">\n                Voice results will appear here...\n            </div>\n        </div>\n        \n        <div class=\"mobile-panel\">\n            <div class=\"panel-title\">🎨 Shared Canvas</div>\n            <div class=\"canvas-mobile\" id=\"mobileCanvas\">\n                <div style=\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; opacity: 0.5;\">\n                    <div>🖱️ Touch to interact</div>\n                    <div style=\"font-size: 0.8rem; margin-top: 0.3rem;\">Syncs with desktop</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"mobile-panel\">\n            <div class=\"panel-title\">🤖 Quick Agent Actions</div>\n            <button class=\"mobile-button\" onclick=\"quickDelegate()\">📄 Delegate Document</button>\n            <button class=\"mobile-button\" onclick=\"quickCommit()\">💾 Quick Commit</button>\n            <button class=\"mobile-button\" onclick=\"showAgentStatus()\">📊 Agent Status</button>\n            <button class=\"mobile-button\" onclick=\"approveGitPush()\">✅ Approve Git Push</button>\n        </div>\n        \n        <div class=\"mobile-panel\">\n            <div class=\"panel-title\">📊 System Status</div>\n            <div class=\"status-grid\" id=\"statusGrid\">\n                <div class=\"status-item\">\n                    <div>🖥️ Desktop</div>\n                    <div style=\"color: #ff6666;\">Disconnected</div>\n                </div>\n                <div class=\"status-item\">\n                    <div>🤖 Agents</div>\n                    <div style=\"color: #ffff00;\">Standby</div>\n                </div>\n                <div class=\"status-item\">\n                    <div>🔄 Git</div>\n                    <div style=\"color: #00ff88;\">Clean</div>\n                </div>\n                <div class=\"status-item\">\n                    <div>🔒 Vault</div>\n                    <div style=\"color: #00ff88;\">Secure</div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        let ws = null;\n        let sessionId = null;\n        let desktopConnected = false;\n        let isVoiceActive = false;\n        \n        // Initialize WebSocket connection\n        function initWebSocket() {\n            ws = new WebSocket('ws://localhost:3334');\n            \n            ws.onopen = () => {\n                console.log('Mobile OS connected to WebSocket');\n                ws.send(JSON.stringify({\n                    type: 'device-register',\n                    deviceType: 'mobile',\n                    sessionId: sessionId\n                }));\n            };\n            \n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                handleWebSocketMessage(data);\n            };\n            \n            ws.onclose = () => {\n                console.log('WebSocket disconnected, reconnecting...');\n                setTimeout(initWebSocket, 3000);\n            };\n        }\n        \n        function handleWebSocketMessage(data) {\n            switch (data.type) {\n                case 'connected':\n                    sessionId = data.connectionId;\n                    break;\n                case 'desktop-paired':\n                    desktopConnected = true;\n                    updateConnectionStatus();\n                    break;\n                case 'canvas-sync':\n                    syncMobileCanvas(data.canvasState);\n                    break;\n                case 'git-approval-request':\n                    showGitApprovalRequest(data);\n                    break;\n            }\n        }\n        \n        async function scanQRCode() {\n            // In a real implementation, this would open the camera\n            // For demo purposes, we'll simulate QR scanning\n            const button = event.target;\n            button.textContent = '📷 Scanning...';\n            \n            setTimeout(async () => {\n                // Simulate successful scan\n                const mockQRData = 'soulfra-pair-abc123def456';\n                await pairWithDesktop(mockQRData);\n                button.textContent = '📱 Scan QR Code to Pair';\n            }, 2000);\n        }\n        \n        async function pairWithDesktop(qrData) {\n            try {\n                const response = await fetch('/api/pairing/scan', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ \n                        qrData: qrData,\n                        deviceType: 'mobile'\n                    })\n                });\n                \n                const data = await response.json();\n                if (data.success) {\n                    sessionId = data.sessionId;\n                    desktopConnected = true;\n                    updateConnectionStatus();\n                    \n                    // Send pairing approval\n                    await fetch('/api/pairing/approve', {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({ sessionId: sessionId })\n                    });\n                }\n            } catch (error) {\n                console.error('Pairing failed:', error);\n            }\n        }\n        \n        function startVoiceCommand() {\n            const button = document.getElementById('voiceBtn');\n            const result = document.getElementById('voiceResult');\n            \n            if (!isVoiceActive) {\n                isVoiceActive = true;\n                button.classList.add('active');\n                button.textContent = '🎤 Listening... (Tap to stop)';\n                result.innerHTML = '🎤 Listening for voice command...';\n                \n                // Simulate voice recognition\n                setTimeout(() => {\n                    processVoiceCommand('Hey SoulFra, show me the agent status');\n                }, 3000);\n            } else {\n                stopVoiceCommand();\n            }\n        }\n        \n        function stopVoiceCommand() {\n            const button = document.getElementById('voiceBtn');\n            isVoiceActive = false;\n            button.classList.remove('active');\n            button.textContent = '🎤 Hold to Talk to SoulFra';\n        }\n        \n        async function processVoiceCommand(command) {\n            const result = document.getElementById('voiceResult');\n            result.innerHTML = `Voice: \"${command}\"<br>🤖 Processing with agents...`;\n            \n            try {\n                const response = await fetch('/api/voice/command', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ \n                        command: command,\n                        sessionId: sessionId,\n                        deviceType: 'mobile'\n                    })\n                });\n                \n                const data = await response.json();\n                result.innerHTML = `Voice: \"${command}\"<br>✅ ${data.result || 'Command processed'}`;\n                \n                // Sync result to desktop\n                if (ws && desktopConnected) {\n                    ws.send(JSON.stringify({\n                        type: 'voice-command',\n                        command: command,\n                        result: data.result\n                    }));\n                }\n            } catch (error) {\n                result.innerHTML = `Voice: \"${command}\"<br>❌ Command failed`;\n            }\n            \n            stopVoiceCommand();\n        }\n        \n        async function quickDelegate() {\n            alert('📄 Document delegation\\n\\nThis would open a file picker or camera to capture a document for agent processing.');\n        }\n        \n        async function quickCommit() {\n            try {\n                const response = await fetch('/api/git/commit', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        message: 'Quick commit from mobile',\n                        sessionId: sessionId\n                    })\n                });\n                \n                const data = await response.json();\n                alert(`✅ Commit successful: ${data.commitHash}`);\n            } catch (error) {\n                alert('❌ Commit failed');\n            }\n        }\n        \n        async function showAgentStatus() {\n            try {\n                const response = await fetch('/api/agents/network/verify', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' }\n                });\n                \n                const data = await response.json();\n                alert(`🤖 Agent Status\\n\\nActive: ${data.activeAgents || 0}\\nTotal: ${data.totalAgents || 0}\\nCapabilities: ${(data.capabilities || []).join(', ')}`);\n            } catch (error) {\n                alert('❌ Could not get agent status');\n            }\n        }\n        \n        async function approveGitPush() {\n            try {\n                const response = await fetch('/api/git/approve-mobile', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ sessionId: sessionId })\n                });\n                \n                const data = await response.json();\n                alert(`✅ Git push approved\\n${data.message || 'Changes pushed to GitHub'}`);\n            } catch (error) {\n                alert('❌ Git approval failed');\n            }\n        }\n        \n        function updateConnectionStatus() {\n            const status = document.getElementById('connectionStatus');\n            const statusGrid = document.getElementById('statusGrid');\n            \n            if (desktopConnected) {\n                status.innerHTML = '<span class=\"connected\">🟢 Connected to desktop</span>';\n                \n                statusGrid.innerHTML = `\n                    <div class=\"status-item\">\n                        <div>🖥️ Desktop</div>\n                        <div style=\"color: #00ff88;\">Connected</div>\n                    </div>\n                    <div class=\"status-item\">\n                        <div>🤖 Agents</div>\n                        <div style=\"color: #00ff88;\">Active</div>\n                    </div>\n                    <div class=\"status-item\">\n                        <div>🔄 Git</div>\n                        <div style=\"color: #00ff88;\">Synced</div>\n                    </div>\n                    <div class=\"status-item\">\n                        <div>🔒 Vault</div>\n                        <div style=\"color: #00ff88;\">Secure</div>\n                    </div>\n                `;\n            }\n        }\n        \n        function syncMobileCanvas(canvasState) {\n            // Update mobile canvas based on desktop changes\n            console.log('Syncing mobile canvas:', canvasState);\n        }\n        \n        function showGitApprovalRequest(data) {\n            const approve = confirm(`🔄 Git Push Request\\n\\nFiles: ${data.fileCount || 0}\\nBranch: ${data.branch || 'main'}\\n\\nApprove push to GitHub?`);\n            \n            if (approve) {\n                approveGitPush();\n            }\n        }\n        \n        // Initialize mobile OS\n        document.addEventListener('DOMContentLoaded', () => {\n            initWebSocket();\n            updateConnectionStatus();\n        });\n        \n        // Add touch event handling for canvas\n        document.getElementById('mobileCanvas').addEventListener('touchstart', (e) => {\n            e.preventDefault();\n            // Handle touch interaction and sync to desktop\n            if (ws && desktopConnected) {\n                ws.send(JSON.stringify({\n                    type: 'canvas-touch',\n                    x: e.touches[0].clientX,\n                    y: e.touches[0].clientY\n                }));\n            }\n        });\n    </script>\n</body>\n</html>\n        `;\n        \n        res.send(html);\n    }\n    \n    // QR Pairing API Handlers\n    async initiatePairing(req, res) {\n        try {\n            const sessionId = crypto.randomUUID();\n            const pairingCode = crypto.randomBytes(16).toString('hex');\n            \n            // Create QR code data\n            const qrData = `soulfra-pair-${sessionId}-${pairingCode}`;\n            const qrCodeImage = await QRCode.toDataURL(qrData);\n            \n            // Store pairing session\n            const pairingSession = {\n                sessionId,\n                pairingCode,\n                qrData,\n                status: 'pending',\n                createdAt: new Date(),\n                expiresAt: new Date(Date.now() + 5 * 60 * 1000) // 5 minutes\n            };\n            \n            this.devicePairs.set(sessionId, pairingSession);\n            \n            // Store in database if available\n            if (this.db) {\n                await this.db.query(`\n                    INSERT INTO mobile_desktop_pairs (session_id, desktop_device_id, pairing_status)\n                    VALUES ($1, $2, $3)\n                `, [sessionId, req.headers['x-device-id'] || 'desktop-' + sessionId, 'pending']);\n            }\n            \n            res.json({\n                success: true,\n                sessionId,\n                qrCodeImage: qrCodeImage.split(',')[1], // Remove data URL prefix\n                expiresIn: 300 // 5 minutes\n            });\n            \n            console.log(`📱 QR pairing initiated: ${sessionId}`);\n            \n        } catch (error) {\n            console.error('Pairing initiation failed:', error);\n            res.status(500).json({ error: 'Failed to initiate pairing' });\n        }\n    }\n    \n    async handlePairingScan(req, res) {\n        try {\n            const { qrData, deviceType } = req.body;\n            \n            // Parse QR data\n            const match = qrData.match(/soulfra-pair-([^-]+)-(.+)/);\n            if (!match) {\n                return res.status(400).json({ error: 'Invalid QR code' });\n            }\n            \n            const [, sessionId, pairingCode] = match;\n            const pairingSession = this.devicePairs.get(sessionId);\n            \n            if (!pairingSession || pairingSession.expiresAt < new Date()) {\n                return res.status(400).json({ error: 'QR code expired or invalid' });\n            }\n            \n            // Update pairing session\n            pairingSession.mobileDeviceId = req.headers['x-device-id'] || 'mobile-' + crypto.randomUUID();\n            pairingSession.status = 'scanned';\n            \n            res.json({\n                success: true,\n                sessionId,\n                requiresApproval: true\n            });\n            \n            console.log(`📱 QR code scanned by mobile: ${sessionId}`);\n            \n        } catch (error) {\n            console.error('QR scan handling failed:', error);\n            res.status(500).json({ error: 'Failed to process QR scan' });\n        }\n    }\n    \n    async approvePairing(req, res) {\n        try {\n            const { sessionId } = req.body;\n            const pairingSession = this.devicePairs.get(sessionId);\n            \n            if (!pairingSession) {\n                return res.status(404).json({ error: 'Session not found' });\n            }\n            \n            // Complete pairing\n            pairingSession.status = 'paired';\n            pairingSession.pairedAt = new Date();\n            \n            // Update database\n            if (this.db) {\n                await this.db.query(`\n                    UPDATE mobile_desktop_pairs \n                    SET mobile_device_id = $1, pairing_status = $2, last_sync = CURRENT_TIMESTAMP\n                    WHERE session_id = $3\n                `, [pairingSession.mobileDeviceId, 'paired', sessionId]);\n            }\n            \n            // Notify all WebSocket connections\n            this.wsConnections.forEach(conn => {\n                if (conn.sessionId === sessionId) {\n                    conn.ws.send(JSON.stringify({\n                        type: conn.deviceType === 'desktop' ? 'mobile-paired' : 'desktop-paired',\n                        sessionId,\n                        timestamp: new Date()\n                    }));\n                }\n            });\n            \n            res.json({\n                success: true,\n                status: 'paired',\n                message: 'Devices successfully paired'\n            });\n            \n            console.log(`🔗 Devices paired successfully: ${sessionId}`);\n            \n        } catch (error) {\n            console.error('Pairing approval failed:', error);\n            res.status(500).json({ error: 'Failed to approve pairing' });\n        }\n    }\n    \n    async getPairingStatus(req, res) {\n        const { sessionId } = req.params;\n        const pairingSession = this.devicePairs.get(sessionId);\n        \n        if (!pairingSession) {\n            return res.status(404).json({ error: 'Session not found' });\n        }\n        \n        res.json({\n            sessionId,\n            status: pairingSession.status,\n            createdAt: pairingSession.createdAt,\n            expiresAt: pairingSession.expiresAt,\n            pairedAt: pairingSession.pairedAt\n        });\n    }\n    \n    // Voice Command Handlers\n    async handleVoiceCommand(req, res) {\n        try {\n            const { command, sessionId, deviceType } = req.body;\n            \n            console.log(`🗣️ Voice command received: \"${command}\" from ${deviceType}`);\n            \n            // Process voice command through agents\n            let result = 'Command processed';\n            \n            // Route to appropriate voice handler\n            for (const [type, { pattern, handler }] of this.voiceCommands) {\n                if (pattern.test(command)) {\n                    result = await handler(command, sessionId);\n                    break;\n                }\n            }\n            \n            // Store voice command in database\n            if (this.db) {\n                await this.db.query(`\n                    INSERT INTO voice_commands (session_id, command_text, command_type, execution_status, result)\n                    VALUES ($1, $2, $3, $4, $5)\n                `, [sessionId, command, 'voice', 'completed', JSON.stringify({ result })]);\n            }\n            \n            res.json({ success: true, result });\n            \n        } catch (error) {\n            console.error('Voice command failed:', error);\n            res.status(500).json({ error: 'Voice command processing failed' });\n        }\n    }\n    \n    async handleVoiceDelegate(command, sessionId) {\n        try {\n            // Delegate to agent orchestrator\n            const response = await fetch('http://localhost:9999/api/agents/voice/delegate', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ command, sessionId })\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                return `Delegated to ${data.assignedAgents?.length || 1} agents`;\n            }\n        } catch (error) {\n            console.error('Voice delegation failed:', error);\n        }\n        \n        return 'Command delegated to agents';\n    }\n    \n    async handleVoiceCommit(command, sessionId) {\n        try {\n            // Extract commit message from voice command\n            const messageMatch = command.match(/commit.*?[\"']([^\"']+)[\"']/) || \n                               command.match(/commit (.+)/);\n            const message = messageMatch ? messageMatch[1] : 'Voice commit';\n            \n            // Perform git commit through agent\n            const result = await this.performGitCommit(message, sessionId);\n            return `Committed with message: \"${message}\"`;\n            \n        } catch (error) {\n            console.error('Voice commit failed:', error);\n            return 'Commit failed';\n        }\n    }\n    \n    async handleVoiceStatus(command, sessionId) {\n        try {\n            // Get status from various systems\n            const agentStatus = await this.getAgentSystemStatus();\n            const gitStatus = await this.getGitSystemStatus();\n            \n            return `Agents: ${agentStatus.active}/${agentStatus.total} active. Git: ${gitStatus.changes} changes pending.`;\n            \n        } catch (error) {\n            return 'Status check complete';\n        }\n    }\n    \n    async handleVoiceAgents(command, sessionId) {\n        try {\n            const response = await fetch('http://localhost:9999/api/agents/network/verify', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' }\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                return `${data.activeAgents} agents active with capabilities: ${data.capabilities?.join(', ')}`;\n            }\n        } catch (error) {\n            console.error('Voice agent status failed:', error);\n        }\n        \n        return 'Agent status retrieved';\n    }\n    \n    // GitHub Wrapper Handlers\n    async handleGitCommit(req, res) {\n        try {\n            const { message, sessionId } = req.body;\n            const result = await this.performGitCommit(message || 'Update from SoulFra OS', sessionId);\n            \n            res.json(result);\n            \n        } catch (error) {\n            console.error('Git commit failed:', error);\n            res.status(500).json({ error: 'Git commit failed' });\n        }\n    }\n    \n    async performGitCommit(message, sessionId) {\n        return new Promise((resolve, reject) => {\n            const gitProcess = spawn('git', ['commit', '-m', message], {\n                cwd: this.cleanupWorkspace\n            });\n            \n            let output = '';\n            gitProcess.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n            \n            gitProcess.on('close', (code) => {\n                if (code === 0) {\n                    const commitHash = output.match(/\\[\\w+ ([a-f0-9]+)\\]/)?.[1] || 'unknown';\n                    \n                    // Store git operation\n                    if (this.db) {\n                        this.db.query(`\n                            INSERT INTO git_operations (session_id, operation_type, repository_path, commit_hash, status)\n                            VALUES ($1, $2, $3, $4, $5)\n                        `, [sessionId, 'commit', this.cleanupWorkspace, commitHash, 'completed']);\n                    }\n                    \n                    resolve({ success: true, commitHash, message: 'Commit successful' });\n                } else {\n                    reject(new Error('Git commit failed'));\n                }\n            });\n        });\n    }\n    \n    async handleGitPush(req, res) {\n        try {\n            const { sessionId } = req.body;\n            \n            // Separate private files before push\n            const privateFiles = await this.movePrivateFilesToVault();\n            \n            // Push only clean files\n            const result = await this.performGitPush(sessionId);\n            \n            res.json({\n                success: true,\n                privateFilesHeld: privateFiles.length,\n                message: 'Clean files pushed to GitHub, private files held in vault'\n            });\n            \n        } catch (error) {\n            console.error('Git push failed:', error);\n            res.status(500).json({ error: 'Git push failed' });\n        }\n    }\n    \n    async movePrivateFilesToVault() {\n        // Identify and move private files (keys, secrets, personal data)\n        const privatePatterns = [\n            '*.key', '*.pem', '*.env', '.env*', \n            '*secret*', '*password*', '*token*',\n            '.vault/**', 'private/**'\n        ];\n        \n        const privateFiles = [];\n        // Implementation would scan and move files matching patterns\n        \n        return privateFiles;\n    }\n    \n    async performGitPush(sessionId) {\n        return new Promise((resolve, reject) => {\n            const gitProcess = spawn('git', ['push'], {\n                cwd: this.cleanupWorkspace\n            });\n            \n            gitProcess.on('close', (code) => {\n                if (code === 0) {\n                    resolve({ success: true, message: 'Pushed to GitHub' });\n                } else {\n                    reject(new Error('Git push failed'));\n                }\n            });\n        });\n    }\n    \n    async getGitStatus(req, res) {\n        try {\n            const status = await this.getGitSystemStatus();\n            res.json(status);\n        } catch (error) {\n            res.status(500).json({ error: 'Git status check failed' });\n        }\n    }\n    \n    async getGitSystemStatus() {\n        return new Promise((resolve) => {\n            const gitProcess = spawn('git', ['status', '--porcelain'], {\n                cwd: this.cleanupWorkspace\n            });\n            \n            let output = '';\n            gitProcess.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n            \n            gitProcess.on('close', () => {\n                const changes = output.trim().split('\\n').filter(line => line.length > 0);\n                resolve({\n                    changes: changes.length,\n                    branch: 'main',\n                    privateFiles: this.privateVault.size,\n                    workspace: this.cleanupWorkspace\n                });\n            });\n        });\n    }\n    \n    // Utility methods\n    async getAgentSystemStatus() {\n        try {\n            const response = await fetch('http://localhost:9999/api/agents/network/verify', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' }\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                return {\n                    active: data.activeAgents || 0,\n                    total: data.totalAgents || 0,\n                    capabilities: data.capabilities || []\n                };\n            }\n        } catch (error) {\n            console.error('Agent status check failed:', error);\n        }\n        \n        return { active: 0, total: 0, capabilities: [] };\n    }\n    \n    async handleWebSocketMessage(connectionId, data) {\n        try {\n            const message = JSON.parse(data.toString());\n            const connection = this.wsConnections.get(connectionId);\n            \n            if (!connection) return;\n            \n            switch (message.type) {\n                case 'canvas-sync':\n                    this.syncCanvasToAllDevices(message.canvasState, connectionId);\n                    break;\n                case 'voice-command':\n                    this.broadcastVoiceCommand(message, connectionId);\n                    break;\n                case 'git-approval-request':\n                    this.requestGitApproval(message, connectionId);\n                    break;\n            }\n            \n        } catch (error) {\n            console.error('WebSocket message handling failed:', error);\n        }\n    }\n    \n    syncCanvasToAllDevices(canvasState, originConnectionId) {\n        this.wsConnections.forEach((conn, connId) => {\n            if (connId !== originConnectionId) {\n                conn.ws.send(JSON.stringify({\n                    type: 'canvas-sync',\n                    canvasState\n                }));\n            }\n        });\n    }\n    \n    // Additional API handlers\n    async proxyToAgentBridge(req, res) {\n        try {\n            // Proxy requests to the agent bridge\n            const targetUrl = `http://localhost:9999${req.path}`;\n            \n            // This is a simplified proxy - in production you'd use a proper proxy\n            res.json({ \n                message: 'Agent bridge proxy not fully implemented',\n                targetUrl,\n                method: req.method\n            });\n            \n        } catch (error) {\n            res.status(500).json({ error: 'Agent bridge proxy failed' });\n        }\n    }\n    \n    // Onboarding handlers\n    async startOnboarding(req, res) {\n        const { userType, sessionId } = req.body;\n        const flow = this.onboardingFlows.get(userType || 'developer');\n        \n        if (!flow) {\n            return res.status(400).json({ error: 'Invalid user type' });\n        }\n        \n        // Initialize onboarding progress\n        const progress = {\n            sessionId,\n            userType,\n            steps: flow.steps.map(step => ({ ...step, status: 'pending' })),\n            currentStep: 0,\n            startedAt: new Date()\n        };\n        \n        this.onboardingFlows.set(sessionId, progress);\n        \n        res.json({\n            success: true,\n            sessionId,\n            totalSteps: flow.steps.length,\n            currentStep: flow.steps[0]\n        });\n    }\n    \n    // Cleanup and lifecycle\n    async shutdown() {\n        console.log('🛑 Shutting down SoulFra Mobile-Desktop OS...');\n        \n        if (this.server) {\n            this.server.close();\n        }\n        \n        if (this.wss) {\n            this.wss.close();\n        }\n        \n        if (this.db) {\n            await this.db.end();\n        }\n        \n        if (this.agentBridge) {\n            this.agentBridge.stop();\n        }\n        \n        console.log('✅ SoulFra OS shutdown complete');\n    }\n}\n\n// Start the Mobile-Desktop OS if run directly\nif (require.main === module) {\n    const os = new SoulfraMobileDesktopOS();\n    \n    // Graceful shutdown\n    process.on('SIGINT', async () => {\n        await os.shutdown();\n        process.exit(0);\n    });\n}\n\nmodule.exports = SoulfraMobileDesktopOS;