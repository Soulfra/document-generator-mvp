{
  "timestamp": "2025-09-15T16:13:35.040Z",
  "services": [
    {
      "file": ".env.ai-services",
      "path": ".env.ai-services",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/.env.ai-services",
      "isService": true,
      "ports": [
        3000,
        11434,
        11434
      ],
      "apis": [],
      "frameworks": [],
      "type": "ai-service"
    },
    {
      "file": ".env.bridge.example",
      "path": ".env.bridge.example",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/.env.bridge.example",
      "isService": true,
      "ports": [
        9997,
        9995,
        9999,
        9998,
        9994
      ],
      "apis": [],
      "frameworks": [],
      "type": "integration-gateway"
    },
    {
      "file": "server.js",
      "path": "mcp/server.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/mcp/server.js",
      "isService": true,
      "ports": [
        3000,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001,
        3001
      ],
      "apis": [
        ".post('/list_tools'",
        ".post('/call_tool'",
        ".post('/list_prompts'",
        ".post('/get_prompt'",
        ".post('/list_resources'",
        ".post('/read_resource'",
        ".get('/health'"
      ],
      "frameworks": [
        "express"
      ],
      "type": "template-processor"
    },
    {
      "file": "ai-api-client.js",
      "path": "services/ai-api-client.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/services/ai-api-client.js",
      "isService": true,
      "ports": [],
      "apis": [],
      "frameworks": [],
      "type": "ai-service"
    },
    {
      "file": "ai-api.js",
      "path": "services/ai-api.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/services/ai-api.js",
      "isService": true,
      "ports": [
        3001,
        9999
      ],
      "apis": [
        ".get('/health'",
        ".get('/'",
        ".post('/api/analyze'"
      ],
      "frameworks": [
        "express"
      ],
      "type": "ai-service"
    },
    {
      "file": "api-scraper-system.js",
      "path": "FinishThisIdea/api-scraper-system.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea/api-scraper-system.js",
      "isService": true,
      "ports": [
        3013,
        3010,
        3005,
        3012
      ],
      "apis": [
        ".get('/'",
        ".post('/api/start-scraping'",
        ".get('/api/scraping-results'",
        ".get('/api/data/:source'",
        ".post('/api/add-target'"
      ],
      "frameworks": [
        "express"
      ],
      "type": "api-service"
    },
    {
      "file": "Dockerfile.ai-api",
      "path": "FinishThisIdea-Complete/Dockerfile.ai-api",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea-Complete/Dockerfile.ai-api",
      "isService": true,
      "ports": [
        3001
      ],
      "apis": [],
      "frameworks": [],
      "type": "ai-service"
    },
    {
      "file": "bridge.log",
      "path": "FinishThisIdea-Complete/bridge.log",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea-Complete/bridge.log",
      "isService": true,
      "ports": [
        8080,
        8081,
        5555,
        8080,
        8080,
        8081,
        5555
      ],
      "apis": [],
      "frameworks": [],
      "type": "integration-gateway"
    },
    {
      "file": "docker-compose.ai-api.yml",
      "path": "FinishThisIdea-Complete/docker-compose.ai-api.yml",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea-Complete/docker-compose.ai-api.yml",
      "isService": true,
      "ports": [
        3001,
        3001,
        11434,
        3001,
        11434,
        5432,
        6379,
        8889,
        8889
      ],
      "apis": [],
      "frameworks": [],
      "type": "ai-service"
    },
    {
      "file": "brand-consultation-api.js",
      "path": "api/brand-consultation-api.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/api/brand-consultation-api.js",
      "isService": true,
      "ports": [
        3000
      ],
      "apis": [
        ".get('/health'",
        ".post('/api/v1/brand/analyze'",
        ".get('User-Agent'",
        ".post('/api/v1/consultation/create'",
        ".get('/api/v1/domains'",
        ".get('/api/v1/consultation/:id'",
        ".get('/api/v1/demos/status/:domain'"
      ],
      "frameworks": [
        "express"
      ],
      "type": "api-service"
    },
    {
      "file": "mvp-generation-api.js",
      "path": "api/mvp-generation-api.js",
      "fullPath": "/Users/matthewmauer/Desktop/Document-Generator/api/mvp-generation-api.js",
      "isService": true,
      "ports": [
        3000
      ],
      "apis": [
        ".get('/health'",
        ".post('/api/v1/mvp/generate'",
        ".get('User-Agent'",
        ".get('/api/v1/mvp/status/:generationId'",
        ".post('/api/v1/document/analyze'",
        ".get('/api/v1/templates'",
        ".get('/api/v1/mvp/:generationId/download'"
      ],
      "frameworks": [
        "express"
      ],
      "type": "api-service"
    }
  ],
  "ports": [
    {
      "port": 3000,
      "status": "closed",
      "service": "MCP Template Processor"
    },
    {
      "port": 3001,
      "status": "closed",
      "service": "AI API Service"
    },
    {
      "port": 3002,
      "status": "open",
      "service": "Analytics Service"
    },
    {
      "port": 3003,
      "status": "open",
      "service": "Unknown Service (Port 3003)"
    },
    {
      "port": 4000,
      "status": "closed",
      "service": "Unified Bridge API"
    },
    {
      "port": 4001,
      "status": "closed",
      "service": "Unified Bridge WebSocket"
    },
    {
      "port": 3004,
      "status": "closed",
      "service": "Unknown Service (Port 3004)"
    },
    {
      "port": 4002,
      "status": "closed",
      "service": "Unknown Service (Port 4002)"
    },
    {
      "port": 5432,
      "status": "open",
      "service": "PostgreSQL"
    },
    {
      "port": 5000,
      "status": "open",
      "service": "Flask Backend"
    },
    {
      "port": 6379,
      "status": "closed",
      "service": "Redis"
    },
    {
      "port": 8080,
      "status": "closed",
      "service": "Platform Hub"
    },
    {
      "port": 8090,
      "status": "closed",
      "service": "Character Movement"
    },
    {
      "port": 8091,
      "status": "closed",
      "service": "Widget Integration"
    },
    {
      "port": 8081,
      "status": "closed",
      "service": "Unknown Service (Port 8081)"
    },
    {
      "port": 9000,
      "status": "closed",
      "service": "MinIO Storage"
    },
    {
      "port": 9001,
      "status": "closed",
      "service": "MinIO Console"
    },
    {
      "port": 9706,
      "status": "closed",
      "service": "Unknown Service (Port 9706)"
    },
    {
      "port": 9998,
      "status": "closed",
      "service": "Unknown Service (Port 9998)"
    },
    {
      "port": 9800,
      "status": "closed",
      "service": "Unknown Service (Port 9800)"
    },
    {
      "port": 9999,
      "status": "closed",
      "service": "Unknown Service (Port 9999)"
    },
    {
      "port": 11434,
      "status": "closed",
      "service": "Ollama Local AI"
    }
  ],
  "configs": [
    {
      "file": "package.json",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/package.json",
      "size": 2481,
      "lastModified": "2025-09-14T23:36:50.140Z",
      "type": "npm-config",
      "content": "{\n  \"name\": \"document-generator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Transform documents into working MVPs using AI\",\n  \"main\": \"ai-router.js\",\n  \"scripts\": {\n    \"build\": \"node build-orchestrator.js\",\n    \"build:dev\": \"NODE_ENV=development node build-orchestrator.js\",\n    \"build:prod\": \"NODE_ENV=production node build-orchestrator.js\",\n    \"build:sequential\": \"node build-orchestrator.js --sequential\",\n    \"build:verbose\": \"node build-orchestrator.js --verbose\",\n    \"build:extension\": \"cd web-interface && npm run build:extension\",\n    \"start\": \"./start-unified-system.sh\",\n    \"start-ai\": \"node ai-router.js\",\n    \"start-personalization\": \"./start-personalization-system.sh\",\n    \"start-flash\": \"./start-flash-context-system.sh\",\n    \"dev\": \"nodemon ai-router.js\",\n    \"dev:full\": \"npm run build:dev && npm start\",\n    \"oauth\": \"node oauth-server.js\",\n    \"setup\": \"node setup.js\",\n    \"test\": \"node test-connections.js\",\n    \"test-ai\": \"node test-ai-router.js\",\n    \"test:integration\": \"np...",
      "name": "document-generator",
      "version": "1.0.0",
      "scripts": {
        "build": "node build-orchestrator.js",
        "build:dev": "NODE_ENV=development node build-orchestrator.js",
        "build:prod": "NODE_ENV=production node build-orchestrator.js",
        "build:sequential": "node build-orchestrator.js --sequential",
        "build:verbose": "node build-orchestrator.js --verbose",
        "build:extension": "cd web-interface && npm run build:extension",
        "start": "./start-unified-system.sh",
        "start-ai": "node ai-router.js",
        "start-personalization": "./start-personalization-system.sh",
        "start-flash": "./start-flash-context-system.sh",
        "dev": "nodemon ai-router.js",
        "dev:full": "npm run build:dev && npm start",
        "oauth": "node oauth-server.js",
        "setup": "node setup.js",
        "test": "node test-connections.js",
        "test-ai": "node test-ai-router.js",
        "test:integration": "npm run test && cd web-interface && npm test",
        "deploy": "npm run build:prod && docker-compose up -d",
        "deploy:extension": "npm run build:extension && node scripts/deploy-extension.js",
        "docs:generate": "node scripts/generate-docs.js",
        "monitor": "node scripts/monitor-system.js"
      },
      "dependencies": [
        "express",
        "cors",
        "cookie-parser",
        "dotenv",
        "ollama",
        "@anthropic-ai/sdk",
        "openai",
        "axios",
        "p-retry",
        "p-timeout",
        "p-queue",
        "node-cron",
        "winston",
        "express-rate-limit",
        "multer",
        "helmet",
        "redis",
        "ws",
        "numeric",
        "handlebars",
        "juice",
        "jspdf",
        "nodemailer",
        "csv-parse",
        "csv-stringify"
      ]
    },
    {
      "file": "docker-compose.yml",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/docker-compose.yml",
      "size": 33726,
      "lastModified": "2025-09-14T23:41:52.671Z",
      "type": "docker-config",
      "content": "version: '3.8'\n\nservices:\n  # Flask Backend - User Data Protected\n  flask-backend:\n    build: ./flask-backend\n    container_name: document-generator-flask\n    ports:\n      - \"5000:5000\"\n    environment:\n      - FLASK_ENV=production\n      - DATA_ISOLATION=enabled\n      - PAYMENT_TRACKING=active\n    volumes:\n      # Isolated user data volumes (not shared with OSS)\n      - user_uploads:/tmp/document-uploads\n      - user_processing:/tmp/document-processing  \n      - user_outputs:/tmp/document-outputs\n    networks:\n      - document-generator\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/api/status\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    restart: unless-stopped\n\n  # PostgreSQL Database\n  postgres:\n    image: postgres:16-alpine\n    container_name: document-generator-postgres\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: document_generator\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - ...",
      "services": [
        "flask-backend",
        "ports",
        "environment",
        "volumes",
        "networks",
        "healthcheck",
        "postgres",
        "environment",
        "ports",
        "volumes",
        "healthcheck",
        "networks",
        "redis",
        "ports",
        "volumes",
        "healthcheck",
        "networks",
        "minio",
        "environment",
        "ports",
        "volumes",
        "healthcheck",
        "networks",
        "ollama",
        "ports",
        "volumes",
        "environment",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "networks",
        "network-service",
        "build",
        "environment",
        "ports",
        "healthcheck",
        "networks",
        "service-registry",
        "build",
        "environment",
        "ports",
        "volumes",
        "healthcheck",
        "networks",
        "internet-gateway",
        "build",
        "environment",
        "ports",
        "depends_on",
        "network-service",
        "healthcheck",
        "networks",
        "backend-integration",
        "build",
        "environment",
        "ports",
        "depends_on",
        "network-service",
        "service-registry",
        "internet-gateway",
        "postgres",
        "redis",
        "healthcheck",
        "networks",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "web-interface",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "privacy-scanner",
        "healthcheck",
        "networks",
        "volumes",
        "ai-api",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "minio",
        "ollama",
        "privacy-scanner",
        "healthcheck",
        "networks",
        "volumes",
        "llm-orchestration",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "template-processor",
        "ai-api",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "networks",
        "volumes",
        "platform-hub",
        "build",
        "environment",
        "ports",
        "depends_on",
        "healthcheck",
        "networks",
        "volumes",
        "sovereign-agents",
        "build",
        "environment",
        "ports",
        "depends_on",
        "ollama",
        "healthcheck",
        "networks",
        "volumes",
        "master-orchestrator",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "ai-api",
        "template-processor",
        "volumes",
        "healthcheck",
        "networks",
        "privacy-scanner",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "healthcheck",
        "networks",
        "volumes",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "analytics",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "privacy-scanner",
        "sovereign-agents",
        "master-orchestrator",
        "networks",
        "prometheus",
        "command",
        "ports",
        "volumes",
        "networks",
        "grafana",
        "environment",
        "ports",
        "volumes",
        "depends_on",
        "networks",
        "nginx",
        "ports",
        "volumes",
        "depends_on",
        "networks",
        "profiles",
        "cybersecurity-gaming",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "ai-api",
        "template-processor",
        "networks",
        "volumes",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "espn-sports-hub",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "ai-api",
        "template-processor",
        "networks",
        "volumes",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "cal-brand-integration",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "ollama",
        "ai-api",
        "template-processor",
        "networks",
        "volumes",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "multiplayer-hub",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "networks",
        "volumes",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "unix-database",
        "build",
        "environment",
        "ports",
        "networks",
        "volumes",
        "healthcheck",
        "deploy",
        "resources",
        "limits",
        "reservations",
        "ecosystem-launcher",
        "build",
        "environment",
        "depends_on",
        "multiplayer-hub",
        "unix-database",
        "networks",
        "volumes",
        "profiles",
        "guardian-teacher",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "networks",
        "volumes",
        "healthcheck",
        "profiles",
        "ai-casino",
        "build",
        "environment",
        "ports",
        "depends_on",
        "postgres",
        "redis",
        "networks",
        "volumes",
        "healthcheck",
        "profiles",
        "infinity-router",
        "build",
        "environment",
        "ports",
        "networks",
        "volumes",
        "healthcheck",
        "profiles",
        "special-orchestrator",
        "build",
        "environment",
        "ports",
        "depends_on",
        "networks",
        "volumes",
        "healthcheck",
        "profiles",
        "document-generator",
        "postgres_data",
        "redis_data",
        "minio_data",
        "ollama_data",
        "registry_data",
        "prometheus_data",
        "grafana_data",
        "sovereign_data",
        "sovereign_logs",
        "user_uploads",
        "user_processing",
        "user_outputs",
        "privacy_scanner_logs",
        "orchestrator_data",
        "orchestrator_logs",
        "gaming_data",
        "gaming_logs",
        "gaming_replays",
        "guardian_logs",
        "guardian_data",
        "casino_state",
        "casino_logs",
        "infinity_routes",
        "infinity_universes",
        "infinity_logs",
        "sports_education_data",
        "sports_education_logs",
        "brand_integration_data",
        "brand_integration_logs",
        "multiplayer_data",
        "multiplayer_logs",
        "unix_db_data",
        "unix_db_mmap",
        "unix_db_backups",
        "unix_db_socket",
        "ecosystem_data",
        "ecosystem_logs",
        "extension_builds"
      ]
    },
    {
      "file": ".env",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/.env",
      "size": 1328,
      "lastModified": "2025-09-11T21:12:34.943Z",
      "type": "environment",
      "content": "# Document Generator Environment Configuration\n# Basic working configuration - customize as needed\n\n# =============================================================================\n# GITHUB OAUTH\n# =============================================================================\n# Create OAuth app at: https://github.com/settings/developers\n# Homepage URL: http://localhost:3000\n# Callback URL: http://localhost:3000/auth/github/callback\nGITHUB_CLIENT_ID=your-github-client-id-here\nGITHUB_CLIENT_SECRET=your-github-client-secret-here\n\n# =============================================================================\n# SYSTEM CONFIGURATION\n# =============================================================================\nNODE_ENV=development\nPORT=3000\nSESSION_SECRET=document-generator-dev-secret-change-in-production\n\n# =============================================================================\n# SECURITY SETTINGS (Optional - has working defaults)\n# ====================================================...",
      "envVars": [
        "GITHUB_CLIENT_ID",
        "GITHUB_CLIENT_SECRET",
        "NODE_ENV",
        "PORT",
        "SESSION_SECRET",
        "JWT_SECRET",
        "ENCRYPTION_KEY",
        "RATE_LIMIT_WINDOW_MS",
        "RATE_LIMIT_MAX_REQUESTS",
        "SESSION_MAX_AGE_MS",
        "TOKEN_EXPIRY_SECONDS"
      ]
    },
    {
      "file": ".env.example",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/.env.example",
      "size": 11902,
      "lastModified": "2025-09-10T03:58:16.953Z",
      "type": "environment",
      "content": "# Document Generator Environment Configuration\n# Copy this file to .env and fill in your actual values\n# For detailed instructions, see API_KEYS.md\n\n# ==================================================\n# CORE CONFIGURATION\n# ==================================================\n\n# Application Settings\nNODE_ENV=development\nPORT=3000\nAPI_PORT=3001\nANALYTICS_PORT=3002\nPLATFORM_HUB_PORT=8080\nWEBSOCKET_PORT=8081\n\n# Application URLs (update for production)\nAPP_URL=http://localhost:3000\nAPI_URL=http://localhost:3001\nALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080\n\n# ==================================================\n# DATABASE CONFIGURATION\n# ==================================================\n\n# SQLite (Default - no configuration needed)\nDATABASE_URL=sqlite:./data/document-generator.db\n\n# PostgreSQL (Optional - uncomment if using PostgreSQL)\n# DATABASE_URL=postgresql://user:password@localhost:5432/document_generator\n# POSTGRES_HOST=localhost\n# POSTGRES_PORT=5432\n# POSTGRES_DB=documen...",
      "envVars": [
        "NODE_ENV",
        "PORT",
        "API_PORT",
        "ANALYTICS_PORT",
        "PLATFORM_HUB_PORT",
        "WEBSOCKET_PORT",
        "APP_URL",
        "API_URL",
        "ALLOWED_ORIGINS",
        "DATABASE_URL",
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "GOOGLE_AI_KEY",
        "REPLICATE_API_TOKEN",
        "HUGGINGFACE_API_KEY",
        "OLLAMA_HOST",
        "OLLAMA_MODELS",
        "STRIPE_SECRET_KEY",
        "STRIPE_PUBLISHABLE_KEY",
        "STRIPE_WEBHOOK_SECRET"
      ]
    },
    {
      "file": "README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/README.md",
      "size": 6148,
      "lastModified": "2025-08-25T01:12:20.316Z",
      "type": "documentation",
      "content": "# 🚀 Document Generator\n\n**Document → Brain → Live App in 30 seconds**\n\nTransform any document (business plan, specification, chat log) into a working MVP using AI brain technology.\n\n## 🚀 Quick Start\n\n### One Command Launch\n```bash\n./start.sh\n```\n\n### Using npm\n```bash\nnpm install         # Install dependencies\nnpm start           # Start all services\n```\n\nVisit `http://localhost:5000` and paste your document.\n\n## ✨ Features\n\n### Core Functionality\n- **One-Click Processing**: Upload any document type\n- **AI Analysis**: Advanced document understanding\n- **Smart Templates**: Automatic template selection and generation\n- **Gaming Integration**: ShipRekt battles for engagement\n- **Financial Optimization**: Budget analysis and improvement suggestions\n- **Legal Contracts**: AI agent service agreements\n- **Subagent Coordination**: 7 specialized AI agents working together\n- **Goldfish Brain Clause**: Multi-agent system for AI memory continuation and context preservation ([detailed documentati..."
    },
    {
      "file": "index.js",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/index.js",
      "size": 12180,
      "lastModified": "2025-08-21T01:03:18.896Z",
      "type": "javascript",
      "content": "#!/usr/bin/env node\n\n/**\n * BASH SYSTEM - Main Entry Point\n * Export all components for use as a dependency\n * Complete 23-layer orchestration platform\n */\n\n// These will be loaded dynamically when needed\nlet BashSystemIntegration, BrainLayer, UnifiedCharacterTool, MasterExecutor, SystemConnectionTester;\n\n// Main BashSystem class for easy instantiation\nclass BashSystem {\n  constructor(options = {}) {\n    this.options = {\n      port: 3001,\n      autoStart: false,\n      dashboard: true,\n      ...options\n    };\n    \n    this.components = {\n      integration: null,\n      brain: null,\n      characters: null,\n      executor: null\n    };\n    \n    this.status = 'initialized';\n  }\n\n  // Initialize all components\n  async initialize() {\n    console.log('🚀 Initializing Bash System...');\n    \n    this.components.brain = new BrainLayer();\n    this.components.integration = new BashSystemIntegration();\n    this.components.characters = new UnifiedCharacterTool();\n    this.components.executor = new Mas..."
    },
    {
      "file": "server.js",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/server.js",
      "size": 28516,
      "lastModified": "2025-08-04T14:59:14.691Z",
      "type": "javascript",
      "content": "const express = require('express');\nconst path = require('path');\nconst fs = require('fs');\nconst AIEconomyRuntime = require('./ai-economy-runtime');\nconst RealDataHooksLayer = require('./real-data-hooks-layer');\nconst FlagTagSystem = require('./flag-tag-system');\nconst servicesConfig = require('./config/services.js');\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Initialize AI Economy Runtime\nconst aiRuntime = new AIEconomyRuntime();\nconsole.log('🤖 AI Economy Runtime initialized');\n\n// Initialize Real Data Hooks Layer\nconst realDataHooks = new RealDataHooksLayer();\nconsole.log('🎣 Real Data Hooks Layer initialized');\n\n// Initialize Flag Tag System\nconst flagTagSystem = new FlagTagSystem();\nconsole.log('🏴 Flag Tag System initialized');\n\n// Add body parsing middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Agent affiliate tracking middleware\napp.use((req, res, next) => {\n  const agentWallet = process.env.AGENT_WALLET_ADDRESS ..."
    }
  ],
  "keyDocuments": [
    {
      "file": "5WH-INTEGRATION-README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/5WH-INTEGRATION-README.md",
      "directory": ".",
      "size": 10534,
      "preview": "# 5W+H Integration System - Complete Implementation\n\n## Overview\n\nThe 5W+H Integration System now provides a unified processor that integrates the three implemented components (WHO, WHAT, WHEN) with comprehensive verification and audit capabilities for third-party validation.\n\n## Architecture\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    5W+H Integration System                       │\n├───────────────────────────────────────────────────────────────"
    },
    {
      "file": "AI-ORCHESTRATION-PERSONALIZATION-README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/AI-ORCHESTRATION-PERSONALIZATION-README.md",
      "directory": ".",
      "size": 8292,
      "preview": "# AI Orchestration Personalization System 🎯\n\nA sophisticated personalization layer that makes every interaction feel uniquely tailored to each user. Built on top of your existing infrastructure (500+ engines, AI routing, arbitrage systems), this system uses ray tracing algorithms and multi-dimensional context matrices to deliver deeply personalized experiences.\n\n## 🏗️ System Architecture\n\n```\nUser Interaction → Context Matrix Engine → Ray Tracing Router\n                           ↓            "
    },
    {
      "file": "AI-REASONING-GAME-README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/AI-REASONING-GAME-README.md",
      "directory": ".",
      "size": 4727,
      "preview": "# 🧠 AI Reasoning Game - Real Backend System\n\nThis is a **REAL** AI reasoning game with actual backend services, database persistence, and game mechanics - not simulated!\n\n## 🎮 What Makes This Real\n\n### 1. **Flask Backend with SQLite Database**\n- Real Python Flask server running on port 5000\n- SQLite database (`ai_reasoning_game.db`) with actual tables:\n  - `game_zones`: 4 ASCII art zones where AI agents live\n  - `ai_agents`: 4 unique AI agents with different reasoning styles\n  - `reasoning_eve"
    },
    {
      "file": "README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/mcp/README.md",
      "directory": "mcp",
      "size": 10422,
      "preview": "# IdeaLaunch Template Processor\n\n🤖 **AI-powered template processing platform** that transforms chat conversations into professional business documents with real-time AI reasoning transparency.\n\n## 🚀 Quick Start\n\n**Two ways to get started:**\n\n### Option 1: One-Command Setup\n```bash\ngit clone <your-repo-url>\ncd idealauncher-template-processor\n./quick-start.sh\n```\n\n### Option 2: Manual Setup\n```bash\n# 1. Install dependencies\nnpm install\n\n# 2. Configure environment\ncp .env.example .env\n# Edit .env"
    },
    {
      "file": "DOT-COLLAR-SYSTEM-README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea/DOT-COLLAR-SYSTEM-README.md",
      "directory": "FinishThisIdea",
      "size": 7516,
      "preview": "# 🔴⚫ THE DOT - Collar System Complete Guide\n\n## 🚀 ONE COMMAND TO RULE THEM ALL\n\n```bash\n./app\n```\n\n**That's it!** One command launches your entire 19-system AI-powered document generator with complete collar hierarchy and authentication.\n\n---\n\n## 🔴 THE DOT SYSTEM OVERVIEW\n\nThe **Collar Dot System** is your unified entry point that launches and orchestrates:\n\n- **19 Integrated Systems** across 7 architectural tiers\n- **13-Layer Collar Hierarchy** with full authentication\n- **5-Level Authority "
    },
    {
      "file": "DYNAMIC-MENU-README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea/DYNAMIC-MENU-README.md",
      "directory": "FinishThisIdea",
      "size": 5433,
      "preview": "# 🔗 DYNAMIC OMNISCIENT MENU SYSTEM\n\n## 🎯 Master Integration Hub\n\nThe **master menu at localhost:8917** is the unified control center for the entire omniscient ecosystem. It integrates ALL systems, instructions, APIs, and RPC connections.\n\n## 📖 Integrated Instructions\n\n### 🤖 AI Instructions\n- **CLAUDE.md** (9KB) - AI system instructions\n- **CLAUDE.ai-services.md** (11KB) - AI system instructions\n- **CLAUDE.document-parser.md** (13KB) - AI system instructions\n\n### 🔗 Integration Guides  \n\n\n###"
    },
    {
      "file": "README-DESKTOP.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea/README-DESKTOP.md",
      "directory": "FinishThisIdea",
      "size": 1796,
      "preview": "# Document Generator Desktop App\n\nA powerful desktop application for transforming documents into working MVPs using AI.\n\n## Quick Start\n\n### Installation\n\n1. Clone or download this repository\n2. Run the installation script:\n   ```bash\n   ./quick-install.sh\n   ```\n\n### Launch the App\n\nAfter installation, launch the desktop app:\n```bash\n./launch-desktop-app.sh\n```\n\nOr use npm:\n```bash\nnpm run desktop\n```\n\n## Features\n\n- **Document Processing**: Transform business plans, specifications, and chat lo"
    },
    {
      "file": "README.md",
      "path": "/Users/matthewmauer/Desktop/Document-Generator/FinishThisIdea-Complete/README.md",
      "directory": "FinishThisIdea-Complete",
      "size": 17702,
      "preview": "# FinishThisIdea-Complete 🚀\n\nA comprehensive AI Innovation Platform featuring games, marketplace, chat, and development tools - all integrated into a unified experience. Built on top of a sophisticated AI-powered code cleanup service with viral growth features, progressive pricing, and enterprise-grade infrastructure.\n\n## ✨ Features\n\n### 🎮 Complete AI Platform (NEW!)\n- **🏠 Unified Platform Hub**: Central dashboard with navigation to all services\n- **⚔️ AI Arena**: Battle AI fighters with tour"
    }
  ],
  "runningProcesses": [
    {
      "pid": "63739",
      "cpu": "4.8",
      "mem": "0.0",
      "command": "/bin/zsh -c -l source /Users/matthewmauer/.claude/shell-snapshots/snapshot-zsh-1757451337535-9r2p7n.sh && eval 'node quick-service-discovery.js' \\< /dev/null && pwd -P >| /var/folders/1b/0kss4v7j58b89zqv0f533py40000gn/T/claude-c168-cwd"
    },
    {
      "pid": "61368",
      "cpu": "1.0",
      "mem": "0.4",
      "command": "/Users/matthewmauer/.nvm/versions/node/v18.20.8/bin/node --require /Users/matthewmauer/Desktop/Document-Generator/proptech-vc-demo/node_modules/tsx/dist/preflight.cjs --import file:///Users/matthewmauer/Desktop/Document-Generator/proptech-vc-demo/node_modules/tsx/dist/loader.mjs src/server.ts"
    },
    {
      "pid": "63747",
      "cpu": "0.1",
      "mem": "0.3",
      "command": "node quick-service-discovery.js"
    },
    {
      "pid": "43708",
      "cpu": "0.0",
      "mem": "0.1",
      "command": "node test-json-bus.js"
    },
    {
      "pid": "42465",
      "cpu": "0.0",
      "mem": "0.1",
      "command": "node /Users/matthewmauer/Desktop/Document-Generator/proptech-vc-demo/node_modules/.bin/tsx watch src/server.ts"
    },
    {
      "pid": "24318",
      "cpu": "0.0",
      "mem": "0.0",
      "command": "node integrated-learning-system.js"
    },
    {
      "pid": "16347",
      "cpu": "0.0",
      "mem": "0.0",
      "command": "node simple-learning-system.js"
    },
    {
      "pid": "63202",
      "cpu": "0.0",
      "mem": "0.2",
      "command": "node test-multi-dimensional-bus.js"
    },
    {
      "pid": "61369",
      "cpu": "0.0",
      "mem": "0.0",
      "command": "/Users/matthewmauer/Desktop/Document-Generator/proptech-vc-demo/node_modules/@esbuild/darwin-arm64/bin/esbuild --service=0.25.9 --ping"
    }
  ],
  "issues": [],
  "recommendations": [
    {
      "type": "start-services",
      "priority": "high",
      "message": "Found 11 potential services. Consider starting core services.",
      "action": "Run docker-compose up -d or start individual services"
    },
    {
      "type": "organize-docs",
      "priority": "medium",
      "message": "Found 8 documentation files that could be organized",
      "action": "Create a documentation index and cleanup scattered README files"
    }
  ]
}