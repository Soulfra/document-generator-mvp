#!/usr/bin/env node

/**
 * üí¨ü§ñ ASK CLAUDE INTERFACE
 * =========================
 * Simple command-line interface to ask Claude for commands
 * This simulates the user asking Claude in a natural way
 */

const ClaudeInteractionHelper = require('./claude-interaction-helper');
const readline = require('readline');

class AskClaudeInterface {
    constructor() {
        this.helper = new ClaudeInteractionHelper();
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        this.setupInterface();
    }
    
    setupInterface() {
        console.log(`
üó£Ô∏èü§ñ ASK CLAUDE INTERFACE
=========================

This simulates asking me (Claude) to execute commands on your system.
Just type what you'd normally say to me!

Examples:
  "start jarvis"
  "hey claude, activate the hud"
  "can you show me the fog of war?"
  "check system status"
  "open boss room cursor"

Type 'help' for more commands, 'quit' to exit
        `);
        
        this.askQuestion();
    }
    
    askQuestion() {
        this.rl.question('\nüí¨ Ask Claude: ', async (input) => {
            const message = input.trim();
            
            if (message.toLowerCase() === 'quit' || message.toLowerCase() === 'exit') {
                console.log('\nüëã Goodbye! Claude Command Bridge is still running in the background.');
                this.rl.close();
                return;
            }
            
            if (message.toLowerCase() === 'help') {
                this.showHelp();
                this.askQuestion();
                return;
            }
            
            if (message.toLowerCase() === 'status') {
                await this.showStatus();
                this.askQuestion();
                return;
            }
            
            if (message.toLowerCase() === 'history') {
                await this.showHistory();
                this.askQuestion();
                return;
            }
            
            if (!message) {
                console.log('ü§ñ Claude: Please ask me something! Try "start jarvis" or "help"');
                this.askQuestion();
                return;
            }
            
            // Process the request through Claude interaction helper
            await this.processClaudeRequest(message);
            this.askQuestion();
        });
    }
    
    async processClaudeRequest(message) {
        console.log(`\nü§ñ Claude: Let me help you with that...`);
        
        try {
            const result = await this.helper.parseUserMessage(message);
            
            if (result.hasCommand) {
                console.log(`ü§ñ ${result.response}`);
                console.log(`‚ö° Executing command: ${result.command.command}`);
                
                // Show real-time feedback
                this.showExecutionFeedback(result.commandId);
            } else {
                console.log(`ü§ñ I understand your message, but I don't see a specific command to execute.`);
                console.log(`ü§ñ Try asking me to:`);
                console.log(`   ‚Ä¢ "start jarvis" - Launch the HUD system`);
                console.log(`   ‚Ä¢ "activate hud" - Show the overlay`);
                console.log(`   ‚Ä¢ "show fog of war" - Open 3D explorer`);
                console.log(`   ‚Ä¢ "check system" - Verify everything is working`);
            }
        } catch (error) {
            console.log(`ü§ñ I encountered an error: ${error.message}`);
            console.log(`ü§ñ The command bridge might not be running. Try: ./start-claude-bridge.sh`);
        }
    }
    
    async showExecutionFeedback(commandId) {
        // Wait and show result
        setTimeout(async () => {
            try {
                const history = await this.helper.bridge.getCommandHistory(5);
                const commandResult = history.find(h => h.id === commandId);
                
                if (commandResult) {
                    if (commandResult.status === 'completed') {
                        console.log(`‚úÖ Command completed successfully!`);
                        if (commandResult.result && commandResult.result.trim()) {
                            console.log(`üìÑ Output:`);
                            console.log(commandResult.result.slice(0, 500));
                            if (commandResult.result.length > 500) {
                                console.log('... (truncated)');
                            }
                        }
                    } else if (commandResult.status === 'failed') {
                        console.log(`‚ùå Command failed: ${commandResult.error}`);
                    } else {
                        console.log(`‚è≥ Command is still running...`);
                    }
                } else {
                    console.log(`‚è≥ Command is being processed...`);
                }
            } catch (error) {
                console.log(`ü§ñ I'm still working on your request...`);
            }
        }, 3000);
    }
    
    showHelp() {
        console.log(`
ü§ñ CLAUDE HELP
===============

Available Commands:
  start jarvis        ‚Üí Start the Jarvis HUD system
  stop jarvis         ‚Üí Stop the Jarvis HUD system  
  activate hud        ‚Üí Turn on the HUD overlay
  show fog of war     ‚Üí Open 3D website explorer
  show boss room      ‚Üí Open cursor overlay
  reasoning stats     ‚Üí Show thought statistics
  check system        ‚Üí Verify system health
  ai context          ‚Üí Get reasoning context for AIs

System Commands:
  help               ‚Üí Show this help
  status             ‚Üí Show system status
  history            ‚Üí Show recent commands
  quit/exit          ‚Üí Exit this interface

Natural Language:
You can ask in natural ways like:
  "hey claude, can you start jarvis for me?"
  "show me the hud overlay"
  "i want to see the fog of war explorer"
  "check if everything is working"
        `);
    }
    
    async showStatus() {
        console.log(`\nüìä SYSTEM STATUS`);
        console.log(`================`);
        
        try {
            const availableCommands = await this.helper.bridge.getAvailableCommands();
            console.log(`ü§ñ Available commands: ${availableCommands.length}`);
            
            const recentHistory = await this.helper.bridge.getCommandHistory(5);
            console.log(`üìú Recent executions: ${recentHistory.length}`);
            
            const conversations = await this.helper.getRecentConversations(5);
            console.log(`üí¨ Recent conversations: ${conversations.length}`);
            
            // Check if bridge is running
            const fs = require('fs');
            const path = require('path');
            const pidFile = path.join('.reasoning-viz', 'claude-bridge.pid');
            
            if (fs.existsSync(pidFile)) {
                const pid = fs.readFileSync(pidFile, 'utf8').trim();
                try {
                    process.kill(pid, 0); // Check if process exists
                    console.log(`üîÑ Command bridge: ‚úÖ Running (PID: ${pid})`);
                } catch {
                    console.log(`üîÑ Command bridge: ‚ùå Not running`);
                }
            } else {
                console.log(`üîÑ Command bridge: ‚ùå Not started`);
            }
            
        } catch (error) {
            console.log(`‚ùå Error checking status: ${error.message}`);
        }
    }
    
    async showHistory() {
        console.log(`\nüìú RECENT COMMAND HISTORY`);
        console.log(`=========================`);
        
        try {
            const history = await this.helper.bridge.getCommandHistory(10);
            
            if (history.length === 0) {
                console.log(`No commands executed yet.`);
                return;
            }
            
            history.forEach((cmd, index) => {
                const status = cmd.status === 'completed' ? '‚úÖ' : 
                              cmd.status === 'failed' ? '‚ùå' : '‚è≥';
                const time = new Date(cmd.timestamp).toLocaleString();
                console.log(`${status} ${cmd.type} - ${time}`);
                
                if (cmd.error) {
                    console.log(`    Error: ${cmd.error}`);
                }
            });
        } catch (error) {
            console.log(`‚ùå Error getting history: ${error.message}`);
        }
    }
}

// Start the interface
new AskClaudeInterface();