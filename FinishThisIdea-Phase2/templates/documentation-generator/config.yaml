name: "Documentation Generator"
version: "1.0.0"
description: "Automatically generate comprehensive documentation for any codebase with AI"
author: "FinishThisIdea"
category: "documentation"

service:
  type: "code-analysis"
  pricing:
    model: "fixed"
    base: 3
  
  sla:
    processingTime: 15 # minutes
    accuracy: 95 # percentage
    uptime: 99.9

infrastructure:
  frontend:
    enabled: true
    framework: "next"
    features:
      - "upload"
      - "progress-tracking"
      - "preview"
      - "download"
      - "syntax-highlighting"
  
  backend:
    framework: "express"
    port: 3003
    features:
      - "api"
      - "queue-processing"
      - "webhooks"
      - "code-parsing"
      - "markdown-generation"
  
  database:
    primary: "postgresql"
    cache: "redis"
    migrations: true
    seeds: false
  
  queue:
    provider: "bull"
    concurrency: 3
    retries: 3
    timeout: 900000 # 15 minutes
  
  storage:
    provider: "s3"
    bucket: "documentation-storage"
    maxFileSize: 100 # MB
    allowedFormats:
      - ".zip"
      - ".tar"
      - ".tar.gz"
      - ".7z"

ai:
  providers:
    - name: "ollama"
      models:
        - "codellama"
        - "mistral"
        - "deepseek-coder"
      priority: 1
      maxCost: 0
    - name: "openai"
      models:
        - "gpt-3.5-turbo"
        - "gpt-4"
      priority: 2
      maxCost: 0.50
    - name: "anthropic"
      models:
        - "claude-3-haiku"
        - "claude-3-sonnet"
      priority: 3
      maxCost: 0.75
  
  routing:
    strategy: "complexity-based"
    localFirst: true
    hybridThreshold: 0.7
  
  quality:
    minConfidence: 0.8
    validationRequired: true
    humanReviewThreshold: 0.5

prompts:
  system: |
    You are an expert technical documentation writer. Your task is to analyze code 
    and generate comprehensive, clear, and well-structured documentation.
    
    Focus on:
    - Clear explanations of what the code does
    - API documentation with examples
    - Installation and setup instructions
    - Architecture overview
    - Best practices and usage patterns
    
    Output in Markdown format with proper headings and code examples.
  
  analysis: |
    Analyze this codebase and identify:
    1. Main entry points
    2. Core modules and their purposes
    3. API endpoints or exported functions
    4. Configuration options
    5. Dependencies and requirements
    
    Code structure:
    {{codeStructure}}
    
    Sample files:
    {{sampleFiles}}

features:
  - title: "Automatic API Documentation"
    description: "Extracts and documents all API endpoints, parameters, and responses"
  - title: "Code Examples"
    description: "Generates working examples for every function and endpoint"
  - title: "Architecture Diagrams"
    description: "Creates visual diagrams of your system architecture"
  - title: "Setup Instructions"
    description: "Detailed installation and configuration guides"
  - title: "Interactive Documentation"
    description: "Searchable, browsable documentation with syntax highlighting"
  - title: "Multiple Formats"
    description: "Export to Markdown, HTML, PDF, or DocBook"

templates:
  readme: |
    # {{projectName}}
    
    {{description}}
    
    ## Table of Contents
    
    - [Installation](#installation)
    - [Quick Start](#quick-start)
    - [API Reference](#api-reference)
    - [Configuration](#configuration)
    - [Examples](#examples)
    - [Contributing](#contributing)
    - [License](#license)
    
    ## Installation
    
    {{installation}}
    
    ## Quick Start
    
    {{quickStart}}
    
    ## API Reference
    
    {{apiReference}}
    
    ## Configuration
    
    {{configuration}}
    
    ## Examples
    
    {{examples}}
    
    ## Contributing
    
    {{contributing}}
    
    ## License
    
    {{license}}

  api: |
    ## {{endpoint.method}} {{endpoint.path}}
    
    {{endpoint.description}}
    
    ### Parameters
    
    {{#each endpoint.parameters}}
    - `{{name}}` ({{type}}{{#if required}}, required{{/if}}): {{description}}
    {{/each}}
    
    ### Request Body
    
    ```json
    {{endpoint.requestBody}}
    ```
    
    ### Response
    
    ```json
    {{endpoint.response}}
    ```
    
    ### Example
    
    ```{{endpoint.language}}
    {{endpoint.example}}
    ```

processing:
  steps:
    - name: "Extract Code Structure"
      weight: 0.15
      actions:
        - "Parse file tree"
        - "Identify entry points"
        - "Map dependencies"
    
    - name: "Analyze Code"
      weight: 0.30
      actions:
        - "Extract functions and classes"
        - "Parse JSDoc/docstrings"
        - "Identify API endpoints"
        - "Analyze code patterns"
    
    - name: "Generate Documentation"
      weight: 0.40
      actions:
        - "Create README"
        - "Generate API docs"
        - "Write setup guides"
        - "Create examples"
    
    - name: "Format and Validate"
      weight: 0.15
      actions:
        - "Format markdown"
        - "Validate links"
        - "Generate TOC"
        - "Create search index"

output:
  format: "zip"
  structure:
    - "README.md"
    - "docs/"
    - "docs/api/"
    - "docs/guides/"
    - "docs/examples/"
    - "docs/architecture/"
    - ".docconfig.json"

validation:
  rules:
    - field: "codebase"
      check: "size"
      max: 100 # MB
      message: "Codebase too large. Please remove build artifacts and dependencies."
    
    - field: "codebase"
      check: "files"
      min: 1
      message: "No code files found in the uploaded archive."
    
    - field: "codebase"
      check: "languages"
      supported: ["javascript", "typescript", "python", "go", "rust", "java"]
      message: "Unsupported programming language."

examples:
  - title: "Node.js Project"
    before: |
      // server.js
      const express = require('express');
      const app = express();
      app.get('/users/:id', (req, res) => {
        // get user logic
      });
    after: |
      ## GET /users/:id
      
      Retrieves a user by their ID.
      
      ### Parameters
      - `id` (string, required): The user's unique identifier
      
      ### Response
      ```json
      {
        "id": "123",
        "name": "John Doe",
        "email": "john@example.com"
      }
      ```

  - title: "Python Class"
    before: |
      class DataProcessor:
          def process(self, data, options=None):
              # processing logic
              pass
    after: |
      ## DataProcessor
      
      Handles data processing operations.
      
      ### Methods
      
      #### process(data, options=None)
      
      Processes input data according to specified options.
      
      **Parameters:**
      - `data` (Any): The data to process
      - `options` (dict, optional): Processing options
      
      **Returns:**
      - `ProcessedData`: The processed result

faq:
  - question: "What languages are supported?"
    answer: "We support JavaScript, TypeScript, Python, Go, Rust, and Java. More languages coming soon!"
  
  - question: "How long does it take?"
    answer: "Most projects are documented within 10-15 minutes. Larger codebases may take up to 30 minutes."
  
  - question: "Can I customize the output?"
    answer: "Yes! You can configure the documentation style, format, and structure through our API."
  
  - question: "What about private code?"
    answer: "Your code is processed securely and deleted immediately after generation. We never store your source code."