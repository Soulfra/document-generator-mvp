// update-api-keys.js - Update placeholder API keys with real ones
// This script helps configure real API keys in the crypto vault

const readline = require('readline');
const fs = require('fs').promises;
const path = require('path');

console.log(`
üîë API KEY UPDATER üîë
Replace placeholder keys with real API credentials
`);

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function updateKeys() {
    console.log('\nüìù Please provide your API keys (press Enter to skip):\n');
    
    const keys = {};
    
    // Stripe Keys
    console.log('üí≥ STRIPE CONFIGURATION:');
    keys.STRIPE_SECRET_KEY_TEST = await question('Stripe Test Secret Key (sk_test_...): ');
    keys.STRIPE_PUBLISHABLE_KEY_TEST = await question('Stripe Test Publishable Key (pk_test_...): ');
    
    // OpenAI Key
    console.log('\nü§ñ OPENAI CONFIGURATION:');
    keys.OPENAI_API_KEY = await question('OpenAI API Key (sk-proj-...): ');
    
    // Anthropic Key
    console.log('\nüß† ANTHROPIC CONFIGURATION:');
    keys.ANTHROPIC_API_KEY = await question('Anthropic API Key (sk-ant-api03-...): ');
    
    // GitHub Token
    console.log('\nüêô GITHUB CONFIGURATION:');
    keys.GITHUB_TOKEN = await question('GitHub Personal Access Token (ghp_...): ');
    
    // Create .env file with provided keys
    const envContent = [];
    
    // Add header
    envContent.push('# Document Generator API Keys');
    envContent.push('# Generated by update-api-keys.js');
    envContent.push(`# Generated at: ${new Date().toISOString()}`);
    envContent.push('');
    
    // Add provided keys
    for (const [key, value] of Object.entries(keys)) {
        if (value && value.trim()) {
            envContent.push(`${key}=${value.trim()}`);
        }
    }
    
    // Add master keys
    envContent.push('');
    envContent.push('# Auto-generated master keys');
    envContent.push(`DGAI_MASTER_KEY=dgai_master_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`);
    envContent.push(`DGAI_USER_KEY=dgai_user_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`);
    envContent.push(`DGAI_ADMIN_KEY=dgai_admin_${Date.now()}_${Math.random().toString(36).substr(2, 16)}`);
    
    // Write .env file
    const envPath = path.join(__dirname, '.env');
    await fs.writeFile(envPath, envContent.join('\n'));
    
    console.log('\n‚úÖ API keys updated successfully!');
    console.log(`üìÅ Configuration saved to: ${envPath}`);
    
    // Update crypto vault
    console.log('\nüîê Updating crypto vault with real keys...');
    
    try {
        const response = await fetch('http://localhost:8888/update-keys', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(keys)
        });
        
        if (response.ok) {
            console.log('‚úÖ Crypto vault updated successfully!');
        } else {
            console.log('‚ö†Ô∏è Could not update crypto vault - service may not be running');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Crypto vault service not available - keys saved to .env only');
    }
    
    console.log('\nüéâ Setup complete! Your API keys are configured.');
    console.log('\nüìã Next steps:');
    console.log('1. Restart all services to use new keys');
    console.log('2. Test Stripe integration with test keys');
    console.log('3. Verify AI services are responding');
    
    rl.close();
}

// Run the updater
updateKeys().catch(console.error);