name: "{{name}}"
version: "1.0.0"
description: "{{description}}"
author: "{{author}}"
category: "{{category}}"

service:
  type: "{{serviceType}}"
  pricing:
    model: "{{pricingModel}}" # fixed, usage, subscription
    base: {{basePrice}}
    {{#ifEquals pricingModel "usage"}}
    usage:
      metric: "{{usageMetric}}"
      rate: {{usageRate}}
    {{/ifEquals}}
    {{#ifEquals pricingModel "subscription"}}
    subscription:
      monthly: {{monthlyPrice}}
      annual: {{annualPrice}}
    {{/ifEquals}}
  
  sla:
    processingTime: {{processingTime}} # minutes
    accuracy: {{accuracyTarget}} # percentage
    uptime: 99.9

infrastructure:
  frontend:
    enabled: {{hasFrontend}}
    framework: "next"
    features:
      - "upload"
      - "progress-tracking"
      - "download"
      {{#each frontendFeatures}}
      - "{{this}}"
      {{/each}}
  
  backend:
    framework: "express"
    port: {{defaultPort}}
    features:
      - "api"
      - "queue-processing"
      - "webhooks"
      {{#each backendFeatures}}
      - "{{this}}"
      {{/each}}
  
  database:
    primary: "postgresql"
    cache: "redis"
    migrations: true
    seeds: {{includeSeeds}}
  
  queue:
    provider: "bull"
    concurrency: {{queueConcurrency}}
    retries: 3
    timeout: {{jobTimeout}}
  
  storage:
    provider: "{{storageProvider}}" # s3, minio, local
    bucket: "{{name}}-storage"
    maxFileSize: {{maxFileSize}} # MB
    allowedFormats:
      {{#each allowedFormats}}
      - "{{this}}"
      {{/each}}

ai:
  providers:
    - name: "ollama"
      models:
        {{#each ollamaModels}}
        - "{{this}}"
        {{/each}}
      priority: 1
      maxCost: 0
    {{#if useOpenAI}}
    - name: "openai"
      models:
        {{#each openaiModels}}
        - "{{this}}"
        {{/each}}
      priority: 2
      maxCost: {{openaiMaxCost}}
    {{/if}}
    {{#if useAnthropic}}
    - name: "anthropic"
      models:
        {{#each anthropicModels}}
        - "{{this}}"
        {{/each}}
      priority: 3
      maxCost: {{anthropicMaxCost}}
    {{/if}}
  
  routing:
    strategy: "{{routingStrategy}}" # simple, complexity-based, cost-optimized
    localFirst: {{localFirst}}
    hybridThreshold: {{hybridThreshold}}
  
  quality:
    minConfidence: {{minConfidence}}
    validationRequired: {{validationRequired}}
    humanReviewThreshold: {{humanReviewThreshold}}

deployment:
  platform: "{{deploymentPlatform}}" # railway, vercel, docker, kubernetes
  
  scaling:
    enabled: {{autoScaling}}
    minInstances: {{minInstances}}
    maxInstances: {{maxInstances}}
    targetCPU: 70
    targetMemory: 80
  
  environment:
    NODE_ENV: "production"
    LOG_LEVEL: "info"
    {{#each environmentVariables}}
    {{this.key}}: "{{this.value}}"
    {{/each}}
  
  health:
    endpoint: "/health"
    checks:
      - "database"
      - "redis"
      - "storage"
      {{#if useExternalAPIs}}
      - "external-apis"
      {{/if}}

monitoring:
  services:
    - "prometheus"
    - "grafana"
    {{#each monitoringServices}}
    - "{{this}}"
    {{/each}}
  
  metrics:
    - "response-time"
    - "error-rate"
    - "throughput"
    - "queue-depth"
    {{#each customMetrics}}
    - "{{this}}"
    {{/each}}
  
  alerts:
    - metric: "error-rate"
      threshold: 5
      window: "5m"
      severity: "warning"
    - metric: "response-time"
      threshold: 1000
      window: "5m"
      severity: "critical"
    {{#each customAlerts}}
    - metric: "{{this.metric}}"
      threshold: {{this.threshold}}
      window: "{{this.window}}"
      severity: "{{this.severity}}"
    {{/each}}

security:
  authentication:
    type: "{{authType}}" # api-key, jwt, oauth
    {{#ifEquals authType "oauth"}}
    providers:
      {{#each oauthProviders}}
      - "{{this}}"
      {{/each}}
    {{/ifEquals}}
  
  rateLimit:
    enabled: true
    window: 60000 # 1 minute
    max: {{rateLimitMax}}
  
  cors:
    enabled: true
    origins:
      {{#each corsOrigins}}
      - "{{this}}"
      {{/each}}
  
  encryption:
    atRest: true
    inTransit: true
    algorithm: "AES-256-GCM"

testing:
  coverage:
    target: {{coverageTarget}}
    threshold: {{coverageThreshold}}
  
  types:
    - "unit"
    - "integration"
    {{#if includeE2E}}
    - "e2e"
    {{/if}}
    {{#if includePerformance}}
    - "performance"
    {{/if}}
  
  frameworks:
    unit: "jest"
    integration: "jest"
    {{#if includeE2E}}
    e2e: "playwright"
    {{/if}}
    {{#if includePerformance}}
    performance: "k6"
    {{/if}}

documentation:
  autoGenerate: true
  formats:
    - "markdown"
    - "openapi"
    {{#each docFormats}}
    - "{{this}}"
    {{/each}}
  
  sections:
    - "overview"
    - "installation"
    - "configuration"
    - "api-reference"
    - "examples"
    {{#each customDocSections}}
    - "{{this}}"
    {{/each}}