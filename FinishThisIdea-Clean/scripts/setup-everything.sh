#!/bin/bash

# 🎯 FinishThisIdea - Complete Setup Script
# This script sets up EVERYTHING for you!
# Just run: ./scripts/setup-everything.sh

set -e  # Stop on any error

# Colors for pretty output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fancy banner
echo -e "${BLUE}"
echo "╔═══════════════════════════════════════════╗"
echo "║        🚀 FinishThisIdea Setup 🚀         ║"
echo "║      Making your $1 dreams come true!     ║"
echo "╚═══════════════════════════════════════════╝"
echo -e "${NC}"

# Function to print status
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if running as root (bad!)
if [ "$EUID" -eq 0 ]; then 
   print_error "Please don't run this as root/sudo!"
   exit 1
fi

# Step 1: Check system requirements
print_status "Checking system requirements..."

# Check Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node -v)
    print_success "Node.js installed: $NODE_VERSION"
else
    print_error "Node.js not found!"
    echo ""
    echo "📦 To install Node.js:"
    echo "   - Mac: brew install node"
    echo "   - Windows: Download from https://nodejs.org"
    echo "   - Linux: sudo apt install nodejs npm"
    exit 1
fi

# Check npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm -v)
    print_success "npm installed: $NPM_VERSION"
else
    print_error "npm not found!"
    exit 1
fi

# Check Docker (optional but recommended)
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version)
    print_success "Docker installed: $DOCKER_VERSION"
    DOCKER_AVAILABLE=true
else
    print_warning "Docker not found (optional but recommended)"
    DOCKER_AVAILABLE=false
fi

# Step 2: Create necessary directories
print_status "Creating project structure..."
mkdir -p src/mvp-cleanup-service/{backend,frontend,ai-processor}
mkdir -p src/{tinder-ui,llm-router,template-engine,enterprise}
mkdir -p scripts
mkdir -p uploads
mkdir -p logs
print_success "Directory structure created"

# Step 3: Install dependencies
print_status "Installing dependencies (this might take a few minutes)..."

# Install root dependencies
if [ -f "package.json" ]; then
    npm install
    print_success "Root dependencies installed"
else
    print_warning "No root package.json found, skipping..."
fi

# Install backend dependencies
if [ -f "src/mvp-cleanup-service/backend/package.json" ]; then
    print_status "Installing backend dependencies..."
    cd src/mvp-cleanup-service/backend
    npm install
    cd ../../..
    print_success "Backend dependencies installed"
fi

# Install frontend dependencies
if [ -f "src/mvp-cleanup-service/frontend/package.json" ]; then
    print_status "Installing frontend dependencies..."
    cd src/mvp-cleanup-service/frontend
    npm install
    cd ../../..
    print_success "Frontend dependencies installed"
fi

# Step 4: Setup environment files
print_status "Setting up environment files..."

# Create .env if it doesn't exist
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        cp .env.example .env
        print_success "Created .env from .env.example"
        print_warning "Please edit .env with your actual values!"
    else
        # Create a basic .env
        cat > .env << EOF
# FinishThisIdea Environment Variables
# Generated by setup script on $(date)

# Database
DATABASE_URL=postgresql://finishthisidea:localpassword123@localhost:5432/finishthisidea

# Redis
REDIS_URL=redis://localhost:6379

# Storage
S3_ENDPOINT=http://localhost:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin123
S3_BUCKET=finishthisidea-uploads

# AI Providers
OLLAMA_URL=http://localhost:11434
# OPENAI_API_KEY=sk-... # Optional
# ANTHROPIC_API_KEY=sk-ant-... # Optional

# Stripe (Get from https://dashboard.stripe.com/test/apikeys)
STRIPE_SECRET_KEY=sk_test_YOUR_KEY_HERE
STRIPE_WEBHOOK_SECRET=whsec_YOUR_SECRET_HERE

# App Config
JWT_SECRET=your-super-secret-jwt-key-$(openssl rand -hex 32)
FRONTEND_URL=http://localhost:3000
API_URL=http://localhost:3001

# Feature Flags
ENABLE_OLLAMA=true
ENABLE_OPENAI=false
ENABLE_ANTHROPIC=false
EOF
        print_success "Created .env with default values"
        print_warning "Don't forget to add your Stripe keys!"
    fi
fi

# Step 5: Database setup
print_status "Setting up database..."

if [ "$DOCKER_AVAILABLE" = true ]; then
    # Use Docker
    print_status "Starting PostgreSQL with Docker..."
    docker-compose up -d postgres
    sleep 5  # Wait for postgres to start
    
    # Run migrations
    print_status "Running database migrations..."
    cd src/mvp-cleanup-service/backend
    npx prisma generate
    npx prisma migrate deploy
    cd ../../..
    print_success "Database ready!"
else
    # Check if PostgreSQL is installed locally
    if command -v psql &> /dev/null; then
        print_warning "Using local PostgreSQL installation"
        print_status "Please make sure PostgreSQL is running!"
    else
        print_error "PostgreSQL not found! Please install it or use Docker"
        echo ""
        echo "To install PostgreSQL:"
        echo "   - Mac: brew install postgresql"
        echo "   - Ubuntu: sudo apt install postgresql"
        echo "   - Or just install Docker: https://docker.com"
        exit 1
    fi
fi

# Step 6: Setup storage (MinIO)
if [ "$DOCKER_AVAILABLE" = true ]; then
    print_status "Starting MinIO storage..."
    docker-compose up -d minio
    
    # Wait for MinIO to start
    sleep 5
    
    # Create bucket
    print_status "Creating storage bucket..."
    docker run --rm --network finishthisidea-network \
        minio/mc alias set myminio http://minio:9000 minioadmin minioadmin123 2>/dev/null || true
    docker run --rm --network finishthisidea-network \
        minio/mc mb myminio/finishthisidea-uploads 2>/dev/null || true
    print_success "Storage ready!"
fi

# Step 7: Setup Ollama (optional but recommended)
if [ "$DOCKER_AVAILABLE" = true ]; then
    print_status "Setting up Ollama (free local AI)..."
    docker-compose up -d ollama
    
    print_status "Downloading AI models (this might take a while)..."
    docker exec finishthisidea-ollama ollama pull codellama:7b || true
    print_success "AI models ready!"
else
    print_warning "Skipping Ollama setup (Docker not available)"
    echo "You can install Ollama manually from: https://ollama.ai"
fi

# Step 8: Final checks
print_status "Running final checks..."

# Create uploads directory
mkdir -p uploads
chmod 755 uploads

# Create logs directory
mkdir -p logs
chmod 755 logs

# Make scripts executable
chmod +x scripts/*.sh 2>/dev/null || true

# Step 9: Success!
echo ""
echo -e "${GREEN}"
echo "╔═══════════════════════════════════════════╗"
echo "║        ✅ Setup Complete! ✅              ║"
echo "╚═══════════════════════════════════════════╝"
echo -e "${NC}"
echo ""
echo "🎯 Next steps:"
echo ""
echo "1. Start the development servers:"
echo "   ${BLUE}npm run dev${NC}"
echo ""
echo "2. Or use Docker (recommended):"
echo "   ${BLUE}docker-compose up${NC}"
echo ""
echo "3. Visit your app:"
echo "   ${GREEN}http://localhost:3000${NC}"
echo ""
echo "4. View the admin dashboard:"
echo "   ${GREEN}http://localhost:3001/admin/queues${NC}"
echo ""
echo "5. Don't forget to:"
echo "   - Add your Stripe keys to .env"
echo "   - Read the documentation in /docs"
echo ""
echo "Need help? Join our Discord: https://discord.gg/finishthisidea"
echo ""
echo "Happy building! 🚀"