import client from 'prom-client';
export declare class PrometheusMetricsService {
    private static instance;
    httpRequestDuration: client.Histogram<string>;
    httpRequestTotal: client.Counter<string>;
    httpRequestSizeBytes: client.Histogram<string>;
    httpResponseSizeBytes: client.Histogram<string>;
    jobsTotal: client.Counter<string>;
    jobsCurrentlyProcessing: client.Gauge<string>;
    uploadsTotal: client.Counter<string>;
    apiKeysUsage: client.Counter<string>;
    paymentsTotal: client.Counter<string>;
    usersRegistered: client.Gauge<string>;
    nodeVersion: client.Gauge<string>;
    processStartTime: client.Gauge<string>;
    processUptime: client.Gauge<string>;
    databaseConnections: client.Gauge<string>;
    redisConnections: client.Gauge<string>;
    memoryUsage: client.Gauge<string>;
    cpuUsage: client.Gauge<string>;
    eventLoopLag: client.Histogram<string>;
    aiRequestsTotal: client.Counter<string>;
    qrCodesGenerated: client.Counter<string>;
    socialSharesTotal: client.Counter<string>;
    achievementsUnlocked: client.Counter<string>;
    sloCompliance: client.Gauge<string>;
    errorBudgetRemaining: client.Gauge<string>;
    incidentsCreated: client.Counter<string>;
    incidentsResolved: client.Counter<string>;
    incidentErrors: client.Counter<string>;
    backupsScheduled: client.Counter<string>;
    backupsCompleted: client.Counter<string>;
    backupErrors: client.Counter<string>;
    private registry;
    constructor();
    static getInstance(): PrometheusMetricsService;
    private initializeMetrics;
    private setupDefaultMetrics;
    private startPeriodicCollection;
    private updateMemoryMetrics;
    private updateSystemMetrics;
    private updateBusinessMetrics;
    createHttpMetricsMiddleware(): any;
    private normalizeRoute;
    recordJobCreated(tier: string): void;
    recordJobCompleted(status: string, tier: string): void;
    recordUpload(fileType: string, status: string): void;
    recordApiKeyUsage(keyId: string, tier: string, endpoint: string): void;
    recordPayment(status: string, amount: number): void;
    recordAiRequest(provider: string, model: string, status: string): void;
    recordQrCodeGenerated(type: string): void;
    recordSocialShare(platform: string, contentType: string): void;
    recordAchievementUnlocked(achievementType: string, tier: string): void;
    private getAmountRange;
    getMetrics(): Promise<string>;
    getRegistry(): client.Registry;
    reset(): void;
}
export declare const prometheusMetrics: PrometheusMetricsService;
//# sourceMappingURL=prometheus-metrics.service.d.ts.map