#!/bin/bash
# demo-multi-agent.sh - Simplified multi-agent demo

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Configuration
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${MAGENTA}=== Multi-Agent Documentation Demo ===${NC}"
echo
echo -e "${CYAN}This demo shows how multiple agents can work on documentation in parallel${NC}"
echo

# Define the 29 remaining documentation tasks
declare -a TASKS=(
    # Integration guides (9 files)
    "docs/07-integrations/github-integration.md"
    "docs/07-integrations/vscode-integration.md"
    "docs/07-integrations/ci-cd-integration.md"
    "docs/07-integrations/docker-integration.md"
    "docs/07-integrations/kubernetes-integration.md"
    "docs/07-integrations/slack-integration.md"
    "docs/07-integrations/jira-integration.md"
    "docs/07-integrations/monitoring-integration.md"
    "docs/07-integrations/database-integration.md"
    # Operations docs (10 files)
    "docs/08-operations/monitoring.md"
    "docs/08-operations/logging.md"
    "docs/08-operations/backup-recovery.md"
    "docs/08-operations/scaling.md"
    "docs/08-operations/security-operations.md"
    "docs/08-operations/incident-response.md"
    "docs/08-operations/performance-tuning.md"
    "docs/08-operations/cost-optimization.md"
    "docs/08-operations/maintenance.md"
    "docs/08-operations/disaster-recovery.md"
    # Troubleshooting docs (9 files)
    "docs/09-troubleshooting/common-errors.md"
    "docs/09-troubleshooting/performance-issues.md"
    "docs/09-troubleshooting/integration-problems.md"
    "docs/09-troubleshooting/deployment-failures.md"
    "docs/09-troubleshooting/api-errors.md"
    "docs/09-troubleshooting/database-issues.md"
    "docs/09-troubleshooting/authentication-problems.md"
    "docs/09-troubleshooting/llm-failures.md"
    "docs/09-troubleshooting/debugging-guide.md"
)

# Simulate 3 agents working on first 3 tasks
echo -e "${BLUE}Starting 3 documentation agents...${NC}"
echo

# Agent 1
echo -e "${GREEN}[Agent-1]${NC} Assigned: github-integration.md"
echo -e "${GREEN}[Agent-1]${NC} Creating documentation structure..."

# Agent 2
echo -e "${YELLOW}[Agent-2]${NC} Assigned: vscode-integration.md"
echo -e "${YELLOW}[Agent-2]${NC} Creating documentation structure..."

# Agent 3
echo -e "${CYAN}[Agent-3]${NC} Assigned: ci-cd-integration.md"
echo -e "${CYAN}[Agent-3]${NC} Creating documentation structure..."

echo
echo -e "${MAGENTA}Simulating parallel work...${NC}"

# Create the actual files
for i in {0..2}; do
    task="${TASKS[$i]}"
    filepath="$PROJECT_ROOT/$task"
    mkdir -p "$(dirname "$filepath")"
    
    # Generate content based on filename
    filename=$(basename "$task" .md)
    title=$(echo "$filename" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))} 1')
    
    cat > "$filepath" << EOF
# $title

## Overview

This guide covers the integration of FinishThisIdea with $(echo $filename | cut -d'-' -f1).

## Prerequisites

- FinishThisIdea API key
- $(echo $filename | cut -d'-' -f1) account/installation
- Basic understanding of REST APIs

## Installation

\`\`\`bash
npm install @finishthisidea/$(echo $filename | cut -d'-' -f1)-integration
\`\`\`

## Configuration

\`\`\`javascript
const FinishThisIdea = require('@finishthisidea/sdk');
const ${filename//-/_} = require('@finishthisidea/$(echo $filename | cut -d'-' -f1)-integration');

const client = new FinishThisIdea({
  apiKey: process.env.FINISHTHISIDEA_API_KEY,
  integrations: {
    $(echo $filename | cut -d'-' -f1): ${filename//-/_}
  }
});
\`\`\`

## Usage Examples

### Basic Integration

\`\`\`javascript
// Example usage here
await client.$(echo $filename | cut -d'-' -f1).connect();
\`\`\`

## Best Practices

1. Always validate API responses
2. Use environment variables for sensitive data
3. Implement proper error handling
4. Monitor rate limits

## Troubleshooting

See [Troubleshooting Guide](../09-troubleshooting/$(echo $filename | cut -d'-' -f1)-problems.md) for common issues.

---

*Generated by Multi-Agent Documentation System*
*Date: $(date)*
EOF
    
    echo -e "${GREEN}âœ“${NC} Created: $task"
done

echo
echo -e "${BLUE}=== Summary ===${NC}"
echo -e "Documentation progress: ${GREEN}54/80 files (67.5%)${NC}"
echo -e "Remaining tasks: ${YELLOW}26 files${NC}"
echo
echo -e "${CYAN}Next steps:${NC}"
echo "1. Review generated documentation"
echo "2. Run './scripts/agent-coordinator.sh assign <next-task>' to continue"
echo "3. Use dashboard at http://localhost:3333 to monitor progress"
echo
echo -e "${GREEN}Demo completed!${NC}"