name: 🚀 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Version Validation
  validate-version:
    name: 📋 Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "📦 Release version: $VERSION"
          echo "🔖 Pre-release: $IS_PRERELEASE"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid"

  # Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    uses: ./.github/workflows/ci.yml
    needs: validate-version

  # Create Release Artifacts
  create-artifacts:
    name: 📦 Create Artifacts
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build backend
        run: npm run build
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      
      - name: Create deployment package
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Create deployment directory
          mkdir -p release/finishthisidea-$VERSION
          
          # Copy essential files
          cp -r dist release/finishthisidea-$VERSION/
          cp -r frontend/dist release/finishthisidea-$VERSION/frontend-dist
          cp -r prisma release/finishthisidea-$VERSION/
          cp -r public release/finishthisidea-$VERSION/
          cp package.json release/finishthisidea-$VERSION/
          cp package-lock.json release/finishthisidea-$VERSION/
          cp docker-compose.yml release/finishthisidea-$VERSION/
          cp docker-compose.ai-api.yml release/finishthisidea-$VERSION/
          cp Dockerfile* release/finishthisidea-$VERSION/
          cp deploy.sh release/finishthisidea-$VERSION/
          cp README.md release/finishthisidea-$VERSION/
          cp QUICKSTART.md release/finishthisidea-$VERSION/
          cp SETUP.md release/finishthisidea-$VERSION/
          cp -r docs release/finishthisidea-$VERSION/
          cp .env.example release/finishthisidea-$VERSION/
          
          # Create production package
          cd release
          tar -czf finishthisidea-$VERSION.tar.gz finishthisidea-$VERSION/
          zip -r finishthisidea-$VERSION.zip finishthisidea-$VERSION/
      
      - name: Generate checksums
        working-directory: ./release
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          sha256sum finishthisidea-$VERSION.tar.gz > finishthisidea-$VERSION.tar.gz.sha256
          sha256sum finishthisidea-$VERSION.zip > finishthisidea-$VERSION.zip.sha256
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release/
          retention-days: 30

  # Build and Push Docker Images
  build-docker-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            type=raw,value=latest,enable=${{ needs.validate-version.outputs.is_prerelease == 'false' }}
      
      - name: Build and push main image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push AI API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ai-api
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-ai-api:${{ needs.validate-version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-ai-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push Analytics image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.analytics
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:${{ needs.validate-version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-analytics:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Generate Release Notes
  generate-release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-version
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "📋 Changes since $PREVIOUS_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            echo "📋 Initial release"
            CHANGELOG="Initial release of FinishThisIdea Platform"
          fi
          
          # Create formatted changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## 🚀 Features
          - AI-powered code cleanup and optimization
          - Multi-tier platform with enterprise features
          - Real-time analytics and monitoring
          - Social sharing and viral growth components
          - Advanced agent orchestration system
          - Comprehensive API documentation
          - Docker-based deployment
          
          ## 🔧 Technical Details
          - **Backend**: Node.js + TypeScript + Prisma + PostgreSQL
          - **Frontend**: React + TypeScript + Vite + Tailwind CSS
          - **Infrastructure**: Docker + Redis + MinIO + Ollama
          - **Monitoring**: Prometheus + Grafana + Sentry
          - **AI**: Claude + GPT-4 + Local LLM support
          
          ## 📦 Docker Images
          - Main Platform: \`ghcr.io/${{ github.repository }}:$VERSION\`
          - AI API: \`ghcr.io/${{ github.repository }}-ai-api:$VERSION\`
          - Analytics: \`ghcr.io/${{ github.repository }}-analytics:$VERSION\`
          
          ## 🚀 Quick Start
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/finishthisidea-$VERSION.tar.gz
          tar -xzf finishthisidea-$VERSION.tar.gz
          cd finishthisidea-$VERSION
          
          # Quick setup
          ./deploy.sh
          \`\`\`
          
          For detailed setup instructions, see [QUICKSTART.md](QUICKSTART.md).
          EOF
          
          # Output for GitHub
          CHANGELOG_ENCODED=$(cat CHANGELOG.md | base64 -w 0)
          echo "changelog=$CHANGELOG_ENCODED" >> $GITHUB_OUTPUT
      
      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: CHANGELOG.md

  # Create GitHub Release
  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [validate-version, create-artifacts, build-docker-images, generate-release-notes]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: release/
      
      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog
          path: ./
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          release_name: FinishThisIdea Platform ${{ needs.validate-version.outputs.version }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
      
      - name: Upload release assets
        working-directory: ./release
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Upload tar.gz
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/gzip" \
               --data-binary @finishthisidea-$VERSION.tar.gz \
               "${{ steps.create_release.outputs.upload_url }}?name=finishthisidea-$VERSION.tar.gz"
          
          # Upload zip
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/zip" \
               --data-binary @finishthisidea-$VERSION.zip \
               "${{ steps.create_release.outputs.upload_url }}?name=finishthisidea-$VERSION.zip"
          
          # Upload checksums
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: text/plain" \
               --data-binary @finishthisidea-$VERSION.tar.gz.sha256 \
               "${{ steps.create_release.outputs.upload_url }}?name=finishthisidea-$VERSION.tar.gz.sha256"
          
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: text/plain" \
               --data-binary @finishthisidea-$VERSION.zip.sha256 \
               "${{ steps.create_release.outputs.upload_url }}?name=finishthisidea-$VERSION.zip.sha256"

  # Post-Release Tasks
  post-release:
    name: 📢 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Update documentation
        run: |
          echo "📖 Updating documentation with new release..."
          # Add documentation update commands here
      
      - name: Notify team
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          echo "🎉 FinishThisIdea Platform $VERSION has been released!"
          echo "📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
          
          # Add notification commands here (Slack, Discord, etc.)
      
      - name: Update Docker Hub description
        run: |
          echo "🐳 Updating Docker Hub repository description..."
          # Add Docker Hub update commands here if using Docker Hub