/**
 * {{displayName}} Service
 * {{description}}
 * Generated on {{timestamp}}
 */

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { config } from 'dotenv';
import { logger } from './utils/logger';
import { errorHandler } from './middleware/error.middleware';
import { rateLimiter } from './middleware/rate-limit.middleware';
import { authentication } from './middleware/auth.middleware';
import routes from './routes';
{{#if workers}}
import { initializeWorkers } from './workers';
{{/if}}

// Load environment variables
config();

const app = express();
const PORT = process.env.PORT || {{port}};

// Middleware
app.use(helmet());
app.use(cors());
app.use(compression());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Rate limiting
app.use(rateLimiter);

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: '{{name}}',
    version: process.env.npm_package_version,
    uptime: process.uptime()
  });
});

// API routes
app.use('/api', authentication, routes);

// Error handling
app.use(errorHandler);

{{#if workers}}
// Initialize background workers
initializeWorkers();
{{/if}}

// Start server
app.listen(PORT, () => {
  logger.info(`{{displayName}} service running on port ${PORT}`);
  logger.info(`Service ID: {{serviceId}}`);
  logger.info(`Environment: ${process.env.NODE_ENV || 'development'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

export default app;