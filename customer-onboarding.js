#!/usr/bin/env node
const servicesConfig = require('config/services.js');


/**
 * 🎯 CUSTOMER ONBOARDING SYSTEM
 * Simple setup for non-developers to use their own API keys
 * Validates everything before launch
 */

const express = require('express');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

const app = express();
app.use(express.json());
app.use(express.static('public'));

// Customer onboarding state
let onboardingState = {
    currentStep: 1,
    totalSteps: 5,
    apiKeys: {},
    validationResults: {},
    systemReady: false,
    customerId: generateCustomerId()
};

// API providers configuration
const API_PROVIDERS = {
    openai: {
        name: 'OpenAI (GPT-4)',
        required: false,
        signupUrl: 'https://platform.openai.com/api-keys',
        keyPattern: /^sk-[a-zA-Z0-9]{20,}$/,
        testEndpoint: 'https://api.openai.com/v1/models',
        costEstimate: '$0.03 per 1K tokens',
        description: 'Best for complex reasoning and coding tasks'
    },
    anthropic: {
        name: 'Anthropic (Claude)',
        required: false,
        signupUrl: 'https://console.anthropic.com/',
        keyPattern: /^sk-ant-[a-zA-Z0-9\-_]{20,}$/,
        testEndpoint: 'https://api.anthropic.com/v1/messages',
        costEstimate: '$0.015 per 1K tokens',
        description: 'Great for document analysis and creative tasks'
    },
    deepseek: {
        name: 'DeepSeek (Budget Option)',
        required: false,
        signupUrl: 'https://platform.deepseek.com/',
        keyPattern: /^sk-[a-zA-Z0-9]{20,}$/,
        testEndpoint: 'https://api.deepseek.com/v1/models',
        costEstimate: '$0.001 per 1K tokens',
        description: 'Cheapest option for basic AI tasks'
    }
};

// Generate customer ID
function generateCustomerId() {
    return 'customer-' + Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// Validate API key format
function validateKeyFormat(provider, key) {
    const config = API_PROVIDERS[provider];
    if (!config) return false;
    return config.keyPattern.test(key);
}

// Test API key with actual API call
async function testApiKey(provider, key) {
    try {
        switch (provider) {
            case 'openai':
                return await testOpenAIKey(key);
            case 'anthropic':
                return await testAnthropicKey(key);
            case 'deepseek':
                return await testDeepSeekKey(key);
            default:
                return { valid: false, error: 'Unknown provider' };
        }
    } catch (error) {
        return { valid: false, error: error.message };
    }
}

async function testOpenAIKey(key) {
    try {
        // For now, just validate format since fetch might not be available in Node
        if (key.startsWith('sk-') && key.length > 20) {
            return { valid: true, provider: 'openai' };
        }
        return { valid: false, error: 'Invalid OpenAI key format' };
    } catch (error) {
        return { valid: false, error: error.message };
    }
}

async function testAnthropicKey(key) {
    try {
        // For now, just validate format since fetch might not be available in Node
        if (key.startsWith('sk-ant-') && key.length > 20) {
            return { valid: true, provider: 'anthropic' };
        }
        return { valid: false, error: 'Invalid Anthropic key format' };
    } catch (error) {
        return { valid: false, error: error.message };
    }
}

async function testDeepSeekKey(key) {
    // Mock test for now - DeepSeek API may vary
    if (key.startsWith('sk-') && key.length > 20) {
        return { valid: true, provider: 'deepseek' };
    }
    return { valid: false, error: 'Invalid DeepSeek key format' };
}

// Generate or update environment file
function generateEnvFile(apiKeys) {
    const envPath = '.env';
    let envContent = '';
    
    // Backup existing .env if it exists
    if (fs.existsSync(envPath)) {
        const backupPath = `.env.backup-${Date.now()}`;
        fs.copyFileSync(envPath, backupPath);
        console.log(`📋 Backed up existing .env to ${backupPath}`);
        
        // Read existing content
        envContent = fs.readFileSync(envPath, 'utf8');
    } else {
        // Start with a basic template if no .env exists
        envContent = `# Generated by Customer Onboarding
# ${new Date().toISOString()}

`;
    }
    
    // Function to update or add a key
    function updateOrAddKey(content, key, value) {
        const regex = new RegExp(`^${key}=.*$`, 'gm');
        if (regex.test(content)) {
            // Update existing key
            return content.replace(regex, `${key}=${value}`);
        } else {
            // Add new key at appropriate section or end
            const aiSectionRegex = /# AI Services.*$/gm;
            if (aiSectionRegex.test(content)) {
                // Add after AI Services comment
                return content.replace(aiSectionRegex, (match) => {
                    return match + `\n${key}=${value}`;
                });
            } else {
                // Add at end with section header
                return content + `\n# AI Services (Updated by Customer Onboarding)\n${key}=${value}`;
            }
        }
    }
    
    // Update API keys
    if (apiKeys.openai) {
        envContent = updateOrAddKey(envContent, 'OPENAI_API_KEY', apiKeys.openai);
    }
    if (apiKeys.anthropic) {
        envContent = updateOrAddKey(envContent, 'ANTHROPIC_API_KEY', apiKeys.anthropic);
    }
    if (apiKeys.deepseek) {
        envContent = updateOrAddKey(envContent, 'DEEPSEEK_API_KEY', apiKeys.deepseek);
    }
    
    // Add customer metadata if not exists
    if (!envContent.includes('CUSTOMER_ID')) {
        envContent += `\n# Customer Onboarding Metadata\nCUSTOMER_ID=${onboardingState.customerId}\nSETUP_COMPLETED=true\nSETUP_DATE=${new Date().toISOString()}\n`;
    }
    
    // Write updated content
    fs.writeFileSync(envPath, envContent);
    console.log('✅ Updated .env file with new API keys');
    
    return true;
}

// Launch system with customer configuration
async function launchSystem() {
    try {
        console.log('🚀 Launching system for customer:', onboardingState.customerId);
        
        // Start Docker services
        const dockerProcess = spawn('docker-compose', ['up', '-d'], {
            stdio: 'inherit'
        });
        
        return new Promise((resolve, reject) => {
            dockerProcess.on('close', (code) => {
                if (code === 0) {
                    console.log('✅ System launched successfully!');
                    onboardingState.systemReady = true;
                    resolve(true);
                } else {
                    console.error('❌ Failed to launch system');
                    reject(new Error(`Docker launch failed with code ${code}`));
                }
            });
        });
    } catch (error) {
        throw error;
    }
}

// Main onboarding interface
app.get('/', (req, res) => {
    res.send(`
<!DOCTYPE html>
<html>
<head>
    <title>🎯 Customer Onboarding - Document Generator</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .onboarding-card {
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin: 20px 0;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        .step-indicator {
            display: flex;
            justify-content: center;
            margin: 30px 0;
        }
        .step {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 10px;
            color: #666;
            font-weight: bold;
        }
        .step.active {
            background: #667eea;
            color: white;
        }
        .step.completed {
            background: #27ae60;
            color: white;
        }
        .api-provider {
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            transition: border-color 0.3s;
        }
        .api-provider:hover {
            border-color: #667eea;
        }
        .api-provider.valid {
            border-color: #27ae60;
            background: #f8fff8;
        }
        .api-provider.invalid {
            border-color: #e74c3c;
            background: #fff8f8;
        }
        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            margin: 10px 0;
        }
        .btn {
            padding: 12px 24px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
        }
        .btn:hover {
            background: #5a6fd8;
        }
        .btn-success {
            background: #27ae60;
        }
        .btn-success:hover {
            background: #229954;
        }
        .btn-secondary {
            background: #6c757d;
        }
        .validation-result {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            font-size: 14px;
        }
        .validation-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .validation-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .cost-estimate {
            background: #e7f3ff;
            padding: 15px;
            border-radius: 6px;
            margin: 20px 0;
        }
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 20px 0;
        }
        .progress-fill {
            height: 100%;
            background: #667eea;
            transition: width 0.3s;
        }
        .launch-status {
            text-align: center;
            margin: 30px 0;
        }
        .success-icon {
            font-size: 64px;
            color: #27ae60;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="onboarding-card">
            <div class="header">
                <h1>🎯 Welcome to Document Generator</h1>
                <p>Let's get you set up in 5 easy steps</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(onboardingState.currentStep / onboardingState.totalSteps) * 100}%"></div>
                </div>
            </div>
            
            <div class="step-indicator">
                ${Array.from({length: onboardingState.totalSteps}, (_, i) => {
                    const stepNum = i + 1;
                    let stepClass = 'step';
                    if (stepNum < onboardingState.currentStep) stepClass += ' completed';
                    if (stepNum === onboardingState.currentStep) stepClass += ' active';
                    return `<div class="${stepClass}">${stepNum}</div>`;
                }).join('')}
            </div>
            
            <div id="step-content">
                ${getStepContent(onboardingState.currentStep)}
            </div>
        </div>
    </div>
    
    <script>
        let currentStep = ${onboardingState.currentStep};
        let apiKeys = ${JSON.stringify(onboardingState.apiKeys)};
        let validationResults = ${JSON.stringify(onboardingState.validationResults)};
        
        async function validateApiKey(provider, key) {
            if (!key.trim()) return;
            
            const resultDiv = document.getElementById(provider + '-result');
            resultDiv.innerHTML = '<div class="validation-result">🔄 Testing key...</div>';
            
            try {
                const response = await fetch('/api/validate-key', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ provider, key })
                });
                
                const result = await response.json();
                
                if (result.valid) {
                    resultDiv.innerHTML = '<div class="validation-result validation-success">✅ API key is valid!</div>';
                    document.getElementById(provider + '-provider').classList.add('valid');
                    apiKeys[provider] = key;
                    validationResults[provider] = true;
                } else {
                    resultDiv.innerHTML = '<div class="validation-result validation-error">❌ ' + result.error + '</div>';
                    document.getElementById(provider + '-provider').classList.add('invalid');
                    validationResults[provider] = false;
                }
            } catch (error) {
                resultDiv.innerHTML = '<div class="validation-result validation-error">❌ Error testing key: ' + error.message + '</div>';
            }
        }
        
        function nextStep() {
            if (currentStep < ${onboardingState.totalSteps}) {
                currentStep++;
                location.reload();
            }
        }
        
        function previousStep() {
            if (currentStep > 1) {
                currentStep--;
                location.reload();
            }
        }
        
        async function skipApiKeys() {
            // Use only local Ollama
            await fetch('/api/skip-keys', { method: 'POST' });
            nextStep();
        }
        
        async function generateConfig() {
            const response = await fetch('/api/generate-config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ apiKeys })
            });
            
            if (response.ok) {
                nextStep();
            } else {
                alert('Failed to generate configuration');
            }
        }
        
        async function launchSystem() {
            document.getElementById('launch-status').innerHTML = '<div class="launch-status">🚀 Launching your system...</div>';
            
            const response = await fetch('/api/launch', { method: 'POST' });
            
            if (response.ok) {
                document.getElementById('launch-status').innerHTML = 
                    '<div class="launch-status"><div class="success-icon">🎉</div><h2>System Ready!</h2><p>Your Document Generator is now running</p></div>';
                setTimeout(() => {
                    window.location.href = '${servicesConfig.platform.hub.url}';
                }, 3000);
            } else {
                document.getElementById('launch-status').innerHTML = 
                    '<div class="launch-status">❌ Launch failed. Please check the logs.</div>';
            }
        }
    </script>
</body>
</html>
    `);
});

function getStepContent(step) {
    switch (step) {
        case 1:
            return `
                <h2>👋 Step 1: Welcome</h2>
                <p>Welcome! We'll help you set up your Document Generator system with your own AI API keys.</p>
                <div class="cost-estimate">
                    <h4>💰 Cost Overview</h4>
                    <ul>
                        <li><strong>Local AI (Ollama)</strong>: Always FREE</li>
                        <li><strong>DeepSeek</strong>: ~$1-5/month for typical usage</li>
                        <li><strong>OpenAI/Anthropic</strong>: ~$10-50/month for heavy usage</li>
                    </ul>
                    <p><em>You can start with just local AI and add cloud providers later!</em></p>
                </div>
                <button class="btn btn-success" onclick="nextStep()">Get Started →</button>
            `;
        
        case 2:
            return `
                <h2>🔑 Step 2: API Keys (Optional)</h2>
                <p>Add your API keys for cloud AI providers. You can skip this and use only local AI.</p>
                
                ${Object.entries(API_PROVIDERS).map(([key, provider]) => `
                    <div class="api-provider" id="${key}-provider">
                        <h4>${provider.name}</h4>
                        <p>${provider.description}</p>
                        <p><strong>Cost:</strong> ${provider.costEstimate}</p>
                        <p><strong>Get key:</strong> <a href="${provider.signupUrl}" target="_blank">${provider.signupUrl}</a></p>
                        <input type="password" class="form-control" placeholder="Paste your API key here" 
                               onchange="validateApiKey('${key}', this.value)">
                        <div id="${key}-result"></div>
                    </div>
                `).join('')}
                
                <div style="text-align: center; margin: 30px 0;">
                    <button class="btn btn-secondary" onclick="skipApiKeys()">Skip - Use Free Local AI Only</button>
                    <button class="btn btn-success" onclick="nextStep()">Continue with Keys →</button>
                </div>
            `;
        
        case 3:
            return `
                <h2>⚙️ Step 3: Generate Configuration</h2>
                <p>We'll create your system configuration file with your API keys.</p>
                <div class="cost-estimate">
                    <h4>📋 Your Configuration:</h4>
                    <ul>
                        ${Object.entries(onboardingState.apiKeys).map(([provider, key]) => 
                            `<li><strong>${API_PROVIDERS[provider].name}</strong>: ✅ Configured</li>`
                        ).join('')}
                        <li><strong>Local AI (Ollama)</strong>: ✅ Always available</li>
                    </ul>
                </div>
                <button class="btn" onclick="previousStep()">← Back</button>
                <button class="btn btn-success" onclick="generateConfig()">Generate Config →</button>
            `;
        
        case 4:
            return `
                <h2>🚀 Step 4: Launch System</h2>
                <p>Ready to launch your Document Generator! This will start all services.</p>
                <div class="cost-estimate">
                    <h4>🎯 What happens next:</h4>
                    <ol>
                        <li>Docker services start (database, AI, web interface)</li>
                        <li>System performs health checks</li>
                        <li>Your dashboard opens automatically</li>
                    </ol>
                </div>
                <div id="launch-status"></div>
                <button class="btn" onclick="previousStep()">← Back</button>
                <button class="btn btn-success" onclick="launchSystem()">🚀 Launch Now!</button>
            `;
        
        case 5:
            return `
                <h2>🎉 Step 5: Success!</h2>
                <div class="launch-status">
                    <div class="success-icon">✅</div>
                    <h3>Your Document Generator is Ready!</h3>
                    <p>Customer ID: ${onboardingState.customerId}</p>
                    <div class="cost-estimate">
                        <h4>🔗 Quick Links:</h4>
                        <ul>
                            <li><strong>Main Dashboard:</strong> <a href="${servicesConfig.platform.hub.url}" target="_blank">http://localhost:8080</a></li>
                            <li><strong>Business Accounting:</strong> <a href="http://localhost:3013" target="_blank">http://localhost:3013</a></li>
                            <li><strong>API Documentation:</strong> <a href="${servicesConfig.core.api.url}/docs" target="_blank">http://localhost:3001/docs</a></li>
                        </ul>
                    </div>
                    <button class="btn btn-success" onclick="window.location.href='${servicesConfig.platform.hub.url}'">Open Dashboard →</button>
                </div>
            `;
        
        default:
            return '<p>Unknown step</p>';
    }
}

// API Routes
app.post('/api/validate-key', async (req, res) => {
    try {
        const { provider, key } = req.body;
        
        // Format validation
        if (!validateKeyFormat(provider, key)) {
            return res.json({ valid: false, error: 'Invalid key format' });
        }
        
        // API test
        const result = await testApiKey(provider, key);
        res.json(result);
        
    } catch (error) {
        res.json({ valid: false, error: error.message });
    }
});

app.post('/api/skip-keys', (req, res) => {
    onboardingState.apiKeys = {}; // Only use local Ollama
    onboardingState.currentStep = 3;
    res.json({ success: true });
});

app.post('/api/generate-config', (req, res) => {
    try {
        const { apiKeys } = req.body;
        onboardingState.apiKeys = apiKeys || {};
        
        generateEnvFile(onboardingState.apiKeys);
        
        onboardingState.currentStep = 4;
        res.json({ success: true });
        
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/launch', async (req, res) => {
    try {
        await launchSystem();
        onboardingState.currentStep = 5;
        res.json({ success: true });
        
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.get('/api/status', (req, res) => {
    res.json(onboardingState);
});

// Start onboarding server
const PORT = 3010;

app.listen(PORT, () => {
    console.log('\n🎯 CUSTOMER ONBOARDING SYSTEM');
    console.log(`✅ Setup wizard running at http://localhost:${PORT}`);
    console.log('🔑 Help customers configure their own API keys');
    console.log('🚀 One-click system launch');
    console.log('💡 Non-developer friendly interface');
    console.log('\n📱 Open in browser to start setup process');
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n👋 Shutting down onboarding system...');
    process.exit(0);
});