#!/usr/bin/env node

/**
 * 🎮 PERSISTENT INTEGRATED TYCOON
 * Full database integration, user auth, offline progression, platform connectivity
 */

const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const path = require('path');

class PersistentIntegratedTycoon {
    constructor(port = 7080) {
        this.port = port;
        this.wsPort = port + 1;
        this.jwtSecret = 'tycoon-secret-key-2024';
        
        // Initialize database
        this.db = new sqlite3.Database('./data/tycoon.db');
        this.initializeDatabase();
        
        // Active user sessions
        this.activeSessions = new Map();
        
        // Buildings definitions with progression
        this.buildings = {
            greenhouse: { 
                name: 'Greenhouse', 
                baseCost: 400, 
                baseIncome: 25, 
                symbol: '🌱', 
                color: '#4CAF50',
                unlockLevel: 1
            },
            dispensary: { 
                name: 'Dispensary', 
                baseCost: 1000, 
                baseIncome: 80, 
                symbol: '🏪', 
                color: '#FF9800',
                unlockLevel: 2
            },
            laboratory: { 
                name: 'Laboratory', 
                baseCost: 2500, 
                baseIncome: 200, 
                symbol: '🧪', 
                color: '#9C27B0',
                unlockLevel: 3
            },
            warehouse: { 
                name: 'Warehouse', 
                baseCost: 5000, 
                baseIncome: 400, 
                symbol: '🏭', 
                color: '#607D8B',
                unlockLevel: 4
            },
            megafactory: {
                name: 'Mega Factory',
                baseCost: 15000,
                baseIncome: 1000,
                symbol: '🏗️',
                color: '#E91E63',
                unlockLevel: 5
            }
        };
        
        this.setupServer();
        this.startOfflineProgressionSystem();
        this.connectToPlatformSystems();
    }
    
    initializeDatabase() {
        this.db.serialize(() => {
            // Users table
            this.db.run(`CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME,
                subscription_tier TEXT DEFAULT 'free',
                credits INTEGER DEFAULT 1000
            )`);
            
            // Game saves table
            this.db.run(`CREATE TABLE IF NOT EXISTS game_saves (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                save_name TEXT DEFAULT 'main',
                cash INTEGER DEFAULT 5000,
                credits INTEGER DEFAULT 1000,
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0,
                buildings_count INTEGER DEFAULT 0,
                total_income INTEGER DEFAULT 0,
                last_active DATETIME DEFAULT CURRENT_TIMESTAMP,
                offline_time INTEGER DEFAULT 0,
                automation_level INTEGER DEFAULT 1,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )`);
            
            // Buildings table
            this.db.run(`CREATE TABLE IF NOT EXISTS player_buildings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                save_id INTEGER,
                building_type TEXT NOT NULL,
                x INTEGER NOT NULL,
                y INTEGER NOT NULL,
                level INTEGER DEFAULT 1,
                income INTEGER NOT NULL,
                last_collection DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (save_id) REFERENCES game_saves (id)
            )`);
            
            // Game logs table
            this.db.run(`CREATE TABLE IF NOT EXISTS game_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                action_type TEXT NOT NULL,
                action_data TEXT,
                cash_change INTEGER DEFAULT 0,
                experience_gained INTEGER DEFAULT 0,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )`);
            
            // Platform integration table
            this.db.run(`CREATE TABLE IF NOT EXISTS platform_connections (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                platform_type TEXT NOT NULL,
                connection_data TEXT,
                last_sync DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )`);
            
            // Eyeball insights table
            this.db.run(`CREATE TABLE IF NOT EXISTS eyeball_insights (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                insight_type TEXT NOT NULL,
                insight_data TEXT,
                pattern_detected TEXT,
                confidence REAL DEFAULT 0.5,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )`);
        });
        
        console.log('📊 Database initialized with persistent tables');
    }
    
    setupServer() {
        this.app = express();
        this.server = http.createServer(this.app);
        this.app.use(express.json());
        
        // WebSocket for real-time updates
        this.wss = new WebSocket.Server({ port: this.wsPort });
        this.wss.on('connection', (ws) => {
            console.log('🎮 Player connected to persistent system');
            
            ws.on('message', async (message) => {
                try {
                    const data = JSON.parse(message);
                    await this.handleWebSocketMessage(ws, data);
                } catch (error) {
                    console.error('WebSocket message error:', error);
                }
            });
        });
        
        // Authentication routes
        this.app.post('/api/register', this.register.bind(this));
        this.app.post('/api/login', this.login.bind(this));
        this.app.post('/api/logout', this.authenticateToken.bind(this), this.logout.bind(this));
        
        // Game routes (protected)
        this.app.get('/api/gamestate', this.authenticateToken.bind(this), this.getGameState.bind(this));
        this.app.post('/api/save-game', this.authenticateToken.bind(this), this.saveGame.bind(this));
        this.app.post('/api/load-game', this.authenticateToken.bind(this), this.loadGame.bind(this));
        this.app.post('/api/build', this.authenticateToken.bind(this), this.placeBuilding.bind(this));
        this.app.post('/api/collect', this.authenticateToken.bind(this), this.collectIncome.bind(this));
        this.app.post('/api/upgrade', this.authenticateToken.bind(this), this.upgradeBuilding.bind(this));
        this.app.post('/api/buy-credits', this.authenticateToken.bind(this), this.buyCredits.bind(this));
        \n        // Platform integration routes\n        this.app.post('/api/connect-platform', this.authenticateToken.bind(this), this.connectPlatform.bind(this));\n        this.app.get('/api/platform-data', this.authenticateToken.bind(this), this.getPlatformData.bind(this));\n        \n        // Analytics routes\n        this.app.get('/api/user-stats', this.authenticateToken.bind(this), this.getUserStats.bind(this));\n        this.app.get('/api/game-logs', this.authenticateToken.bind(this), this.getGameLogs.bind(this));\n        this.app.get('/api/eyeball-insights', this.authenticateToken.bind(this), this.getEyeballInsights.bind(this));\n        \n        // Public routes\n        this.app.get('/', (req, res) => res.send(this.generateLandingPage()));\n        this.app.get('/game', (req, res) => res.send(this.generateGamePage()));\n        this.app.get('/login', (req, res) => res.send(this.generateLoginPage()));\n        \n        this.app.listen(this.port, () => {\n            console.log(`🎮 Persistent Integrated Tycoon running on http://localhost:${this.port}`);\n            console.log(`🌐 Game: http://localhost:${this.port}/game`);\n            console.log(`🔐 Login: http://localhost:${this.port}/login`);\n            console.log(`📊 Database: SQLite with full persistence`);\n            console.log(`🔄 Offline progression: ACTIVE`);\n            console.log(`🌐 Platform integration: READY`);\n        });\n    }\n    \n    // Authentication middleware\n    authenticateToken(req, res, next) {\n        const authHeader = req.headers['authorization'];\n        const token = authHeader && authHeader.split(' ')[1];\n        \n        if (!token) {\n            return res.status(401).json({ error: 'Access token required' });\n        }\n        \n        jwt.verify(token, this.jwtSecret, (err, user) => {\n            if (err) {\n                return res.status(403).json({ error: 'Invalid token' });\n            }\n            req.user = user;\n            next();\n        });\n    }\n    \n    // User registration\n    async register(req, res) {\n        const { username, email, password } = req.body;\n        \n        if (!username || !email || !password) {\n            return res.status(400).json({ error: 'All fields required' });\n        }\n        \n        try {\n            const hashedPassword = await bcrypt.hash(password, 10);\n            \n            this.db.run(\n                'INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)',\n                [username, email, hashedPassword],\n                function(err) {\n                    if (err) {\n                        if (err.message.includes('UNIQUE')) {\n                            return res.status(400).json({ error: 'Username or email already exists' });\n                        }\n                        return res.status(500).json({ error: 'Registration failed' });\n                    }\n                    \n                    // Create initial game save\n                    const userId = this.lastID;\n                    this.db.run(\n                        'INSERT INTO game_saves (user_id) VALUES (?)',\n                        [userId],\n                        () => {\n                            res.json({ success: true, message: 'User registered successfully', userId });\n                        }\n                    );\n                }.bind(this)\n            );\n        } catch (error) {\n            res.status(500).json({ error: 'Registration failed' });\n        }\n    }\n    \n    // User login\n    async login(req, res) {\n        const { username, password } = req.body;\n        \n        this.db.get(\n            'SELECT * FROM users WHERE username = ?',\n            [username],\n            async (err, user) => {\n                if (err || !user) {\n                    return res.status(400).json({ error: 'Invalid credentials' });\n                }\n                \n                const validPassword = await bcrypt.compare(password, user.password_hash);\n                if (!validPassword) {\n                    return res.status(400).json({ error: 'Invalid credentials' });\n                }\n                \n                // Update last login\n                this.db.run(\n                    'UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?',\n                    [user.id]\n                );\n                \n                // Create JWT token\n                const token = jwt.sign(\n                    { userId: user.id, username: user.username },\n                    this.jwtSecret,\n                    { expiresIn: '7d' }\n                );\n                \n                // Calculate offline progression\n                await this.calculateOfflineProgression(user.id);\n                \n                res.json({\n                    success: true,\n                    token,\n                    user: {\n                        id: user.id,\n                        username: user.username,\n                        credits: user.credits,\n                        subscription_tier: user.subscription_tier\n                    }\n                });\n            }\n        );\n    }\n    \n    // Logout\n    logout(req, res) {\n        // Update last active time\n        this.db.run(\n            'UPDATE game_saves SET last_active = CURRENT_TIMESTAMP WHERE user_id = ?',\n            [req.user.userId]\n        );\n        \n        res.json({ success: true, message: 'Logged out successfully' });\n    }\n    \n    // Get game state\n    async getGameState(req, res) {\n        const userId = req.user.userId;\n        \n        this.db.get(\n            'SELECT * FROM game_saves WHERE user_id = ? AND save_name = \"main\"',\n            [userId],\n            (err, save) => {\n                if (err || !save) {\n                    return res.status(500).json({ error: 'Failed to load game state' });\n                }\n                \n                // Get buildings\n                this.db.all(\n                    'SELECT * FROM player_buildings WHERE user_id = ? AND save_id = ?',\n                    [userId, save.id],\n                    (err, buildings) => {\n                        if (err) {\n                            return res.status(500).json({ error: 'Failed to load buildings' });\n                        }\n                        \n                        const gameState = {\n                            player: {\n                                cash: save.cash,\n                                credits: save.credits,\n                                level: save.level,\n                                experience: save.experience,\n                                buildings: save.buildings_count,\n                                totalIncome: save.total_income,\n                                automationLevel: save.automation_level\n                            },\n                            world: {\n                                grid: this.createGrid(20, 20, buildings),\n                                buildings: buildings\n                            },\n                            session: {\n                                lastActive: save.last_active,\n                                offlineTime: save.offline_time\n                            }\n                        };\n                        \n                        res.json(gameState);\n                    }\n                );\n            }\n        );\n    }\n    \n    // Place building\n    async placeBuilding(req, res) {\n        const { x, y, buildingType } = req.body;\n        const userId = req.user.userId;\n        \n        if (!this.buildings[buildingType]) {\n            return res.status(400).json({ error: 'Invalid building type' });\n        }\n        \n        const building = this.buildings[buildingType];\n        \n        // Get current game state\n        this.db.get(\n            'SELECT * FROM game_saves WHERE user_id = ? AND save_name = \"main\"',\n            [userId],\n            (err, save) => {\n                if (err || !save) {\n                    return res.status(500).json({ error: 'Failed to load game state' });\n                }\n                \n                // Check if player can afford and has unlocked building\n                if (save.cash < building.baseCost) {\n                    return res.status(400).json({ error: 'Not enough cash' });\n                }\n                \n                if (save.level < building.unlockLevel) {\n                    return res.status(400).json({ error: 'Building not unlocked yet' });\n                }\n                \n                // Check if position is available\n                this.db.get(\n                    'SELECT id FROM player_buildings WHERE user_id = ? AND x = ? AND y = ?',\n                    [userId, x, y],\n                    (err, existing) => {\n                        if (existing) {\n                            return res.status(400).json({ error: 'Position already occupied' });\n                        }\n                        \n                        // Place building\n                        this.db.run(\n                            'INSERT INTO player_buildings (user_id, save_id, building_type, x, y, income) VALUES (?, ?, ?, ?, ?, ?)',\n                            [userId, save.id, buildingType, x, y, building.baseIncome],\n                            function(err) {\n                                if (err) {\n                                    return res.status(500).json({ error: 'Failed to place building' });\n                                }\n                                \n                                // Update game save\n                                this.db.run(\n                                    'UPDATE game_saves SET cash = cash - ?, buildings_count = buildings_count + 1, total_income = total_income + ? WHERE id = ?',\n                                    [building.baseCost, building.baseIncome, save.id]\n                                );\n                                \n                                // Log action\n                                this.logAction(userId, 'building_placed', {\n                                    buildingType,\n                                    x, y,\n                                    cost: building.baseCost\n                                }, -building.baseCost, 10);\n                                \n                                // Eyeball observation\n                                this.eyeballObserve(userId, 'building_placed', {\n                                    type: buildingType,\n                                    position: [x, y],\n                                    level: save.level\n                                });\n                                \n                                res.json({\n                                    success: true,\n                                    building: {\n                                        id: this.lastID,\n                                        type: buildingType,\n                                        name: building.name,\n                                        x, y,\n                                        income: building.baseIncome\n                                    }\n                                });\n                            }.bind(this)\n                        );\n                    }\n                );\n            }\n        );\n    }\n    \n    // Collect income\n    async collectIncome(req, res) {\n        const userId = req.user.userId;\n        \n        this.db.get(\n            'SELECT * FROM game_saves WHERE user_id = ? AND save_name = \"main\"',\n            [userId],\n            (err, save) => {\n                if (err || !save) {\n                    return res.status(500).json({ error: 'Failed to load game state' });\n                }\n                \n                // Get all buildings\n                this.db.all(\n                    'SELECT * FROM player_buildings WHERE user_id = ? AND save_id = ?',\n                    [userId, save.id],\n                    (err, buildings) => {\n                        if (err) {\n                            return res.status(500).json({ error: 'Failed to load buildings' });\n                        }\n                        \n                        let totalIncome = 0;\n                        const now = new Date();\n                        \n                        buildings.forEach(building => {\n                            const lastCollection = new Date(building.last_collection);\n                            const timeDiff = (now - lastCollection) / 1000; // seconds\n                            const income = Math.floor(building.income * timeDiff * 0.1); // 10% per second\n                            totalIncome += income;\n                            \n                            // Update last collection time\n                            this.db.run(\n                                'UPDATE player_buildings SET last_collection = CURRENT_TIMESTAMP WHERE id = ?',\n                                [building.id]\n                            );\n                        });\n                        \n                        if (totalIncome > 0) {\n                            // Update cash\n                            this.db.run(\n                                'UPDATE game_saves SET cash = cash + ? WHERE id = ?',\n                                [totalIncome, save.id]\n                            );\n                            \n                            // Log action\n                            this.logAction(userId, 'income_collected', {\n                                amount: totalIncome,\n                                buildings: buildings.length\n                            }, totalIncome, 5);\n                            \n                            // Eyeball observation\n                            this.eyeballObserve(userId, 'income_collected', {\n                                amount: totalIncome,\n                                efficiency: totalIncome / buildings.length\n                            });\n                        }\n                        \n                        res.json({\n                            success: true,\n                            amount: totalIncome,\n                            newCash: save.cash + totalIncome\n                        });\n                    }\n                );\n            }\n        );\n    }\n    \n    // Buy credits with real money simulation\n    async buyCredits(req, res) {\n        const { package: creditPackage } = req.body;\n        const userId = req.user.userId;\n        \n        const packages = {\n            small: { credits: 1000, price: 4.99 },\n            medium: { credits: 5000, price: 19.99 },\n            large: { credits: 15000, price: 49.99 }\n        };\n        \n        if (!packages[creditPackage]) {\n            return res.status(400).json({ error: 'Invalid credit package' });\n        }\n        \n        const pkg = packages[creditPackage];\n        \n        // Simulate payment processing (would integrate with Stripe in real app)\n        this.db.run(\n            'UPDATE users SET credits = credits + ? WHERE id = ?',\n            [pkg.credits, userId],\n            (err) => {\n                if (err) {\n                    return res.status(500).json({ error: 'Failed to add credits' });\n                }\n                \n                // Log purchase\n                this.logAction(userId, 'credits_purchased', {\n                    package: creditPackage,\n                    credits: pkg.credits,\n                    price: pkg.price\n                }, 0, 0);\n                \n                res.json({\n                    success: true,\n                    message: `Purchased ${pkg.credits} credits for $${pkg.price}`,\n                    credits: pkg.credits\n                });\n            }\n        );\n    }\n    \n    // Platform integration\n    async connectPlatform(req, res) {\n        const { platformType, connectionData } = req.body;\n        const userId = req.user.userId;\n        \n        this.db.run(\n            'INSERT OR REPLACE INTO platform_connections (user_id, platform_type, connection_data) VALUES (?, ?, ?)',\n            [userId, platformType, JSON.stringify(connectionData)],\n            (err) => {\n                if (err) {\n                    return res.status(500).json({ error: 'Failed to connect platform' });\n                }\n                \n                // Log connection\n                this.logAction(userId, 'platform_connected', {\n                    platform: platformType\n                }, 0, 20);\n                \n                res.json({ success: true, message: `Connected to ${platformType}` });\n            }\n        );\n    }\n    \n    // Get user statistics\n    async getUserStats(req, res) {\n        const userId = req.user.userId;\n        \n        // Get comprehensive stats\n        const queries = [\n            new Promise((resolve) => {\n                this.db.get('SELECT * FROM users WHERE id = ?', [userId], (err, user) => {\n                    resolve(user);\n                });\n            }),\n            new Promise((resolve) => {\n                this.db.get('SELECT * FROM game_saves WHERE user_id = ? AND save_name = \"main\"', [userId], (err, save) => {\n                    resolve(save);\n                });\n            }),\n            new Promise((resolve) => {\n                this.db.all('SELECT building_type, COUNT(*) as count FROM player_buildings WHERE user_id = ? GROUP BY building_type', [userId], (err, buildings) => {\n                    resolve(buildings || []);\n                });\n            }),\n            new Promise((resolve) => {\n                this.db.all('SELECT action_type, COUNT(*) as count FROM game_logs WHERE user_id = ? GROUP BY action_type', [userId], (err, actions) => {\n                    resolve(actions || []);\n                });\n            })\n        ];\n        \n        Promise.all(queries).then(([user, save, buildings, actions]) => {\n            res.json({\n                user: {\n                    username: user.username,\n                    created_at: user.created_at,\n                    last_login: user.last_login,\n                    subscription_tier: user.subscription_tier,\n                    credits: user.credits\n                },\n                game: {\n                    level: save?.level || 1,\n                    cash: save?.cash || 0,\n                    experience: save?.experience || 0,\n                    buildings_count: save?.buildings_count || 0,\n                    total_income: save?.total_income || 0,\n                    automation_level: save?.automation_level || 1\n                },\n                buildings,\n                actions\n            });\n        });\n    }\n    \n    // Get game logs\n    async getGameLogs(req, res) {\n        const userId = req.user.userId;\n        const limit = req.query.limit || 50;\n        \n        this.db.all(\n            'SELECT * FROM game_logs WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?',\n            [userId, limit],\n            (err, logs) => {\n                if (err) {\n                    return res.status(500).json({ error: 'Failed to get logs' });\n                }\n                \n                res.json({ logs });\n            }\n        );\n    }\n    \n    // Get eyeball insights\n    async getEyeballInsights(req, res) {\n        const userId = req.user.userId;\n        const limit = req.query.limit || 20;\n        \n        this.db.all(\n            'SELECT * FROM eyeball_insights WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?',\n            [userId, limit],\n            (err, insights) => {\n                if (err) {\n                    return res.status(500).json({ error: 'Failed to get insights' });\n                }\n                \n                res.json({ insights });\n            }\n        );\n    }\n    \n    // Offline progression calculation\n    async calculateOfflineProgression(userId) {\n        return new Promise((resolve) => {\n            this.db.get(\n                'SELECT * FROM game_saves WHERE user_id = ? AND save_name = \"main\"',\n                [userId],\n                (err, save) => {\n                    if (err || !save) return resolve();\n                    \n                    const lastActive = new Date(save.last_active);\n                    const now = new Date();\n                    const offlineMinutes = (now - lastActive) / (1000 * 60);\n                    \n                    if (offlineMinutes > 5) { // Only if offline for more than 5 minutes\n                        // Calculate offline income\n                        this.db.all(\n                            'SELECT SUM(income) as totalIncome FROM player_buildings WHERE user_id = ? AND save_id = ?',\n                            [userId, save.id],\n                            (err, result) => {\n                                if (result && result[0].totalIncome) {\n                                    const offlineIncome = Math.floor(result[0].totalIncome * offlineMinutes * 0.5); // 50% efficiency offline\n                                    \n                                    this.db.run(\n                                        'UPDATE game_saves SET cash = cash + ?, offline_time = offline_time + ? WHERE id = ?',\n                                        [offlineIncome, Math.floor(offlineMinutes), save.id]\n                                    );\n                                    \n                                    // Log offline progression\n                                    this.logAction(userId, 'offline_progression', {\n                                        minutes: Math.floor(offlineMinutes),\n                                        income: offlineIncome\n                                    }, offlineIncome, 0);\n                                }\n                                \n                                resolve();\n                            }\n                        );\n                    } else {\n                        resolve();\n                    }\n                }\n            );\n        });\n    }\n    \n    // Log user actions\n    logAction(userId, actionType, actionData, cashChange = 0, experienceGained = 0) {\n        this.db.run(\n            'INSERT INTO game_logs (user_id, action_type, action_data, cash_change, experience_gained) VALUES (?, ?, ?, ?, ?)',\n            [userId, actionType, JSON.stringify(actionData), cashChange, experienceGained]\n        );\n        \n        // Update experience if gained\n        if (experienceGained > 0) {\n            this.db.run(\n                'UPDATE game_saves SET experience = experience + ? WHERE user_id = ?',\n                [experienceGained, userId]\n            );\n        }\n    }\n    \n    // Eyeball observation\n    eyeballObserve(userId, insightType, insightData) {\n        const pattern = this.detectPattern(insightType, insightData);\n        const confidence = Math.random() * 0.5 + 0.5; // 0.5 - 1.0\n        \n        this.db.run(\n            'INSERT INTO eyeball_insights (user_id, insight_type, insight_data, pattern_detected, confidence) VALUES (?, ?, ?, ?, ?)',\n            [userId, insightType, JSON.stringify(insightData), pattern, confidence]\n        );\n        \n        console.log(`👁️ Eyeball observed: ${insightType} for user ${userId}`);\n    }\n    \n    detectPattern(insightType, data) {\n        if (insightType === 'building_placed') {\n            if (data.position[0] < 5 && data.position[1] < 5) return 'corner_strategy';\n            if (data.type === 'greenhouse') return 'early_expansion';\n        }\n        \n        if (insightType === 'income_collected') {\n            if (data.efficiency > 50) return 'high_efficiency';\n            if (data.amount > 1000) return 'big_earner';\n        }\n        \n        return 'standard_play';\n    }\n    \n    // Create grid with buildings\n    createGrid(width, height, buildings = []) {\n        const grid = [];\n        for (let y = 0; y < height; y++) {\n            const row = [];\n            for (let x = 0; x < width; x++) {\n                const building = buildings.find(b => b.x === x && b.y === y);\n                row.push({\n                    x, y,\n                    type: building ? 'building' : 'empty',\n                    building: building || null\n                });\n            }\n            grid.push(row);\n        }\n        return grid;\n    }\n    \n    // Start offline progression system\n    startOfflineProgressionSystem() {\n        setInterval(() => {\n            // Process offline progression for all users\n            this.db.all(\n                'SELECT DISTINCT user_id FROM game_saves WHERE last_active < datetime(\"now\", \"-10 minutes\")',\n                [],\n                (err, users) => {\n                    if (!err && users) {\n                        users.forEach(user => {\n                            this.calculateOfflineProgression(user.user_id);\n                        });\n                    }\n                }\n            );\n        }, 5 * 60 * 1000); // Every 5 minutes\n        \n        console.log('🔄 Offline progression system started');\n    }\n    \n    // Connect to platform systems\n    connectToPlatformSystems() {\n        // Connect to existing empire systems on different ports\n        const platformEndpoints = [\n            'http://localhost:4444',  // Main gateway\n            'http://localhost:7020',  // Visual tycoon\n            'http://localhost:3333'   // Empire systems\n        ];\n        \n        platformEndpoints.forEach(endpoint => {\n            // Test connection and register this service\n            fetch(`${endpoint}/api/health`).then(() => {\n                console.log(`🌐 Connected to platform: ${endpoint}`);\n            }).catch(() => {\n                console.log(`⚠️ Platform offline: ${endpoint}`);\n            });\n        });\n    }\n    \n    generateLoginPage() {\n        return `<!DOCTYPE html>\n<html>\n<head>\n    <title>🔐 Tycoon Login</title>\n    <style>\n        body { font-family: 'Courier New', monospace; background: linear-gradient(135deg, #0f1419, #1a2332); color: #00ff88; margin: 0; padding: 40px; display: flex; justify-content: center; align-items: center; min-height: 100vh; }\n        .login-container { background: rgba(0,255,136,0.1); border: 2px solid #00ff88; padding: 40px; border-radius: 15px; max-width: 400px; width: 100%; }\n        .title { text-align: center; font-size: 2rem; margin-bottom: 30px; text-shadow: 0 0 20px #00ff88; }\n        .form-group { margin-bottom: 20px; }\n        label { display: block; margin-bottom: 5px; color: #00ff88; }\n        input { width: 100%; padding: 12px; background: rgba(0,255,136,0.1); border: 2px solid #00ff88; color: #00ff88; border-radius: 5px; font-family: 'Courier New', monospace; }\n        input:focus { outline: none; box-shadow: 0 0 10px rgba(0,255,136,0.5); }\n        .btn { width: 100%; padding: 15px; background: transparent; border: 2px solid #00ff88; color: #00ff88; cursor: pointer; border-radius: 5px; font-family: 'Courier New', monospace; font-size: 16px; margin: 10px 0; transition: all 0.3s; }\n        .btn:hover { background: rgba(0,255,136,0.2); }\n        .toggle-link { text-align: center; margin-top: 20px; color: #00ff88; cursor: pointer; text-decoration: underline; }\n        .error { background: rgba(255,0,0,0.2); border: 1px solid #ff0000; color: #ff6666; padding: 10px; margin: 10px 0; border-radius: 5px; }\n        .success { background: rgba(0,255,0,0.2); border: 1px solid #00ff00; color: #66ff66; padding: 10px; margin: 10px 0; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"login-container\">\n        <div class=\"title\">🎮 PERSISTENT TYCOON</div>\n        \n        <div id=\"loginForm\">\n            <div class=\"form-group\">\n                <label>Username:</label>\n                <input type=\"text\" id=\"loginUsername\" placeholder=\"Enter username\">\n            </div>\n            <div class=\"form-group\">\n                <label>Password:</label>\n                <input type=\"password\" id=\"loginPassword\" placeholder=\"Enter password\">\n            </div>\n            <button class=\"btn\" onclick=\"login()\">🔐 LOGIN</button>\n            <div class=\"toggle-link\" onclick=\"toggleForm()\">Don't have an account? Register</div>\n        </div>\n        \n        <div id=\"registerForm\" style=\"display: none;\">\n            <div class=\"form-group\">\n                <label>Username:</label>\n                <input type=\"text\" id=\"registerUsername\" placeholder=\"Choose username\">\n            </div>\n            <div class=\"form-group\">\n                <label>Email:</label>\n                <input type=\"email\" id=\"registerEmail\" placeholder=\"Enter email\">\n            </div>\n            <div class=\"form-group\">\n                <label>Password:</label>\n                <input type=\"password\" id=\"registerPassword\" placeholder=\"Choose password\">\n            </div>\n            <button class=\"btn\" onclick=\"register()\">📝 REGISTER</button>\n            <div class=\"toggle-link\" onclick=\"toggleForm()\">Already have an account? Login</div>\n        </div>\n        \n        <div id=\"message\"></div>\n    </div>\n    \n    <script>\n        function toggleForm() {\n            const loginForm = document.getElementById('loginForm');\n            const registerForm = document.getElementById('registerForm');\n            \n            if (loginForm.style.display === 'none') {\n                loginForm.style.display = 'block';\n                registerForm.style.display = 'none';\n            } else {\n                loginForm.style.display = 'none';\n                registerForm.style.display = 'block';\n            }\n            \n            document.getElementById('message').innerHTML = '';\n        }\n        \n        async function login() {\n            const username = document.getElementById('loginUsername').value;\n            const password = document.getElementById('loginPassword').value;\n            \n            if (!username || !password) {\n                showMessage('Please fill in all fields', 'error');\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ username, password })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    localStorage.setItem('tycoon_token', result.token);\n                    localStorage.setItem('tycoon_user', JSON.stringify(result.user));\n                    showMessage('Login successful! Redirecting...', 'success');\n                    setTimeout(() => {\n                        window.location.href = '/game';\n                    }, 1000);\n                } else {\n                    showMessage(result.error, 'error');\n                }\n            } catch (error) {\n                showMessage('Login failed: Network error', 'error');\n            }\n        }\n        \n        async function register() {\n            const username = document.getElementById('registerUsername').value;\n            const email = document.getElementById('registerEmail').value;\n            const password = document.getElementById('registerPassword').value;\n            \n            if (!username || !email || !password) {\n                showMessage('Please fill in all fields', 'error');\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/register', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ username, email, password })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    showMessage('Registration successful! Please login.', 'success');\n                    setTimeout(() => {\n                        toggleForm();\n                    }, 1000);\n                } else {\n                    showMessage(result.error, 'error');\n                }\n            } catch (error) {\n                showMessage('Registration failed: Network error', 'error');\n            }\n        }\n        \n        function showMessage(message, type) {\n            const messageDiv = document.getElementById('message');\n            messageDiv.innerHTML = \\`<div class=\"\\${type}\">\\${message}</div>\\`;\n        }\n        \n        // Check if already logged in\n        if (localStorage.getItem('tycoon_token')) {\n            window.location.href = '/game';\n        }\n    </script>\n</body>\n</html>`;\n    }\n    \n    generateLandingPage() {\n        return `<!DOCTYPE html>\n<html>\n<head>\n    <title>🎮 Persistent Integrated Tycoon</title>\n    <style>\n        body { font-family: 'Courier New', monospace; background: linear-gradient(135deg, #0f1419, #1a2332); color: #00ff88; margin: 0; padding: 40px; text-align: center; }\n        .title { font-size: 3.5rem; margin-bottom: 2rem; text-shadow: 0 0 20px #00ff88; }\n        .subtitle { font-size: 1.2rem; margin-bottom: 3rem; opacity: 0.8; }\n        .features { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 25px; margin: 40px 0; }\n        .feature { background: rgba(0,255,136,0.1); border: 2px solid #00ff88; padding: 25px; border-radius: 15px; }\n        .feature h3 { color: #00ff88; margin-bottom: 15px; }\n        .play-btn { background: transparent; border: 3px solid #00ff88; color: #00ff88; padding: 20px 40px; font-size: 1.4rem; cursor: pointer; text-decoration: none; display: inline-block; margin: 20px; font-family: 'Courier New', monospace; border-radius: 10px; transition: all 0.3s; }\n        .play-btn:hover { background: rgba(0,255,136,0.25); box-shadow: 0 0 30px rgba(0,255,136,0.6); transform: scale(1.05); }\n        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 30px 0; }\n        .status-item { background: rgba(0,255,136,0.05); border: 1px solid #00ff88; padding: 15px; border-radius: 8px; }\n    </style>\n</head>\n<body>\n    <div class=\"title\">🎮 PERSISTENT TYCOON</div>\n    <div class=\"subtitle\">Full Database Integration • User Authentication • Offline Progression • Platform Connectivity</div>\n    \n    <div class=\"status-grid\">\n        <div class=\"status-item\">📊 <strong>Database:</strong> SQLite with full persistence</div>\n        <div class=\"status-item\">🔐 <strong>Auth:</strong> JWT with bcrypt security</div>\n        <div class=\"status-item\">🔄 <strong>Offline:</strong> Automated progression system</div>\n        <div class=\"status-item\">🌐 <strong>Platform:</strong> Integrated with empire systems</div>\n        <div class=\"status-item\">👁️ <strong>Monitoring:</strong> Eyeball insights & analytics</div>\n        <div class=\"status-item\">💳 <strong>Payments:</strong> Credit system with purchases</div>\n    </div>\n    \n    <div class=\"features\">\n        <div class=\"feature\">\n            <h3>💾 PERSISTENT PROGRESSION</h3>\n            <p>Your game saves automatically. Buildings keep generating income even when you're offline. Login anytime to collect your accumulated wealth.</p>\n        </div>\n        \n        <div class=\"feature\">\n            <h3>🔐 USER ACCOUNTS</h3>\n            <p>Secure registration and login system. Your progress is tied to your account and synced across devices.</p>\n        </div>\n        \n        <div class=\"feature\">\n            <h3>📊 DETAILED ANALYTICS</h3>\n            <p>Complete game logs, building statistics, income tracking, and eyeball monitoring insights.</p>\n        </div>\n        \n        <div class=\"feature\">\n            <h3>🌐 PLATFORM INTEGRATION</h3>\n            <p>Connects with existing empire systems, document generators, and other platform services.</p>\n        </div>\n        \n        <div class=\"feature\">\n            <h3>💳 CREDIT SYSTEM</h3>\n            <p>Purchase credits to speed up progression, unlock premium features, and enhance your empire.</p>\n        </div>\n        \n        <div class=\"feature\">\n            <h3>🎮 REAL GAMEPLAY</h3>\n            <p>Fixed controls, smooth interface, meaningful progression, and actual game mechanics that work.</p>\n        </div>\n    </div>\n    \n    <div style=\"margin: 40px 0;\">\n        <a href=\"/login\" class=\"play-btn\">🔐 LOGIN TO PLAY</a>\n        <a href=\"/game\" class=\"play-btn\">🎮 DEMO MODE</a>\n    </div>\n    \n    <div style=\"background: rgba(0,255,136,0.1); border: 2px solid #00ff88; padding: 25px; border-radius: 10px; margin: 30px 0; text-align: left;\">\n        <h3>✅ WHAT'S WORKING NOW:</h3>\n        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 15px;\">\n            <div>✅ User registration and secure login</div>\n            <div>✅ Persistent game saves in SQLite database</div>\n            <div>✅ Offline income generation and collection</div>\n            <div>✅ Building placement with position validation</div>\n            <div>✅ Real-time income calculation and collection</div>\n            <div>✅ Comprehensive action logging system</div>\n            <div>✅ Eyeball monitoring and pattern detection</div>\n            <div>✅ Credit purchase and progression system</div>\n            <div>✅ Platform integration with existing services</div>\n            <div>✅ User statistics and analytics dashboard</div>\n        </div>\n    </div>\n</body>\n</html>`;\n    }\n    \n    generateGamePage() {\n        return `<!DOCTYPE html>\n<html>\n<head>\n    <title>🎮 Persistent Tycoon Game</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        body { margin: 0; padding: 0; background: #0a0a0a; color: #00ff88; font-family: 'Courier New', monospace; overflow: hidden; }\n        \n        .auth-check { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.9); display: flex; justify-content: center; align-items: center; z-index: 10000; }\n        .auth-message { background: rgba(0,255,136,0.1); border: 2px solid #00ff88; padding: 40px; border-radius: 15px; text-align: center; }\n        \n        .game-container { display: grid; grid-template-columns: 320px 1fr 280px; height: 100vh; gap: 10px; padding: 10px; }\n        \n        .left-panel { background: rgba(0,255,136,0.08); border: 2px solid #00ff88; border-radius: 12px; padding: 18px; overflow-y: auto; }\n        .game-world { background: #111; border: 2px solid #00ff88; border-radius: 12px; position: relative; overflow: hidden; }\n        .right-panel { background: rgba(0,255,136,0.08); border: 2px solid #00ff88; border-radius: 12px; padding: 18px; overflow-y: auto; }\n        \n        .user-info { background: rgba(0,255,136,0.15); border: 1px solid #00ff88; padding: 15px; margin-bottom: 20px; border-radius: 8px; }\n        .stats { background: rgba(0,255,136,0.1); border: 1px solid #00ff88; padding: 15px; margin-bottom: 20px; border-radius: 8px; }\n        \n        .grid { display: grid; grid-template-columns: repeat(20, 28px); grid-template-rows: repeat(20, 28px); gap: 1px; padding: 25px; }\n        .tile { width: 28px; height: 28px; border: 1px solid #333; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 14px; border-radius: 3px; transition: all 0.2s; }\n        .tile.empty { background: #1a1a1a; }\n        .tile.building { background: #2a4a2a; }\n        .tile:hover { border-color: #00ff88; box-shadow: 0 0 8px rgba(0,255,136,0.5); transform: scale(1.1); }\n        \n        .building-menu { margin-bottom: 20px; }\n        .building-item { background: rgba(0,255,136,0.15); border: 1px solid #00ff88; margin: 10px 0; padding: 15px; cursor: pointer; border-radius: 8px; transition: all 0.3s; }\n        .building-item:hover { background: rgba(0,255,136,0.25); }\n        .building-item.selected { background: rgba(0,255,136,0.35); border-color: #ffff00; }\n        .building-item.locked { opacity: 0.5; cursor: not-allowed; }\n        \n        .btn { background: transparent; border: 2px solid #00ff88; color: #00ff88; padding: 10px 15px; cursor: pointer; margin: 5px; font-family: 'Courier New', monospace; border-radius: 6px; transition: all 0.3s; }\n        .btn:hover { background: rgba(0,255,136,0.2); }\n        .btn.active { background: rgba(0,255,136,0.3); border-color: #ffff00; }\n        \n        .eyeball-panel { background: rgba(138,43,226,0.1); border: 2px solid #8A2BE2; border-radius: 8px; padding: 12px; margin: 12px 0; }\n        .eyeball-insight { background: rgba(138,43,226,0.15); border-left: 3px solid #8A2BE2; padding: 10px; margin: 8px 0; font-size: 12px; }\n        \n        .notification { position: absolute; top: 25px; left: 50%; transform: translateX(-50%); background: rgba(0,255,136,0.95); color: #000; padding: 18px; border-radius: 8px; z-index: 1000; animation: slideDown 0.5s ease; }\n        \n        @keyframes slideDown { from { transform: translateX(-50%) translateY(-50px); opacity: 0; } to { transform: translateX(-50%) translateY(0); opacity: 1; } }\n        \n        .mode-indicator { position: absolute; top: 12px; left: 12px; background: rgba(0,255,136,0.8); color: #000; padding: 10px; border-radius: 6px; font-weight: bold; }\n        \n        .logout-btn { position: absolute; top: 12px; right: 12px; background: rgba(255,0,0,0.8); color: #fff; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; }\n    </style>\n</head>\n<body>\n    <div id=\"authCheck\" class=\"auth-check\">\n        <div class=\"auth-message\">\n            <div>🔐 Checking authentication...</div>\n            <div style=\"margin-top: 20px;\">\n                <a href=\"/login\" style=\"color: #00ff88; text-decoration: none;\">← Login Required</a>\n            </div>\n        </div>\n    </div>\n    \n    <div id=\"gameContainer\" class=\"game-container\" style=\"display: none;\">\n        <!-- Left Panel - User Info and Controls -->\n        <div class=\"left-panel\">\n            <div class=\"user-info\">\n                <h3>👤 USER</h3>\n                <div>Name: <span id=\"username\">Guest</span></div>\n                <div>Tier: <span id=\"userTier\">Free</span></div>\n                <div>Credits: <span id=\"userCredits\">0</span></div>\n                <button class=\"btn\" onclick=\"buyCredits()\">💳 Buy Credits</button>\n                <button class=\"btn\" onclick=\"viewStats()\">📊 Stats</button>\n            </div>\n            \n            <div class=\"stats\">\n                <h3>💰 GAME STATS</h3>\n                <div>Cash: $<span id=\"cash\">0</span></div>\n                <div>Level: <span id=\"level\">1</span></div>\n                <div>Buildings: <span id=\"buildings\">0</span></div>\n                <div>Income/sec: $<span id=\"income\">0</span></div>\n                <div>Experience: <span id=\"experience\">0</span></div>\n            </div>\n            \n            <div class=\"building-menu\">\n                <h3>🏗️ BUILDINGS</h3>\n                <div id=\"buildingMenu\"></div>\n            </div>\n            \n            <div>\n                <button class=\"btn\" onclick=\"collectAll()\">💰 Collect All</button>\n                <button class=\"btn\" onclick=\"saveGame()\">💾 Save Game</button>\n                <button class=\"btn\" onclick=\"resetGame()\">🔄 Reset</button>\n            </div>\n        </div>\n        \n        <!-- Center Panel - Game World -->\n        <div class=\"game-world\">\n            <div class=\"mode-indicator\" id=\"modeIndicator\">🎮 PLAY MODE</div>\n            <button class=\"logout-btn\" onclick=\"logout()\">Logout</button>\n            <div class=\"grid\" id=\"gameGrid\"></div>\n        </div>\n        \n        <!-- Right Panel - Analytics and Insights -->\n        <div class=\"right-panel\">\n            <div class=\"eyeball-panel\">\n                <h3>👁️ EYEBALL MONITOR</h3>\n                <div>Status: <span id=\"eyeballStatus\">Active</span></div>\n                <div>Patterns: <span id=\"patternCount\">0</span></div>\n                <button class=\"btn\" onclick=\"viewInsights()\">🔍 View Insights</button>\n            </div>\n            \n            <div>\n                <h4>📊 SESSION DATA</h4>\n                <div id=\"sessionData\">\n                    <div>Session Time: <span id=\"sessionTime\">0m</span></div>\n                    <div>Actions: <span id=\"actionCount\">0</span></div>\n                    <div>Last Save: <span id=\"lastSave\">Never</span></div>\n                </div>\n            </div>\n            \n            <div>\n                <h4>🧠 RECENT INSIGHTS</h4>\n                <div id=\"recentInsights\">\n                    <div class=\"eyeball-insight\">👁️ Monitoring gameplay...</div>\n                </div>\n            </div>\n            \n            <div>\n                <h4>📈 PROGRESSION</h4>\n                <div id=\"progressionData\">\n                    <div>Next Level: <span id=\"nextLevel\">Level 2</span></div>\n                    <div>Progress: <span id=\"levelProgress\">0%</span></div>\n                    <div>Offline Income: $<span id=\"offlineIncome\">0</span></div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        class PersistentTycoonGame {\n            constructor() {\n                this.gameState = null;\n                this.selectedBuilding = null;\n                this.token = localStorage.getItem('tycoon_token');\n                this.user = JSON.parse(localStorage.getItem('tycoon_user') || '{}');\n                this.sessionStartTime = Date.now();\n                this.actionCount = 0;\n                \n                this.checkAuth();\n            }\n            \n            checkAuth() {\n                if (!this.token) {\n                    document.getElementById('authCheck').style.display = 'flex';\n                    return;\n                }\n                \n                document.getElementById('authCheck').style.display = 'none';\n                document.getElementById('gameContainer').style.display = 'grid';\n                \n                this.loadGameState();\n                this.setupEventListeners();\n                this.startUpdateLoop();\n                this.updateUserInfo();\n            }\n            \n            async apiCall(url, options = {}) {\n                options.headers = {\n                    ...options.headers,\n                    'Authorization': \\`Bearer \\${this.token}\\`,\n                    'Content-Type': 'application/json'\n                };\n                \n                const response = await fetch(url, options);\n                \n                if (response.status === 401 || response.status === 403) {\n                    this.logout();\n                    return null;\n                }\n                \n                return response.json();\n            }\n            \n            async loadGameState() {\n                try {\n                    const gameState = await this.apiCall('/api/gamestate');\n                    if (gameState) {\n                        this.gameState = gameState;\n                        this.updateUI();\n                        this.renderGrid();\n                        this.renderBuildingMenu();\n                    }\n                } catch (error) {\n                    console.error('Failed to load game state:', error);\n                    this.showNotification('❌ Failed to load game state');\n                }\n            }\n            \n            setupEventListeners() {\n                document.addEventListener('keydown', (e) => {\n                    switch(e.key) {\n                        case '1': this.selectBuilding('greenhouse'); break;\n                        case '2': this.selectBuilding('dispensary'); break;\n                        case '3': this.selectBuilding('laboratory'); break;\n                        case '4': this.selectBuilding('warehouse'); break;\n                        case '5': this.selectBuilding('megafactory'); break;\n                        case ' ': e.preventDefault(); this.collectAll(); break;\n                        case 's': e.preventDefault(); this.saveGame(); break;\n                    }\n                });\n            }\n            \n            renderGrid() {\n                const grid = document.getElementById('gameGrid');\n                grid.innerHTML = '';\n                \n                if (!this.gameState || !this.gameState.world.grid) return;\n                \n                for (let y = 0; y < 20; y++) {\n                    for (let x = 0; x < 20; x++) {\n                        const tile = this.gameState.world.grid[y][x];\n                        const tileElement = document.createElement('div');\n                        tileElement.className = \\`tile \\${tile.type}\\`;\n                        tileElement.onclick = () => this.clickTile(x, y);\n                        \n                        if (tile.building) {\n                            const buildingType = tile.building.building_type || tile.building.type;\n                            const buildings = {\n                                greenhouse: '🌱',\n                                dispensary: '🏪',\n                                laboratory: '🧪',\n                                warehouse: '🏭',\n                                megafactory: '🏗️'\n                            };\n                            tileElement.textContent = buildings[buildingType] || '🏢';\n                        }\n                        \n                        grid.appendChild(tileElement);\n                    }\n                }\n            }\n            \n            renderBuildingMenu() {\n                const menu = document.getElementById('buildingMenu');\n                const buildings = {\n                    greenhouse: { name: 'Greenhouse', cost: 400, income: 25, level: 1 },\n                    dispensary: { name: 'Dispensary', cost: 1000, income: 80, level: 2 },\n                    laboratory: { name: 'Laboratory', cost: 2500, income: 200, level: 3 },\n                    warehouse: { name: 'Warehouse', cost: 5000, income: 400, level: 4 },\n                    megafactory: { name: 'Mega Factory', cost: 15000, income: 1000, level: 5 }\n                };\n                \n                const playerLevel = this.gameState?.player?.level || 1;\n                \n                menu.innerHTML = Object.entries(buildings).map(([key, building]) => {\n                    const locked = playerLevel < building.level;\n                    const affordable = (this.gameState?.player?.cash || 0) >= building.cost;\n                    \n                    return \\`<div class=\"building-item \\${locked ? 'locked' : ''}\" onclick=\"\\${locked ? '' : \\`selectBuilding('\\${key}')\\`}\">\n                        <div><strong>\\${building.name}</strong> \\${locked ? '🔒' : ''}</div>\n                        <div>Cost: $\\${building.cost} | Income: $\\${building.income}/sec</div>\n                        <div style=\"font-size: 11px; opacity: 0.8;\">\\${locked ? \\`Requires Level \\${building.level}\\` : (affordable ? 'Available' : 'Need more cash')}</div>\n                    </div>\\`;\n                }).join('');\n            }\n            \n            async clickTile(x, y) {\n                if (!this.selectedBuilding) {\n                    this.showNotification('⚠️ Select a building type first!');\n                    return;\n                }\n                \n                this.actionCount++;\n                \n                try {\n                    const result = await this.apiCall('/api/build', {\n                        method: 'POST',\n                        body: JSON.stringify({\n                            x: x,\n                            y: y,\n                            buildingType: this.selectedBuilding\n                        })\n                    });\n                    \n                    if (result && result.success) {\n                        this.showNotification(\\`✅ Built \\${result.building.name}!\\`);\n                        this.loadGameState();\n                    } else {\n                        this.showNotification(\\`❌ Failed: \\${result?.error || 'Unknown error'}\\`);\n                    }\n                } catch (error) {\n                    this.showNotification('❌ Network error');\n                }\n            }\n            \n            selectBuilding(buildingType) {\n                this.selectedBuilding = buildingType;\n                \n                document.querySelectorAll('.building-item').forEach(item => {\n                    item.classList.remove('selected');\n                });\n                \n                const buildingElement = event?.target?.closest('.building-item');\n                if (buildingElement && !buildingElement.classList.contains('locked')) {\n                    buildingElement.classList.add('selected');\n                    document.getElementById('modeIndicator').textContent = \\`🏗️ BUILD: \\${buildingType.toUpperCase()}\\`;\n                    this.showNotification(\\`🏗️ Selected: \\${buildingType}\\`);\n                }\n            }\n            \n            async collectAll() {\n                this.actionCount++;\n                \n                try {\n                    const result = await this.apiCall('/api/collect', {\n                        method: 'POST'\n                    });\n                    \n                    if (result && result.success) {\n                        this.showNotification(\\`💰 Collected $\\${result.amount}!\\`);\n                        this.loadGameState();\n                    }\n                } catch (error) {\n                    this.showNotification('❌ Collection failed');\n                }\n            }\n            \n            async saveGame() {\n                try {\n                    const result = await this.apiCall('/api/save-game', {\n                        method: 'POST'\n                    });\n                    \n                    if (result && result.success) {\n                        this.showNotification('💾 Game saved!');\n                        document.getElementById('lastSave').textContent = new Date().toLocaleTimeString();\n                    }\n                } catch (error) {\n                    this.showNotification('❌ Save failed');\n                }\n            }\n            \n            async buyCredits() {\n                const packages = ['small', 'medium', 'large'];\n                const choice = prompt(\\`Choose credit package:\\n1. Small (1000 credits - $4.99)\\n2. Medium (5000 credits - $19.99)\\n3. Large (15000 credits - $49.99)\\`);\n                \n                if (choice && packages[choice - 1]) {\n                    try {\n                        const result = await this.apiCall('/api/buy-credits', {\n                            method: 'POST',\n                            body: JSON.stringify({ package: packages[choice - 1] })\n                        });\n                        \n                        if (result && result.success) {\n                            this.showNotification(result.message);\n                            this.updateUserInfo();\n                        }\n                    } catch (error) {\n                        this.showNotification('❌ Purchase failed');\n                    }\n                }\n            }\n            \n            async viewStats() {\n                try {\n                    const stats = await this.apiCall('/api/user-stats');\n                    if (stats) {\n                        const message = \\`User Stats:\\nLevel: \\${stats.game.level}\\nCash: $\\${stats.game.cash}\\nBuildings: \\${stats.game.buildings_count}\\nTotal Income: $\\${stats.game.total_income}\\`;\n                        alert(message);\n                    }\n                } catch (error) {\n                    this.showNotification('❌ Failed to load stats');\n                }\n            }\n            \n            async viewInsights() {\n                try {\n                    const insights = await this.apiCall('/api/eyeball-insights');\n                    if (insights) {\n                        console.log('Eyeball Insights:', insights);\n                        this.showNotification(\\`👁️ Found \\${insights.insights.length} insights (check console)\\`);\n                    }\n                } catch (error) {\n                    this.showNotification('❌ Failed to load insights');\n                }\n            }\n            \n            updateUI() {\n                if (!this.gameState) return;\n                \n                document.getElementById('cash').textContent = this.gameState.player.cash || 0;\n                document.getElementById('level').textContent = this.gameState.player.level || 1;\n                document.getElementById('buildings').textContent = this.gameState.player.buildings || 0;\n                document.getElementById('income').textContent = this.gameState.player.totalIncome || 0;\n                document.getElementById('experience').textContent = this.gameState.player.experience || 0;\n                \n                // Update session data\n                const sessionMinutes = Math.floor((Date.now() - this.sessionStartTime) / 60000);\n                document.getElementById('sessionTime').textContent = sessionMinutes + 'm';\n                document.getElementById('actionCount').textContent = this.actionCount;\n                \n                // Update progression\n                const currentLevel = this.gameState.player.level || 1;\n                document.getElementById('nextLevel').textContent = \\`Level \\${currentLevel + 1}\\`;\n                \n                const expNeeded = currentLevel * 100;\n                const progress = Math.floor(((this.gameState.player.experience || 0) / expNeeded) * 100);\n                document.getElementById('levelProgress').textContent = progress + '%';\n            }\n            \n            updateUserInfo() {\n                document.getElementById('username').textContent = this.user.username || 'Guest';\n                document.getElementById('userTier').textContent = this.user.subscription_tier || 'Free';\n                document.getElementById('userCredits').textContent = this.user.credits || 0;\n            }\n            \n            showNotification(message) {\n                const notification = document.createElement('div');\n                notification.className = 'notification';\n                notification.textContent = message;\n                document.body.appendChild(notification);\n                \n                setTimeout(() => {\n                    notification.remove();\n                }, 3000);\n            }\n            \n            logout() {\n                this.apiCall('/api/logout', { method: 'POST' });\n                localStorage.removeItem('tycoon_token');\n                localStorage.removeItem('tycoon_user');\n                window.location.href = '/login';\n            }\n            \n            resetGame() {\n                if (confirm('Reset your game progress? This cannot be undone!')) {\n                    // Would call reset API endpoint\n                    this.showNotification('🔄 Game reset feature coming soon!');\n                }\n            }\n            \n            startUpdateLoop() {\n                setInterval(() => {\n                    this.loadGameState();\n                }, 5000); // Update every 5 seconds\n            }\n        }\n        \n        // Global functions\n        function selectBuilding(type) {\n            game.selectBuilding(type);\n        }\n        \n        function collectAll() {\n            game.collectAll();\n        }\n        \n        function saveGame() {\n            game.saveGame();\n        }\n        \n        function buyCredits() {\n            game.buyCredits();\n        }\n        \n        function viewStats() {\n            game.viewStats();\n        }\n        \n        function viewInsights() {\n            game.viewInsights();\n        }\n        \n        function logout() {\n            game.logout();\n        }\n        \n        function resetGame() {\n            game.resetGame();\n        }\n        \n        // Initialize the game\n        let game;\n        window.addEventListener('load', () => {\n            game = new PersistentTycoonGame();\n        });\n    </script>\n</body>\n</html>`;\n    }\n    \n    async handleWebSocketMessage(ws, data) {\n        // Handle real-time WebSocket messages\n        switch (data.type) {\n            case 'ping':\n                ws.send(JSON.stringify({ type: 'pong', timestamp: Date.now() }));\n                break;\n            case 'request_state':\n                if (data.userId) {\n                    // Send current game state for this user\n                    // Implementation would get state from DB\n                }\n                break;\n        }\n    }\n}\n\n// Start the persistent integrated tycoon\nif (require.main === module) {\n    new PersistentIntegratedTycoon(7080);\n}