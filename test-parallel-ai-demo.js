#!/usr/bin/env node

/**
 * üöÄ PARALLEL AI PROCESSING DEMO
 * Test the new parallel LLM capabilities with multiple models simultaneously
 */

const AIPixelArtGenerator = require('./ai-pixel-art-generator.js');

async function testParallelGeneration() {
    console.log('üöÄ PARALLEL AI PIXEL ART GENERATION TEST');
    console.log('‚ïê'.repeat(70));
    console.log('üéØ Testing: "draw a castle" with parallel processing');
    console.log('‚ö° Models: Ollama + OpenAI + Anthropic (if configured)');
    console.log();
    
    const generator = new AIPixelArtGenerator({
        gridSize: 32,
        enableReasoning: true,
        cacheResults: false // Force fresh generation
    });
    
    // Listen for detailed events
    generator.on('reasoning', (data) => {
        console.log('üß† REASONING PHASE:');
        if (data.reasoningMetadata) {
            console.log(`üìä Services used: ${data.reasoningMetadata.totalServices}`);
            console.log(`‚úÖ Successful: ${data.reasoningMetadata.successfulServices}`);
            console.log(`üèÜ Fastest: ${data.reasoningMetadata.fastestService}`);
            console.log(`üí∞ Cost: $${data.reasoningMetadata.totalCost.toFixed(4)}`);
        }
        console.log('üí≠ Best reasoning:', data.reasoning.substring(0, 200) + '...');
        console.log();
    });
    
    generator.on('commands', (data) => {
        console.log('üéØ COMMAND GENERATION PHASE:');
        if (data.commandMetadata) {
            console.log(`üìä Services used: ${data.commandMetadata.totalServices}`);
            console.log(`‚úÖ Successful: ${data.commandMetadata.successfulServices}`);
            console.log(`üèÜ Fastest: ${data.commandMetadata.fastestService}`);
            console.log(`üí∞ Cost: $${data.commandMetadata.totalCost.toFixed(4)}`);
        }
        console.log('üîß Generated commands:');
        console.log(data.commands);
        console.log();
    });
    
    try {
        console.log('üé¨ Starting parallel generation...');
        const startTime = Date.now();
        
        const result = await generator.generateFromQuery('draw a castle', {
            parallel: true,
            style: 'medieval'
        });
        
        const totalTime = Date.now() - startTime;
        console.log('üéâ PARALLEL GENERATION RESULTS:');
        console.log('‚ïê'.repeat(50));
        console.log(`üÜî Generation ID: ${result.id}`);
        console.log(`‚è±Ô∏è Total Time: ${totalTime}ms`);
        console.log(`üí∞ Total Cost: $${result.metadata.totalCost.toFixed(4)}`);
        console.log(`üéØ Commands Generated: ${result.metadata.commandCount}`);
        
        if (result.parallelResults) {
            console.log('\nüî¨ DETAILED PARALLEL RESULTS:');
            
            if (result.parallelResults.reasoning) {
                console.log('\nüß† Reasoning Results:');
                result.parallelResults.reasoning.forEach((r, i) => {
                    const status = r.success ? '‚úÖ' : '‚ùå';
                    const time = r.responseTime || 0;
                    console.log(`  ${status} ${r.service}: ${time}ms`);
                });
            }
            
            if (result.parallelResults.commands) {
                console.log('\nüéØ Command Results:');
                result.parallelResults.commands.forEach((r, i) => {
                    const status = r.success ? '‚úÖ' : '‚ùå';
                    const time = r.responseTime || 0;
                    console.log(`  ${status} ${r.service}: ${time}ms`);
                });
            }
        }
        
        if (result.pixelResult.ascii) {
            console.log('\nüè∞ FINAL CASTLE PIXEL ART:');
            console.log(result.pixelResult.ascii);
        }
        
        console.log('\nüìä PERFORMANCE COMPARISON:');
        console.log('Normal mode: Would use single fastest LLM');
        console.log('Parallel mode: Uses all available LLMs simultaneously');
        console.log('Benefit: Better quality through model comparison');
        console.log('Cost: Higher due to multiple API calls');
        
        return result;
        
    } catch (error) {
        console.error('\n‚ùå PARALLEL GENERATION FAILED:', error.message);
        
        console.log('\nüîß TROUBLESHOOTING:');
        console.log('- Ensure API keys are set: OPENAI_API_KEY, ANTHROPIC_API_KEY');
        console.log('- Check Ollama is running: curl http://localhost:11434/api/tags');
        console.log('- Verify network connection for cloud APIs');
        console.log('- System will fall back to available services automatically');
    }
}

// Run the demo
testParallelGeneration();