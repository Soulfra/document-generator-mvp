{
  "rings": {
    "0": {
      "name": "Core/Backend Layer",
      "description": "Dependency-free core systems, databases, APIs, fundamental services",
      "color": "#FFD700",
      "systems": {},
      "dependencies": [],
      "characteristics": [
        "No user interface dependencies",
        "Can run independently",
        "Provides data/services to other rings",
        "Database systems, APIs, core logic",
        "BlameChain, authentication, storage"
      ]
    },
    "1": {
      "name": "Logic/Processing Layer",
      "description": "Business logic, game engines, AI processing, validation systems",
      "color": "#00FF00",
      "systems": {},
      "dependencies": [
        0
      ],
      "characteristics": [
        "Business logic and processing",
        "Game engines and AI systems",
        "Can use Ring 0 services",
        "No direct UI dependencies",
        "Validation, computation, orchestration"
      ]
    },
    "2": {
      "name": "Frontend/UI Layer",
      "description": "User interfaces, presentation, display systems, user experience",
      "color": "#FF4500",
      "systems": {},
      "dependencies": [
        0,
        1
      ],
      "characteristics": [
        "User interfaces and presentation",
        "Web, mobile, desktop, AR/VR",
        "Can use Ring 0 and Ring 1 services",
        "Display, interaction, visualization",
        "Dashboards, games, apps"
      ]
    }
  },
  "systems": [
    {
      "id": "blamechain",
      "name": "BlameChain Core",
      "ring": 0,
      "file": "blamechain.js",
      "type": "core_system",
      "description": "Dependency-free component registration and blame assignment",
      "dependencies": [],
      "provides": [
        "component_registry",
        "karma_tracking",
        "zombie_detection"
      ],
      "ports": []
    },
    {
      "id": "kingdom_authority",
      "name": "Kingdom Authority System",
      "ring": 0,
      "file": "kingdom-authority-system.js",
      "type": "permission_system",
      "description": "User hierarchy and permission system (EXILE→KING)",
      "dependencies": [],
      "provides": [
        "user_permissions",
        "hierarchy_levels",
        "reputation_tracking"
      ],
      "ports": []
    },
    {
      "id": "database_core",
      "name": "Database Systems",
      "ring": 0,
      "type": "data_storage",
      "description": "PostgreSQL, Redis, MinIO core data storage",
      "dependencies": [],
      "provides": [
        "data_persistence",
        "caching",
        "file_storage"
      ],
      "ports": [
        5432,
        6379,
        9000
      ]
    },
    {
      "id": "authentication",
      "name": "Authentication Core",
      "ring": 0,
      "file": "device-pairing-authenticator.js",
      "type": "security",
      "description": "Device pairing and authentication services",
      "dependencies": [],
      "provides": [
        "device_auth",
        "qr_pairing",
        "security_tokens"
      ],
      "ports": [
        11111,
        42004
      ]
    },
    {
      "id": "multi_ring_characters",
      "name": "Multi-Ring Character Evolution",
      "ring": 1,
      "file": "multi-ring-character-evolution.js",
      "type": "game_logic",
      "description": "Character evolution and progression logic",
      "dependencies": [
        0
      ],
      "provides": [
        "character_evolution",
        "team_mechanics",
        "ability_system"
      ],
      "ports": []
    },
    {
      "id": "boss_character_integration",
      "name": "Boss Character System",
      "ring": 1,
      "file": "boss-character-integration.js",
      "type": "game_logic",
      "description": "Boss AI, spawn mechanics, game integration",
      "dependencies": [
        0
      ],
      "provides": [
        "boss_ai",
        "spawn_mechanics",
        "battle_logic"
      ],
      "ports": []
    },
    {
      "id": "ai_orchestration",
      "name": "AI Orchestration Layer",
      "ring": 1,
      "file": "anonymous-ai-orchestration-layer.js",
      "type": "ai_processing",
      "description": "AI model routing and processing",
      "dependencies": [
        0
      ],
      "provides": [
        "ai_routing",
        "model_selection",
        "response_processing"
      ],
      "ports": [
        3001
      ]
    },
    {
      "id": "character_processing",
      "name": "Character Processing Pipeline",
      "ring": 1,
      "type": "image_processing",
      "description": "Selfie→ASCII→Voxel character processing",
      "dependencies": [
        0
      ],
      "provides": [
        "image_processing",
        "character_generation",
        "template_matching"
      ],
      "ports": [
        42007
      ]
    },
    {
      "id": "castle_crashers_hex_world",
      "name": "Castle Crashers Hex World",
      "ring": 2,
      "file": "castle-crashers-hex-world.js",
      "type": "game_ui",
      "description": "Visual hex grid interface for character evolution",
      "dependencies": [
        0,
        1
      ],
      "provides": [
        "visual_interface",
        "character_display",
        "evolution_ui"
      ],
      "ports": [
        8302
      ]
    },
    {
      "id": "universal_display_kernel",
      "name": "Universal Display Kernel",
      "ring": 2,
      "file": "UNIVERSAL-DISPLAY-KERNEL.js",
      "type": "display_system",
      "description": "Cross-system display management and responsive layouts",
      "dependencies": [
        0,
        1
      ],
      "provides": [
        "responsive_ui",
        "cross_platform_display",
        "layout_management"
      ],
      "ports": []
    },
    {
      "id": "hex_world_visualizer",
      "name": "Hex World Visualizer",
      "ring": 2,
      "file": "hex-world-backend-visualizer.js",
      "type": "visualization",
      "description": "Backend system visualization in hex world format",
      "dependencies": [
        0,
        1
      ],
      "provides": [
        "system_visualization",
        "backend_display",
        "component_mapping"
      ],
      "ports": [
        8300
      ]
    },
    {
      "id": "selfie_pixel_interface",
      "name": "Selfie-to-Pixel Interface",
      "ring": 2,
      "file": "SELFIE-TO-PIXEL-CHARACTER-SYSTEM.js",
      "type": "user_interface",
      "description": "Web interface for selfie character creation",
      "dependencies": [
        0,
        1
      ],
      "provides": [
        "photo_upload",
        "character_preview",
        "template_selection"
      ],
      "ports": [
        42007
      ]
    }
  ],
  "dependencies": [
    [
      "blamechain",
      []
    ],
    [
      "kingdom_authority",
      []
    ],
    [
      "database_core",
      []
    ],
    [
      "authentication",
      []
    ],
    [
      "multi_ring_characters",
      [
        0
      ]
    ],
    [
      "boss_character_integration",
      [
        0
      ]
    ],
    [
      "ai_orchestration",
      [
        0
      ]
    ],
    [
      "character_processing",
      [
        0
      ]
    ],
    [
      "castle_crashers_hex_world",
      [
        0,
        1
      ]
    ],
    [
      "universal_display_kernel",
      [
        0,
        1
      ]
    ],
    [
      "hex_world_visualizer",
      [
        0,
        1
      ]
    ],
    [
      "selfie_pixel_interface",
      [
        0,
        1
      ]
    ]
  ],
  "summary": {
    "totalSystems": 12,
    "ring0Count": 4,
    "ring1Count": 4,
    "ring2Count": 4,
    "independentSystems": 4,
    "uiSystems": 4
  }
}