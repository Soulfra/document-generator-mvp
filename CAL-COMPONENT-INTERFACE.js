#!/usr/bin/env node

/**
 * 🎛️ CAL COMPONENT INTERFACE SYSTEM
 * 
 * Interactive component/button system for knowledge module activation
 * - Visual interface for selecting knowledge components
 * - Real-time reasoning chain building
 * - Component dependency management and optimization
 * - Performance prediction and cost estimation
 * - Live measurement display during execution
 */

const EventEmitter = require('events');
const express = require('express');
const { WebSocketServer } = require('ws');
const http = require('http');

class CalComponentInterface extends EventEmitter {
    constructor(knowledgeLibrarian) {
        super();
        
        this.librarian = knowledgeLibrarian;
        this.server = null;
        this.wss = null;
        this.activeInterface = new Map(); // Track active user interfaces
        
        // Component execution queue
        this.executionQueue = [];
        this.executionHistory = [];
        
        // Performance predictions
        this.performancePredictions = new Map();
        
        console.log('🎛️ Cal Component Interface System initialized');
        this.setupHttpServer();
        this.setupWebSocketServer();
    }
    
    setupHttpServer() {
        const app = express();
        app.use(express.json());
        app.use(express.static('./public'));
        
        // Serve component interface
        app.get('/components', (req, res) => {
            res.send(this.generateComponentInterface());
        });
        
        // Get available components for librarian
        app.get('/api/components/:librarian', (req, res) => {
            const { librarian } = req.params;
            const components = this.librarian.components.get(librarian) || [];
            
            res.json({
                librarian,
                components: components.map(comp => ({
                    ...comp,
                    predicted_performance: this.getPredictedPerformance(librarian, comp.name),
                    usage_stats: this.getComponentUsageStats(comp.name)
                }))
            });
        });
        
        // Execute component combination
        app.post('/api/execute', async (req, res) => {
            const { librarian, query, components, sessionId } = req.body;
            
            try {
                // Add to execution queue
                const execution = {
                    id: Date.now().toString(),
                    librarian,
                    query,
                    components,
                    sessionId,
                    status: 'queued',
                    queuedAt: new Date()
                };
                
                this.executionQueue.push(execution);
                this.broadcastToSession(sessionId, {
                    type: 'execution_queued',
                    execution
                });
                
                // Process execution
                const result = await this.executeComponentCombination(execution);
                
                res.json({
                    success: true,
                    executionId: execution.id,
                    result
                });
                
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
        
        // Get execution status
        app.get('/api/execution/:executionId', (req, res) => {
            const execution = this.executionHistory.find(e => e.id === req.params.executionId);\n            \n            if (!execution) {\n                res.status(404).json({ error: 'Execution not found' });\n                return;\n            }\n            \n            res.json(execution);\n        });\n        \n        // Get performance predictions\n        app.post('/api/predict', (req, res) => {\n            const { librarian, components, query } = req.body;\n            const prediction = this.predictPerformance(librarian, components, query);\n            \n            res.json(prediction);\n        });\n        \n        const port = process.env.COMPONENT_INTERFACE_PORT || 3006;\n        this.server = app.listen(port, () => {\n            console.log(`🎛️ Component Interface server listening on port ${port}`);\n        });\n    }\n    \n    setupWebSocketServer() {\n        this.wss = new WebSocketServer({ server: this.server });\n        \n        this.wss.on('connection', (ws, req) => {\n            const sessionId = this.generateSessionId();\n            \n            console.log(`🔌 New component interface session: ${sessionId}`);\n            \n            // Store session\n            this.activeInterface.set(sessionId, {\n                ws,\n                sessionId,\n                connectedAt: new Date(),\n                lastActivity: new Date()\n            });\n            \n            // Send session ID\n            ws.send(JSON.stringify({\n                type: 'session_established',\n                sessionId,\n                available_librarians: Array.from(this.librarian.components.keys())\n            }));\n            \n            ws.on('message', (message) => {\n                try {\n                    const data = JSON.parse(message.toString());\n                    this.handleWebSocketMessage(sessionId, data);\n                } catch (error) {\n                    console.error('WebSocket message error:', error);\n                }\n            });\n            \n            ws.on('close', () => {\n                console.log(`📤 Component interface session closed: ${sessionId}`);\n                this.activeInterface.delete(sessionId);\n            });\n        });\n        \n        console.log('✅ WebSocket server ready for component interface');\n    }\n    \n    generateComponentInterface() {\n        return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cal Component Interface</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Monaco', 'Courier New', monospace;\n            background: linear-gradient(135deg, #0a0a0a, #1a1a2e, #16213e);\n            color: #0ff;\n            min-height: 100vh;\n            padding: 20px;\n        }\n        \n        .interface-container {\n            max-width: 1400px;\n            margin: 0 auto;\n            display: grid;\n            grid-template-columns: 1fr 400px;\n            gap: 20px;\n            height: calc(100vh - 40px);\n        }\n        \n        .main-panel {\n            background: rgba(0, 20, 40, 0.8);\n            border: 2px solid #0ff;\n            border-radius: 10px;\n            padding: 20px;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .side-panel {\n            background: rgba(0, 20, 40, 0.8);\n            border: 2px solid #0ff;\n            border-radius: 10px;\n            padding: 20px;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .header {\n            text-align: center;\n            margin-bottom: 20px;\n            padding-bottom: 20px;\n            border-bottom: 1px solid #088;\n        }\n        \n        .librarian-selector {\n            margin-bottom: 20px;\n        }\n        \n        .librarian-tabs {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n        }\n        \n        .librarian-tab {\n            background: rgba(0, 100, 200, 0.2);\n            border: 1px solid #08f;\n            color: #0ff;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: all 0.3s;\n        }\n        \n        .librarian-tab:hover {\n            background: rgba(0, 100, 200, 0.4);\n            transform: translateY(-2px);\n        }\n        \n        .librarian-tab.active {\n            background: rgba(0, 255, 255, 0.3);\n            border-color: #0ff;\n            box-shadow: 0 0 10px #0ff;\n        }\n        \n        .components-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 15px;\n            flex: 1;\n            overflow-y: auto;\n        }\n        \n        .component-card {\n            background: rgba(0, 50, 100, 0.3);\n            border: 2px solid #088;\n            border-radius: 8px;\n            padding: 15px;\n            cursor: pointer;\n            transition: all 0.3s;\n            position: relative;\n        }\n        \n        .component-card:hover {\n            border-color: #0ff;\n            transform: scale(1.02);\n            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.3);\n        }\n        \n        .component-card.selected {\n            background: rgba(0, 255, 255, 0.2);\n            border-color: #0ff;\n            box-shadow: 0 0 15px #0ff;\n        }\n        \n        .component-name {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 8px;\n            color: #0ff;\n        }\n        \n        .component-description {\n            font-size: 14px;\n            color: #aaa;\n            margin-bottom: 12px;\n            line-height: 1.4;\n        }\n        \n        .component-stats {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 8px;\n            font-size: 12px;\n        }\n        \n        .stat-item {\n            background: rgba(0, 0, 0, 0.3);\n            padding: 4px 8px;\n            border-radius: 3px;\n            border: 1px solid #333;\n        }\n        \n        .stat-label {\n            color: #888;\n        }\n        \n        .stat-value {\n            color: #0ff;\n            font-weight: bold;\n        }\n        \n        .query-input {\n            width: 100%;\n            background: rgba(0, 0, 0, 0.5);\n            border: 2px solid #088;\n            color: #0ff;\n            padding: 15px;\n            border-radius: 5px;\n            font-size: 16px;\n            margin-bottom: 15px;\n            font-family: inherit;\n        }\n        \n        .query-input:focus {\n            outline: none;\n            border-color: #0ff;\n            box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n        }\n        \n        .execute-button {\n            background: linear-gradient(135deg, #0a84ff, #00d4ff);\n            border: none;\n            color: #000;\n            padding: 15px 30px;\n            border-radius: 5px;\n            font-size: 16px;\n            font-weight: bold;\n            cursor: pointer;\n            transition: all 0.3s;\n            margin-bottom: 20px;\n        }\n        \n        .execute-button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 20px rgba(0, 212, 255, 0.4);\n        }\n        \n        .execute-button:disabled {\n            background: #333;\n            color: #666;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n        \n        .prediction-panel {\n            background: rgba(0, 100, 0, 0.1);\n            border: 1px solid #0a0;\n            border-radius: 5px;\n            padding: 15px;\n            margin-bottom: 20px;\n        }\n        \n        .prediction-title {\n            color: #0f0;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n        \n        .prediction-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 5px;\n        }\n        \n        .execution-progress {\n            background: rgba(100, 0, 100, 0.1);\n            border: 1px solid #a0a;\n            border-radius: 5px;\n            padding: 15px;\n            margin-bottom: 20px;\n            display: none;\n        }\n        \n        .execution-progress.active {\n            display: block;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 10px;\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 5px;\n            overflow: hidden;\n            margin: 10px 0;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, #ff0, #f80, #0ff);\n            width: 0%;\n            transition: width 0.3s;\n        }\n        \n        .execution-log {\n            background: rgba(0, 0, 0, 0.5);\n            border: 1px solid #333;\n            border-radius: 5px;\n            padding: 10px;\n            font-size: 12px;\n            max-height: 200px;\n            overflow-y: auto;\n            font-family: 'Monaco', monospace;\n        }\n        \n        .log-entry {\n            margin-bottom: 3px;\n            padding: 2px 0;\n        }\n        \n        .log-timestamp {\n            color: #666;\n        }\n        \n        .log-component {\n            color: #0ff;\n            font-weight: bold;\n        }\n        \n        .log-message {\n            color: #fff;\n        }\n        \n        .results-panel {\n            flex: 1;\n            overflow-y: auto;\n        }\n        \n        .result-section {\n            background: rgba(0, 100, 0, 0.1);\n            border: 1px solid #0a0;\n            border-radius: 5px;\n            padding: 15px;\n            margin-bottom: 10px;\n        }\n        \n        .section-title {\n            color: #0f0;\n            font-weight: bold;\n            margin-bottom: 10px;\n            border-bottom: 1px solid #0a0;\n            padding-bottom: 5px;\n        }\n        \n        .reasoning-chain {\n            background: rgba(100, 100, 0, 0.1);\n            border: 1px solid #aa0;\n            border-radius: 5px;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .reasoning-step {\n            margin-bottom: 8px;\n            padding: 5px;\n            background: rgba(0, 0, 0, 0.2);\n            border-radius: 3px;\n        }\n        \n        .step-title {\n            color: #ff0;\n            font-weight: bold;\n        }\n        \n        .step-details {\n            color: #ccc;\n            font-size: 12px;\n            margin-top: 3px;\n        }\n        \n        .connection-status {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: rgba(0, 0, 0, 0.8);\n            border: 1px solid #0ff;\n            border-radius: 5px;\n            padding: 10px;\n            font-size: 12px;\n        }\n        \n        .status-connected {\n            color: #0f0;\n        }\n        \n        .status-disconnected {\n            color: #f00;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"connection-status\" id=\"connection-status\">\n        <span class=\"status-disconnected\">⚫ Connecting...</span>\n    </div>\n    \n    <div class=\"interface-container\">\n        <div class=\"main-panel\">\n            <div class=\"header\">\n                <h1>🎛️ Cal Knowledge Component Interface</h1>\n                <p>Interactive Knowledge Assembly & Transparent Reasoning</p>\n            </div>\n            \n            <div class=\"librarian-selector\">\n                <div class=\"librarian-tabs\" id=\"librarian-tabs\">\n                    <!-- Tabs will be populated by JavaScript -->\n                </div>\n            </div>\n            \n            <div class=\"components-grid\" id=\"components-grid\">\n                <!-- Components will be populated by JavaScript -->\n            </div>\n        </div>\n        \n        <div class=\"side-panel\">\n            <textarea class=\"query-input\" id=\"query-input\" \n                     placeholder=\"Enter your knowledge query here...\\n\\nExample: 'Design an optimal pirate frigate with speed optimization and defensive capabilities'\">\n            </textarea>\n            \n            <button class=\"execute-button\" id=\"execute-button\" onclick=\"executeQuery()\">\n                🚀 Execute Selected Components\n            </button>\n            \n            <div class=\"prediction-panel\" id=\"prediction-panel\" style=\"display: none;\">\n                <div class=\"prediction-title\">📊 Performance Prediction</div>\n                <div id=\"prediction-content\"></div>\n            </div>\n            \n            <div class=\"execution-progress\" id=\"execution-progress\">\n                <div class=\"prediction-title\">⚡ Execution Progress</div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" id=\"progress-fill\"></div>\n                </div>\n                <div class=\"execution-log\" id=\"execution-log\"></div>\n            </div>\n            \n            <div class=\"results-panel\" id=\"results-panel\">\n                <!-- Results will appear here -->\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        // Component Interface JavaScript\n        let ws = null;\n        let sessionId = null;\n        let selectedLibrarian = 'maritime';\n        let selectedComponents = new Set();\n        let availableComponents = new Map();\n        \n        // WebSocket connection\n        function connectWebSocket() {\n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const wsUrl = \\`\\${protocol}//\\${window.location.host}\\`;\n            \n            ws = new WebSocket(wsUrl);\n            \n            ws.onopen = () => {\n                document.getElementById('connection-status').innerHTML = \n                    '<span class=\"status-connected\">🟢 Connected</span>';\n            };\n            \n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                handleWebSocketMessage(data);\n            };\n            \n            ws.onclose = () => {\n                document.getElementById('connection-status').innerHTML = \n                    '<span class=\"status-disconnected\">🔴 Disconnected</span>';\n                setTimeout(connectWebSocket, 3000);\n            };\n            \n            ws.onerror = (error) => {\n                console.error('WebSocket error:', error);\n            };\n        }\n        \n        function handleWebSocketMessage(data) {\n            switch (data.type) {\n                case 'session_established':\n                    sessionId = data.sessionId;\n                    initializeInterface(data.available_librarians);\n                    break;\n                    \n                case 'execution_queued':\n                    showExecutionProgress();\n                    break;\n                    \n                case 'component_started':\n                    updateExecutionProgress(data);\n                    break;\n                    \n                case 'component_completed':\n                    updateExecutionProgress(data);\n                    break;\n                    \n                case 'execution_completed':\n                    showExecutionResults(data.result);\n                    break;\n                    \n                case 'prediction_updated':\n                    updatePredictionPanel(data.prediction);\n                    break;\n            }\n        }\n        \n        function initializeInterface(librarians) {\n            createLibrarianTabs(librarians);\n            loadComponents(selectedLibrarian);\n        }\n        \n        function createLibrarianTabs(librarians) {\n            const tabsContainer = document.getElementById('librarian-tabs');\n            tabsContainer.innerHTML = '';\n            \n            librarians.forEach(librarian => {\n                const tab = document.createElement('div');\n                tab.className = \\`librarian-tab \\${librarian === selectedLibrarian ? 'active' : ''}\\`;\n                tab.textContent = librarian.charAt(0).toUpperCase() + librarian.slice(1);\n                tab.onclick = () => selectLibrarian(librarian);\n                tabsContainer.appendChild(tab);\n            });\n        }\n        \n        async function selectLibrarian(librarian) {\n            selectedLibrarian = librarian;\n            selectedComponents.clear();\n            \n            // Update tab appearance\n            document.querySelectorAll('.librarian-tab').forEach(tab => {\n                tab.classList.remove('active');\n            });\n            event.target.classList.add('active');\n            \n            await loadComponents(librarian);\n        }\n        \n        async function loadComponents(librarian) {\n            try {\n                const response = await fetch(\\`/api/components/\\${librarian}\\`);\n                const data = await response.json();\n                \n                availableComponents.set(librarian, data.components);\n                renderComponents(data.components);\n                \n            } catch (error) {\n                console.error('Failed to load components:', error);\n            }\n        }\n        \n        function renderComponents(components) {\n            const grid = document.getElementById('components-grid');\n            grid.innerHTML = '';\n            \n            components.forEach(component => {\n                const card = document.createElement('div');\n                card.className = 'component-card';\n                card.onclick = () => toggleComponent(component.name, card);\n                \n                card.innerHTML = \\`\n                    <div class=\"component-name\">\ud83d\udd27 \\${component.name}</div>\n                    <div class=\"component-description\">\\${component.description}</div>\n                    <div class=\"component-stats\">\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Cost:</span>\n                            <span class=\"stat-value\">\\${component.computational_cost}</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Accuracy:</span>\n                            <span class=\"stat-value\">\\${(component.accuracy_expectation * 100).toFixed(0)}%</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Databases:</span>\n                            <span class=\"stat-value\">\\${component.databases.length}</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Trust Sources:</span>\n                            <span class=\"stat-value\">\\${component.trust_sources.length}</span>\n                        </div>\n                    </div>\n                \\`;\n                \n                grid.appendChild(card);\n            });\n        }\n        \n        function toggleComponent(componentName, cardElement) {\n            if (selectedComponents.has(componentName)) {\n                selectedComponents.delete(componentName);\n                cardElement.classList.remove('selected');\n            } else {\n                selectedComponents.add(componentName);\n                cardElement.classList.add('selected');\n            }\n            \n            updateExecuteButton();\n            updatePrediction();\n        }\n        \n        function updateExecuteButton() {\n            const button = document.getElementById('execute-button');\n            const query = document.getElementById('query-input').value.trim();\n            \n            if (selectedComponents.size > 0 && query) {\n                button.disabled = false;\n                button.textContent = \\`🚀 Execute \\${selectedComponents.size} Components\\`;\n            } else {\n                button.disabled = true;\n                button.textContent = '🚀 Select Components & Enter Query';\n            }\n        }\n        \n        async function updatePrediction() {\n            if (selectedComponents.size === 0) {\n                document.getElementById('prediction-panel').style.display = 'none';\n                return;\n            }\n            \n            const query = document.getElementById('query-input').value.trim();\n            if (!query) return;\n            \n            try {\n                const response = await fetch('/api/predict', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        librarian: selectedLibrarian,\n                        components: Array.from(selectedComponents),\n                        query\n                    })\n                });\n                \n                const prediction = await response.json();\n                updatePredictionPanel(prediction);\n                \n            } catch (error) {\n                console.error('Prediction failed:', error);\n            }\n        }\n        \n        function updatePredictionPanel(prediction) {\n            const panel = document.getElementById('prediction-panel');\n            const content = document.getElementById('prediction-content');\n            \n            content.innerHTML = \\`\n                <div class=\"prediction-item\">\n                    <span>Estimated Time:</span>\n                    <span>\\${prediction.estimated_time_ms}ms</span>\n                </div>\n                <div class=\"prediction-item\">\n                    <span>Computational Cost:</span>\n                    <span>\\${prediction.computational_cost}</span>\n                </div>\n                <div class=\"prediction-item\">\n                    <span>Expected Confidence:</span>\n                    <span>\\${(prediction.expected_confidence * 100).toFixed(0)}%</span>\n                </div>\n                <div class=\"prediction-item\">\n                    <span>Database Queries:</span>\n                    <span>\\${prediction.database_queries}</span>\n                </div>\n                <div class=\"prediction-item\">\n                    <span>External API Calls:</span>\n                    <span>\\${prediction.external_calls}</span>\n                </div>\n            \\`;\n            \n            panel.style.display = 'block';\n        }\n        \n        async function executeQuery() {\n            const query = document.getElementById('query-input').value.trim();\n            \n            if (!query || selectedComponents.size === 0) {\n                alert('Please enter a query and select at least one component.');\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/execute', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        librarian: selectedLibrarian,\n                        query,\n                        components: Array.from(selectedComponents),\n                        sessionId\n                    })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    showExecutionProgress();\n                } else {\n                    alert('Execution failed: ' + result.error);\n                }\n                \n            } catch (error) {\n                console.error('Execution error:', error);\n                alert('Execution failed: ' + error.message);\n            }\n        }\n        \n        function showExecutionProgress() {\n            document.getElementById('execution-progress').classList.add('active');\n            document.getElementById('progress-fill').style.width = '0%';\n            document.getElementById('execution-log').innerHTML = '';\n            addLogEntry('Execution started...', 'system');\n        }\n        \n        function updateExecutionProgress(data) {\n            if (data.component) {\n                addLogEntry(\\`\\${data.component} \\${data.status}\\`, 'component');\n            }\n            \n            if (data.progress) {\n                document.getElementById('progress-fill').style.width = \\`\\${data.progress}%\\`;\n            }\n        }\n        \n        function addLogEntry(message, type) {\n            const log = document.getElementById('execution-log');\n            const entry = document.createElement('div');\n            entry.className = 'log-entry';\n            \n            const timestamp = new Date().toLocaleTimeString();\n            entry.innerHTML = \\`\n                <span class=\"log-timestamp\">[\\${timestamp}]</span>\n                <span class=\"log-\\${type}\">\\${message}</span>\n            \\`;\n            \n            log.appendChild(entry);\n            log.scrollTop = log.scrollHeight;\n        }\n        \n        function showExecutionResults(result) {\n            document.getElementById('execution-progress').classList.remove('active');\n            \n            const resultsPanel = document.getElementById('results-panel');\n            resultsPanel.innerHTML = \\`\n                <div class=\"result-section\">\n                    <div class=\"section-title\">💬 Response</div>\n                    <p>\\${result.response}</p>\n                </div>\n                \n                <div class=\"result-section\">\n                    <div class=\"section-title\">📊 Performance Metrics</div>\n                    <div class=\"prediction-item\">\n                        <span>Execution Time:</span>\n                        <span>\\${result.performance_metrics.total_execution_time}ms</span>\n                    </div>\n                    <div class=\"prediction-item\">\n                        <span>Confidence Score:</span>\n                        <span>\\${(result.overall_confidence * 100).toFixed(1)}%</span>\n                    </div>\n                    <div class=\"prediction-item\">\n                        <span>Sources Used:</span>\n                        <span>\\${result.sources_used.length}</span>\n                    </div>\n                    <div class=\"prediction-item\">\n                        <span>Trust Score:</span>\n                        <span>\\${(result.trust_score * 100).toFixed(1)}%</span>\n                    </div>\n                </div>\n                \n                <div class=\"result-section\">\n                    <div class=\"section-title\">🎯 Components Used</div>\n                    \\${result.components_activated.map(comp => \\`\n                        <div class=\"component-result\">\n                            <strong>\\${comp.name}</strong> (\\${(comp.confidence * 100).toFixed(0)}% confidence)<br>\n                            <small>\\${comp.description}</small>\n                        </div>\n                    \\`).join('')}\n                </div>\n                \n                <div class=\"result-section\">\n                    <div class=\"section-title\">🔍 Reasoning Chain</div>\n                    <div class=\"reasoning-chain\">\n                        <p>Reasoning Chain ID: <code>\\${result.reasoning_chain_id}</code></p>\n                        <p>View full reasoning transparency in system logs.</p>\n                    </div>\n                </div>\n                \n                <div class=\"result-section\">\n                    <div class=\"section-title\">📚 Sources Consulted</div>\n                    \\${result.sources_used.map(source => \\`\n                        <div class=\"source-item\" style=\"margin-bottom: 8px; padding: 8px; background: rgba(0,0,0,0.2); border-radius: 3px;\">\n                            <strong>\\${source.name}</strong> (\\${source.type})<br>\n                            \\${source.confidence ? \\`<small>Confidence: \\${(source.confidence * 100).toFixed(0)}%</small>\\` : ''}\n                            \\${source.trust_score ? \\`<small>Trust: \\${(source.trust_score * 100).toFixed(0)}%</small>\\` : ''}\n                        </div>\n                    \\`).join('')}\n                </div>\n            \\`;\n        }\n        \n        // Event listeners\n        document.getElementById('query-input').addEventListener('input', updateExecuteButton);\n        document.getElementById('query-input').addEventListener('input', updatePrediction);\n        \n        // Initialize\n        connectWebSocket();\n    </script>\n</body>\n</html>\n        `;\n    }\n    \n    async handleWebSocketMessage(sessionId, data) {\n        const session = this.activeInterface.get(sessionId);\n        if (!session) return;\n        \n        session.lastActivity = new Date();\n        \n        switch (data.type) {\n            case 'get_components':\n                await this.sendComponentsToSession(sessionId, data.librarian);\n                break;\n                \n            case 'predict_performance':\n                const prediction = this.predictPerformance(data.librarian, data.components, data.query);\n                this.broadcastToSession(sessionId, {\n                    type: 'prediction_updated',\n                    prediction\n                });\n                break;\n                \n            case 'execute_components':\n                await this.executeComponentsForSession(sessionId, data);\n                break;\n        }\n    }\n    \n    async executeComponentCombination(execution) {\n        execution.status = 'executing';\n        execution.startedAt = new Date();\n        \n        // Broadcast execution started\n        this.broadcastToSession(execution.sessionId, {\n            type: 'execution_started',\n            execution\n        });\n        \n        try {\n            // Execute via librarian system\n            const result = await this.librarian.processLibrarianQuery(\n                execution.librarian,\n                execution.query,\n                execution.components,\n                { sessionId: execution.sessionId }\n            );\n            \n            execution.status = 'completed';\n            execution.completedAt = new Date();\n            execution.result = result;\n            \n            // Move to history\n            this.executionHistory.push(execution);\n            this.executionQueue = this.executionQueue.filter(e => e.id !== execution.id);\n            \n            // Broadcast completion\n            this.broadcastToSession(execution.sessionId, {\n                type: 'execution_completed',\n                execution,\n                result\n            });\n            \n            return result;\n            \n        } catch (error) {\n            execution.status = 'failed';\n            execution.error = error.message;\n            execution.completedAt = new Date();\n            \n            this.executionHistory.push(execution);\n            this.executionQueue = this.executionQueue.filter(e => e.id !== execution.id);\n            \n            throw error;\n        }\n    }\n    \n    predictPerformance(librarian, components, query) {\n        const componentData = this.librarian.components.get(librarian) || [];\n        \n        let estimatedTime = 0;\n        let computationalCost = 0;\n        let expectedConfidence = 0;\n        let databaseQueries = 0;\n        let externalCalls = 0;\n        \n        for (const componentName of components) {\n            const component = componentData.find(c => c.name === componentName);\n            if (component) {\n                // Estimate time based on computational cost\n                const costMultiplier = {\n                    'low': 100,\n                    'medium': 300,\n                    'high': 800,\n                    'very_high': 2000\n                };\n                \n                estimatedTime += costMultiplier[component.computational_cost] || 300;\n                computationalCost += costMultiplier[component.computational_cost] || 300;\n                expectedConfidence += component.accuracy_expectation;\n                databaseQueries += component.databases.length;\n                externalCalls += component.trust_sources.length;\n            }\n        }\n        \n        // Adjust for query complexity\n        const queryComplexity = query.split(' ').length / 10; // Simple heuristic\n        estimatedTime *= (1 + queryComplexity * 0.2);\n        \n        // Average confidence\n        expectedConfidence = components.length > 0 ? expectedConfidence / components.length : 0.5;\n        \n        return {\n            estimated_time_ms: Math.round(estimatedTime),\n            computational_cost: computationalCost,\n            expected_confidence: expectedConfidence,\n            database_queries: databaseQueries,\n            external_calls: externalCalls,\n            component_count: components.length,\n            query_complexity: queryComplexity\n        };\n    }\n    \n    getPredictedPerformance(librarian, componentName) {\n        // Get historical performance if available\n        const usage = this.librarian.performanceMetrics.componentUsage.get(componentName) || 0;\n        const queryTimes = this.librarian.performanceMetrics.queryTimes.get(librarian) || [];\n        \n        const avgTime = queryTimes.length > 0 ? \n            queryTimes.reduce((sum, time) => sum + time, 0) / queryTimes.length : 500;\n        \n        return {\n            average_execution_time: Math.round(avgTime),\n            total_usage: usage,\n            reliability_score: usage > 0 ? Math.min(1.0, usage / 100) : 0.5\n        };\n    }\n    \n    getComponentUsageStats(componentName) {\n        const usage = this.librarian.performanceMetrics.componentUsage.get(componentName) || 0;\n        const recent = usage > 0 ? 'active' : 'unused';\n        \n        return {\n            total_executions: usage,\n            status: recent,\n            popularity_rank: this.calculateComponentRank(componentName)\n        };\n    }\n    \n    calculateComponentRank(componentName) {\n        // Simple ranking based on usage\n        const allUsage = Array.from(this.librarian.performanceMetrics.componentUsage.entries())\n            .sort((a, b) => b[1] - a[1]);\n        \n        const rank = allUsage.findIndex(([name]) => name === componentName);\n        return rank >= 0 ? rank + 1 : allUsage.length + 1;\n    }\n    \n    broadcastToSession(sessionId, data) {\n        const session = this.activeInterface.get(sessionId);\n        if (session && session.ws.readyState === 1) { // WebSocket.OPEN\n            session.ws.send(JSON.stringify(data));\n        }\n    }\n    \n    generateSessionId() {\n        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    \n    getInterfaceStatus() {\n        return {\n            active_sessions: this.activeInterface.size,\n            execution_queue_length: this.executionQueue.length,\n            execution_history_count: this.executionHistory.length,\n            total_predictions_made: this.performancePredictions.size\n        };\n    }\n}\n\nmodule.exports = CalComponentInterface;"