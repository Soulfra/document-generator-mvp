#!/bin/bash

# ü§ù‚úÖ LAUNCH HANDSHAKE VERIFIER SYSTEM
# =====================================
# Tests all handshakes and shows what's actually working

echo "ü§ù‚úÖ HANDSHAKE VERIFIER SYSTEM"
echo "=============================="
echo ""
echo "üîç System Health Dashboard Features:"
echo "   ‚Ä¢ Scans all your systems for online status"
echo "   ‚Ä¢ Tests handshake protocols between systems"
echo "   ‚Ä¢ Real-time monitoring with alerts"
echo "   ‚Ä¢ Smart recommendations for fixes"
echo "   ‚Ä¢ Integration verification"
echo ""

# Check if port 5555 is available
if lsof -Pi :5555 -sTCP:LISTEN -t >/dev/null ; then
    echo "‚ö†Ô∏è  Port 5555 is already in use. Stopping existing service..."
    kill $(lsof -t -i:5555) 2>/dev/null || true
    sleep 2
fi

echo "üñ•Ô∏è SYSTEMS TO VERIFY:"
echo "   ‚Ä¢ Centipede OS (port 2222)"
echo "   ‚Ä¢ Minimap Eyeball (port 3333)"  
echo "   ‚Ä¢ Collection Log (port 4444)"
echo "   ‚Ä¢ Infinite Layers (port 11111)"
echo "   ‚Ä¢ Matrix Game (port 8888)"
echo "   ‚Ä¢ HollowTown (port 8888)"
echo ""

echo "ü§ù HANDSHAKE TESTS:"
echo "   ‚Ä¢ Lost User: 'I'm lost, what should I do?' ‚Üí expects suggestions"
echo "   ‚Ä¢ Build Request: 'Build something cool' ‚Üí expects build recommendations"
echo "   ‚Ä¢ Eye Focus: 'Focus on centipede zone' ‚Üí expects focus confirmation"
echo "   ‚Ä¢ Segment Process: '/api/process/head' ‚Üí expects processing result"
echo "   ‚Ä¢ Layer Navigation: '/api/layers' ‚Üí expects layer data"
echo "   ‚Ä¢ Matrix Integration: '/api/levels' ‚Üí expects game level data"
echo ""

echo "üìä VERIFICATION FEATURES:"
echo "   ‚Ä¢ System online/offline detection"
echo "   ‚Ä¢ Handshake success/failure analysis"
echo "   ‚Ä¢ Response time measurement"
echo "   ‚Ä¢ Integration gap identification"
echo "   ‚Ä¢ Real-time health monitoring"
echo ""

echo "‚ö° MONITORING CAPABILITIES:"
echo "   ‚Ä¢ Scans every 10 seconds automatically"
echo "   ‚Ä¢ Alerts when systems go up/down"
echo "   ‚Ä¢ Tracks handshake success rates"
echo "   ‚Ä¢ Provides smart recommendations"
echo "   ‚Ä¢ Live dashboard updates"
echo ""

echo "üöÄ Launching Handshake Verifier..."
node handshake-verifier.js &
VERIFIER_PID=$!

# Wait for startup
sleep 3

# Check if system started successfully
if ps -p $VERIFIER_PID > /dev/null; then
    echo ""
    echo "‚úÖ Handshake Verifier started successfully!"
    echo ""
    echo "ü§ù VERIFICATION DASHBOARD: http://localhost:5555"
    echo ""
    echo "üìä WHAT YOU'LL SEE:"
    echo "   ‚Ä¢ Real-time system status (online/offline)"
    echo "   ‚Ä¢ Handshake test results with success rates"
    echo "   ‚Ä¢ Smart recommendations for fixing issues"
    echo "   ‚Ä¢ Live monitoring alerts"
    echo "   ‚Ä¢ Integration health overview"
    echo ""
    echo "üéØ DASHBOARD SECTIONS:"
    echo "   ‚Ä¢ Health Overview: Overall system health metrics"
    echo "   ‚Ä¢ System Cards: Individual system status and ports"
    echo "   ‚Ä¢ Handshake Tests: Detailed test results and responses"
    echo "   ‚Ä¢ Recommendations: AI-generated action items"
    echo "   ‚Ä¢ Live Monitoring: Real-time alerts and updates"
    echo ""
    echo "üîß INTERACTIVE CONTROLS:"
    echo "   ‚Ä¢ Rescan Systems - Check all systems again"
    echo "   ‚Ä¢ Retest Handshakes - Run all handshake tests"
    echo "   ‚Ä¢ Pause Monitoring - Stop real-time monitoring"
    echo "   ‚Ä¢ Clear Alerts - Remove alert notifications"
    echo ""
    echo "üö® ALERT TYPES:"
    echo "   ‚Ä¢ System Down: When a system goes offline"
    echo "   ‚Ä¢ System Up: When a system comes back online"
    echo "   ‚Ä¢ Handshake Failure: When integration breaks"
    echo "   ‚Ä¢ Performance Issues: Slow response times"
    echo ""
    echo "üí° SMART RECOMMENDATIONS:"
    echo "   ‚Ä¢ Critical: Offline systems that need starting"
    echo "   ‚Ä¢ Warning: Poor handshake health (< 70%)"
    echo "   ‚Ä¢ Improvement: Integration opportunities"
    echo ""
    
    # Try to open browser
    if command -v open >/dev/null 2>&1; then
        echo "üåê Opening handshake verifier dashboard..."
        open http://localhost:5555
    elif command -v xdg-open >/dev/null 2>&1; then
        echo "üåê Opening handshake verifier dashboard..."
        xdg-open http://localhost:5555
    else
        echo "üì± Manually visit: http://localhost:5555"
    fi
    
    echo ""
    echo "‚èπÔ∏è  To stop: kill $VERIFIER_PID"
    echo ""
    echo "ü§ù Verifying all handshakes and monitoring system health..."
    echo ""
    
    # Keep script running
    echo "üîÑ Handshake verifier running... Press Ctrl+C to stop"
    trap "echo ''; echo 'ü§ù Stopping handshake verification...'; kill $VERIFIER_PID; exit 0" INT
    
    # Monitor the process
    while ps -p $VERIFIER_PID > /dev/null; do
        sleep 5
    done
    
    echo "‚ùå Handshake verifier stopped"
else
    echo "‚ùå Failed to launch Handshake Verifier System"
    exit 1
fi