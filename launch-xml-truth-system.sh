#!/bin/bash

# üóÇÔ∏è‚öñÔ∏è XML TRUTH SYSTEM LAUNCHER
# ===============================
# Launch the complete XML schema mapping and integrity enforcement system
# Keep ALL databases honest with XML validation

set -e

echo "üóÇÔ∏è‚öñÔ∏è XML TRUTH SYSTEM LAUNCHER"
echo "=============================="
echo ""
echo "üéØ LAUNCHING XML SCHEMA MAPPING & INTEGRITY ENFORCEMENT"
echo "üîó CROSS-DATABASE TRUTH LAYER ACTIVATION"
echo "‚öñÔ∏è NO INVALID DATA SHALL PASS"
echo ""

# Check dependencies
echo "üîç Checking dependencies..."

if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js not found! Please install Node.js to continue."
    exit 1
fi
echo "   ‚úÖ Node.js available"

# Check required files
REQUIRED_FILES=(
    "xml-schema-mapper.js"
    "xml-integrity-enforcer.js"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        echo "   ‚úÖ Found $file"
    else
        echo "   ‚ùå Missing $file"
        echo "      This file is required for the XML truth system."
        exit 1
    fi
done

echo ""

# Create XML truth system directories
echo "üèóÔ∏è Setting up XML truth system infrastructure..."
mkdir -p .xml-truth-system/logs
mkdir -p .xml-truth-system/schemas
mkdir -p .xml-truth-system/integrity
mkdir -p .xml-truth-system/exports
mkdir -p xml-schemas
mkdir -p xml-schemas/cross-references
echo "   ‚úÖ XML truth system infrastructure ready"

echo ""
echo "üöÄ LAUNCHING XML TRUTH SYSTEM..."
echo "==============================="

# Start XML Schema Mapper
echo "üóÇÔ∏è Starting XML Schema Mapper..."
nohup node xml-schema-mapper.js > .xml-truth-system/logs/schema-mapper.log 2>&1 &
SCHEMA_MAPPER_PID=$!
echo $SCHEMA_MAPPER_PID > .xml-truth-system/logs/schema-mapper.pid

echo "   üóÇÔ∏è Schema Mapper started (PID: $SCHEMA_MAPPER_PID)"
echo "   üìÑ Generating XML schemas for all data types..."
echo "   üîó Creating cross-database mappings..."
echo "   ‚è≥ Waiting for schema generation to complete..."

# Wait for schema mapper to initialize
max_attempts=15
attempt=1
schemas_ready=false

while [[ $attempt -le $max_attempts ]]; do
    # Check if XML schemas directory has been populated
    if [[ -d "xml-schemas" ]] && [[ $(ls xml-schemas/*.xsd 2>/dev/null | wc -l) -gt 0 ]]; then
        echo "   üìÑ XML schemas generated successfully"
        schemas_ready=true
        break
    else
        echo "   ‚è≥ Attempt $attempt/$max_attempts - generating schemas..."
        sleep 2
        ((attempt++))
    fi
done

if [[ "$schemas_ready" != true ]]; then
    echo "   ‚ö†Ô∏è  Schema generation may still be in progress..."
fi

# Start XML Integrity Enforcer
echo ""
echo "‚öñÔ∏è Starting XML Integrity Enforcer..."
nohup node xml-integrity-enforcer.js > .xml-truth-system/logs/integrity-enforcer.log 2>&1 &
INTEGRITY_ENFORCER_PID=$!
echo $INTEGRITY_ENFORCER_PID > .xml-truth-system/logs/integrity-enforcer.pid

echo "   ‚öñÔ∏è Integrity Enforcer started (PID: $INTEGRITY_ENFORCER_PID)"
echo "   üîí Activating cross-database integrity enforcement"
echo "   üõ°Ô∏è Setting up data validation hooks"
echo "   ‚è≥ Waiting for enforcement system to come online..."

# Wait for integrity enforcer
sleep 10

echo ""
echo "üéâ XML TRUTH SYSTEM IS ACTIVE!"
echo "============================="
echo ""
echo "üóÇÔ∏è XML SCHEMA MAPPER STATUS"
echo "==========================="
echo "Schema Generator:      PID $SCHEMA_MAPPER_PID"
echo "Schema Directory:      ./xml-schemas/"
echo "Database Mappings:     ./xml-schemas/cross-references/"
echo "Schema Logs:           tail -f .xml-truth-system/logs/schema-mapper.log"
echo ""

echo "‚öñÔ∏è XML INTEGRITY ENFORCER STATUS"
echo "================================"
echo "Integrity Enforcer:    PID $INTEGRITY_ENFORCER_PID"
echo "Enforcement Level:     STRICT (blocks invalid data)"
echo "Monitoring Active:     Cross-database validation"
echo "Enforcer Logs:         tail -f .xml-truth-system/logs/integrity-enforcer.log"
echo ""

echo "üóÇÔ∏è GENERATED XML SCHEMAS"
echo "========================"
if [[ -d "xml-schemas" ]]; then
    echo "üìÑ Core Schemas:"
    for schema in xml-schemas/*.xsd; do
        if [[ -f "$schema" ]]; then
            filename=$(basename "$schema")
            echo "   ‚Ä¢ $filename - $(echo "$filename" | sed 's/.xsd//' | tr '-' ' ' | sed 's/\b\w/\U&/g') Schema"
        fi
    done
    
    echo ""
    echo "üîó Cross-Reference Schemas:"
    for crossref in xml-schemas/cross-references/*.xsd; do
        if [[ -f "$crossref" ]]; then
            filename=$(basename "$crossref")
            echo "   ‚Ä¢ $filename - $(echo "$filename" | sed 's/.xsd//' | tr '_' ' ' | sed 's/\b\w/\U&/g')"
        fi
    done
else
    echo "   ‚è≥ Schemas still generating..."
fi

echo ""
echo "üîó DATABASE MAPPINGS ACTIVE"
echo "==========================="
echo "‚úÖ SQLite:        Primary database (REALITY.db)"
echo "üîÑ MongoDB:       Secondary store (when available)"
echo "üîÑ PostgreSQL:    Backup database (when available)"
echo "üîÑ Redis:         Cache layer (when available)"
echo "üîÑ Elasticsearch: Search index (when available)"
echo ""

echo "‚öñÔ∏è INTEGRITY ENFORCEMENT FEATURES"
echo "================================="
echo "üîí STRICT MODE ACTIVE:"
echo "   ‚Ä¢ All database operations XML-validated"
echo "   ‚Ä¢ Invalid data operations blocked"
echo "   ‚Ä¢ Schema compliance enforced"
echo "   ‚Ä¢ Foreign key relationships verified"
echo "   ‚Ä¢ Duplicate key detection active"
echo "   ‚Ä¢ Data type constraints enforced"
echo ""

echo "üõ°Ô∏è PROTECTION FEATURES:"
echo "   ‚Ä¢ Pre-operation validation"
echo "   ‚Ä¢ Post-operation verification"
echo "   ‚Ä¢ Cross-database consistency checking"
echo "   ‚Ä¢ Automatic rollback on integrity failure"
echo "   ‚Ä¢ Real-time violation monitoring"
echo ""

echo "üìä MONITORING CAPABILITIES:"
echo "   ‚Ä¢ Integrity score calculation"
echo "   ‚Ä¢ Database health monitoring"
echo "   ‚Ä¢ Violation tracking and reporting"
echo "   ‚Ä¢ Performance metrics collection"
echo ""

echo "üîß HOW THE XML TRUTH SYSTEM WORKS"
echo "================================="
echo ""
echo "1. üìÑ XML SCHEMA GENERATION:"
echo "   ‚Ä¢ Creates XSD schemas for every data type"
echo "   ‚Ä¢ Maps schemas to all target databases"
echo "   ‚Ä¢ Generates cross-reference mappings"
echo "   ‚Ä¢ Establishes validation rules"
echo ""

echo "2. üîó CROSS-DATABASE MAPPING:"
echo "   ‚Ä¢ SQLite ‚Üí Native SQL tables"
echo "   ‚Ä¢ MongoDB ‚Üí Document collections"
echo "   ‚Ä¢ PostgreSQL ‚Üí Relational tables"
echo "   ‚Ä¢ Redis ‚Üí Key-value pairs"
echo "   ‚Ä¢ Elasticsearch ‚Üí Search indices"
echo ""

echo "3. ‚öñÔ∏è INTEGRITY ENFORCEMENT:"
echo "   ‚Ä¢ Intercepts ALL database operations"
echo "   ‚Ä¢ Validates against XML schemas FIRST"
echo "   ‚Ä¢ Blocks invalid data at the gate"
echo "   ‚Ä¢ Maintains referential integrity"
echo "   ‚Ä¢ Prevents data corruption"
echo ""

echo "4. üìä CONTINUOUS MONITORING:"
echo "   ‚Ä¢ Real-time integrity checking"
echo "   ‚Ä¢ Violation detection and logging"
echo "   ‚Ä¢ Database health assessment"
echo "   ‚Ä¢ Automatic correction attempts"
echo ""

echo "üéØ WHAT THIS MEANS FOR YOUR DATA"
echo "================================"
echo ""
echo "‚úÖ GUARANTEED CONSISTENCY:"
echo "   ‚Ä¢ Same data structure across all databases"
echo "   ‚Ä¢ No more format mismatches"
echo "   ‚Ä¢ Unified validation rules"
echo "   ‚Ä¢ Automated integrity maintenance"
echo ""

echo "üö´ PROTECTION FROM:"
echo "   ‚Ä¢ Invalid data insertion"
echo "   ‚Ä¢ Schema drift between databases"
echo "   ‚Ä¢ Orphaned records"
echo "   ‚Ä¢ Type conversion errors"
echo "   ‚Ä¢ Referential integrity violations"
echo ""

echo "üîÑ AUTOMATIC FEATURES:"
echo "   ‚Ä¢ Cross-database synchronization"
echo "   ‚Ä¢ Schema version management"
echo "   ‚Ä¢ Integrity violation correction"
echo "   ‚Ä¢ Data format transformation"
echo ""

echo "üõ†Ô∏è XML TRUTH SYSTEM MANAGEMENT"
echo "=============================="
echo "Schema Operations:"
echo "   View schemas:          ls -la xml-schemas/"
echo "   Check schema status:   curl http://localhost:8300/schemas/status"
echo "   Export schemas:        node xml-schema-mapper.js --export"
echo ""

echo "Integrity Operations:"
echo "   Check integrity:       curl http://localhost:8301/integrity/status"
echo "   View violations:       curl http://localhost:8301/integrity/violations"
echo "   Generate report:       node xml-integrity-enforcer.js --report"
echo ""

echo "System Control:"
echo "   Stop schema mapper:    kill \\$(cat .xml-truth-system/logs/schema-mapper.pid)"
echo "   Stop enforcer:         kill \\$(cat .xml-truth-system/logs/integrity-enforcer.pid)"
echo "   View system logs:      tail -f .xml-truth-system/logs/*.log"
echo ""

echo "üéÆ ENFORCEMENT LEVEL CONTROL"
echo "============================"
echo "Current Level: STRICT (recommended)"
echo ""
echo "Available Levels:"
echo "   ‚Ä¢ STRICT:     Block all invalid operations (current)"
echo "   ‚Ä¢ CORRECTIVE: Auto-correct when possible"
echo "   ‚Ä¢ MONITORING: Log violations but allow operations"
echo "   ‚Ä¢ DISABLED:   No enforcement (not recommended)"
echo ""

echo "üìà SYSTEM BENEFITS"
echo "=================="
echo ""
echo "üéØ DATA QUALITY:"
echo "   ‚Ä¢ 100% schema compliance guaranteed"
echo "   ‚Ä¢ Consistent data types across systems"
echo "   ‚Ä¢ Referential integrity maintained"
echo "   ‚Ä¢ No more 'garbage in, garbage out'"
echo ""

echo "üîí DATA SECURITY:"
echo "   ‚Ä¢ Prevents data corruption"
echo "   ‚Ä¢ Blocks malformed inputs"
echo "   ‚Ä¢ Validates data relationships"
echo "   ‚Ä¢ Maintains system integrity"
echo ""

echo "‚ö° OPERATIONAL BENEFITS:"
echo "   ‚Ä¢ Reduces debugging time"
echo "   ‚Ä¢ Prevents system crashes"
echo "   ‚Ä¢ Enables confident scaling"
echo "   ‚Ä¢ Simplifies data migration"
echo ""

echo "üîÑ XML TRUTH SYSTEM IS NOW PROTECTING YOUR DATA"
echo "==============================================="
echo ""
echo "The XML Truth System is now actively protecting your data:"
echo ""
echo "‚úÖ All database operations are XML-validated"
echo "‚úÖ Invalid data is blocked before it can cause problems"
echo "‚úÖ Schema consistency is enforced across all databases"
echo "‚úÖ Data integrity is continuously monitored"
echo "‚úÖ Violations are detected and reported immediately"
echo ""
echo "Your data is now protected by the XML Truth Layer!"
echo ""

# Function to cleanup on exit
cleanup() {
    echo ""
    echo "üõë SHUTTING DOWN XML TRUTH SYSTEM..."
    echo "===================================="
    
    # Stop schema mapper
    if [[ -f ".xml-truth-system/logs/schema-mapper.pid" ]]; then
        pid=$(cat ".xml-truth-system/logs/schema-mapper.pid")
        if kill -0 "$pid" 2>/dev/null; then
            echo "   üóÇÔ∏è Stopping XML Schema Mapper (PID: $pid)"
            kill "$pid"
        fi
        rm -f ".xml-truth-system/logs/schema-mapper.pid"
    fi
    
    # Stop integrity enforcer
    if [[ -f ".xml-truth-system/logs/integrity-enforcer.pid" ]]; then
        pid=$(cat ".xml-truth-system/logs/integrity-enforcer.pid")
        if kill -0 "$pid" 2>/dev/null; then
            echo "   ‚öñÔ∏è Stopping XML Integrity Enforcer (PID: $pid)"
            kill "$pid"
        fi
        rm -f ".xml-truth-system/logs/integrity-enforcer.pid"
    fi
    
    echo "   üìÑ XML schemas preserved in xml-schemas/ directory"
    echo "   üìä Integrity logs preserved in .xml-truth-system/logs/"
    echo "   ‚úÖ XML Truth System shutdown complete"
    echo ""
    echo "üóÇÔ∏è Your XML schemas and integrity rules are preserved."
    echo "   Restart anytime with: ./launch-xml-truth-system.sh"
    exit 0
}

# Set up signal handling
trap cleanup SIGINT SIGTERM

# Monitor XML truth system
echo "üîÑ XML Truth System monitoring active. Press Ctrl+C to shutdown safely."
echo ""

# Monitoring loop
while true; do
    sleep 120  # Check every 2 minutes
    
    # Check if both systems are still running
    schema_mapper_running=false
    integrity_enforcer_running=false
    
    if [[ -f ".xml-truth-system/logs/schema-mapper.pid" ]]; then
        pid=$(cat ".xml-truth-system/logs/schema-mapper.pid")
        if kill -0 "$pid" 2>/dev/null; then
            schema_mapper_running=true
        fi
    fi
    
    if [[ -f ".xml-truth-system/logs/integrity-enforcer.pid" ]]; then
        pid=$(cat ".xml-truth-system/logs/integrity-enforcer.pid")
        if kill -0 "$pid" 2>/dev/null; then
            integrity_enforcer_running=true
        fi
    fi
    
    if [[ "$schema_mapper_running" == true ]] && [[ "$integrity_enforcer_running" == true ]]; then
        echo "üóÇÔ∏è‚öñÔ∏è $(date): XML Truth System operational - all databases protected"
    else
        echo "‚ö†Ô∏è  $(date): Some XML Truth System components may be offline"
        if [[ "$schema_mapper_running" != true ]]; then
            echo "   ‚ùå Schema Mapper offline"
        fi
        if [[ "$integrity_enforcer_running" != true ]]; then
            echo "   ‚ùå Integrity Enforcer offline"
        fi
    fi
    
    # Check schema generation status
    if [[ -d "xml-schemas" ]]; then
        schema_count=$(ls xml-schemas/*.xsd 2>/dev/null | wc -l)
        echo "   üìÑ $schema_count XML schemas active"
    fi
done