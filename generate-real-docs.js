#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üìö GENERATING REAL DOCUMENTATION FROM CODE\n');

// Extract actual info from files
const documentation = {
  characters: [],
  tiers: [],
  apis: [],
  schemas: []
};

// Extract characters from character-system-max.js
try {
  const CharacterSystem = require('./character-system-max.js');
  const chars = new CharacterSystem();
  
  for (const [name, char] of chars.characters) {
    documentation.characters.push({
      name: name,
      avatar: char.avatar,
      role: char.role,
      catchphrase: char.catchphrase
    });
  }
  console.log(`‚úÖ Found ${documentation.characters.length} characters`);
} catch (e) {
  console.log('‚ùå Could not load characters:', e.message);
}

// Extract schemas
try {
  const CharacterSystem = require('./character-system-max.js');
  const chars = new CharacterSystem();
  
  for (const [key, schema] of chars.schemas) {
    documentation.schemas.push({
      key: key,
      name: schema.name,
      editable: schema.editable,
      fields: schema.fields
    });
  }
  console.log(`‚úÖ Found ${documentation.schemas.length} schemas`);
} catch (e) {
  console.log('‚ùå Could not load schemas');
}

// Find all tier files
const tierFiles = [
  { name: 'CLI', file: './cli.js' },
  { name: 'Web Interface', file: './web-interface.js' },
  { name: 'Integration Layer', file: './integration-layer.js' },
  { name: 'Mesh Layer', file: './mesh-layer.js' },
  { name: 'Tool Layer', file: './tool-layer.js' },
  { name: 'Runtime Layer', file: './runtime-layer.js' },
  { name: 'Economy Layer', file: './economy-layer.js' },
  { name: 'Git Layer', file: './git-layer.js' },
  { name: 'Tier 3 Symlinks', file: './FinishThisIdea/tier-3-symlink-manager.js' },
  { name: 'Tier 4 Substrate', file: './FinishThisIdea/tier-4-substrate-manager.js' },
  { name: 'Tier 5 Universal', file: './FinishThisIdea/tier-5-universal-interface.js' }
];

tierFiles.forEach(tier => {
  if (fs.existsSync(tier.file)) {
    documentation.tiers.push(tier);
  }
});

console.log(`‚úÖ Found ${documentation.tiers.length} tiers`);

// Generate actual documentation
const realDocs = `# Document Generator - Actual System Documentation

Generated: ${new Date().toISOString()}

## üé≠ Living Characters (${documentation.characters.length} total)

${documentation.characters.map(char => 
`### ${char.avatar} ${char.name} - ${char.role}
- Catchphrase: "${char.catchphrase}"`
).join('\n')}

## üèóÔ∏è System Tiers (${documentation.tiers.length} discovered)

${documentation.tiers.map((tier, i) => 
`${i + 1}. **${tier.name}**
   - File: \`${tier.file}\`
   - Status: ‚úÖ Exists`
).join('\n')}

## üìã Editable Schemas (${documentation.schemas.length} total)

${documentation.schemas.map(schema => 
`### ${schema.name}
- Key: \`${schema.key}\`
- Editable: ${schema.editable ? '‚úÖ Yes' : '‚ùå No'}
- Fields: ${Object.keys(schema.fields || {}).length}`
).join('\n')}

## üöÄ Quick Start Commands

\`\`\`bash
# Start Character Web Interface
node execute-character-system.js
# ‚Üí Open http://localhost:8888

# Run Character System Only
node character-system-max.js

# View All Tiers
node tier-connector.js

# Test Everything
node test-it-now.js
\`\`\`

## üîó System Flow

1. User uploads document
2. Characters analyze it (Nova translates, Aria orchestrates)
3. Document flows through ${documentation.tiers.length} tiers
4. Sovereign agents apply reasoning
5. Human approves via API
6. MVP generated

## üíæ Data Structures

### Character Memory
Each character maintains:
- Thoughts array
- Speech history
- Relationships map
- Current task
- Emotional state

### Document Processing
\`\`\`javascript
{
  input: "user document",
  analysis: "AI extracted insights",
  requirements: "parsed requirements",
  architecture: "generated design",
  code: "generated implementation",
  mvp: "deployable package"
}
\`\`\`

## üõ†Ô∏è Current Status

- Characters: ${documentation.characters.length > 0 ? '‚úÖ Working' : '‚ùå Not loaded'}
- Tiers: ${documentation.tiers.length} / 13+ found
- Schemas: ${documentation.schemas.length > 0 ? '‚úÖ Loaded' : '‚ùå Not loaded'}
- Web Interface: Port 8888
- API Server: Port 3001

## üìù Notes

This documentation was auto-generated by scanning the actual codebase.
Run \`node generate-real-docs.js\` to regenerate.
`;

// Write documentation
fs.writeFileSync('ACTUAL-SYSTEM-DOCS.md', realDocs);
console.log('\n‚úÖ Documentation generated: ACTUAL-SYSTEM-DOCS.md');

// Also create a simple test report
const testReport = {
  timestamp: new Date().toISOString(),
  charactersFound: documentation.characters.length,
  tiersFound: documentation.tiers.length,
  schemasFound: documentation.schemas.length,
  criticalFiles: {
    'character-system-max.js': fs.existsSync('./character-system-max.js'),
    'execute-character-system.js': fs.existsSync('./execute-character-system.js'),
    'tier-connector.js': fs.existsSync('./tier-connector.js'),
    'services/api-server/index.js': fs.existsSync('./services/api-server/index.js')
  }
};

fs.writeFileSync('test-report.json', JSON.stringify(testReport, null, 2));
console.log('‚úÖ Test report generated: test-report.json');

// Show what to do next
console.log('\nüéØ WHAT TO DO NOW:');
console.log('==================');
console.log('1. Run: node test-it-now.js');
console.log('2. If that works, you\'ll see the web interface');
console.log('3. If not, try: node character-system-max.js');
console.log('4. Check ACTUAL-SYSTEM-DOCS.md for details');
console.log('\nNo more planning - just run the commands!');